<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础（二）</title>
      <link href="2023/08/02/mysql2/"/>
      <url>2023/08/02/mysql2/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础（二）"><a href="#MySQL基础（二）" class="headerlink" title="MySQL基础（二）"></a>MySQL基础（二）</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><strong>常用函数</strong>：</p><ul><li>concat(s1,s2…sn)<ul><li>字符串拼接，将s1,s2…sn拼接成一个字符串</li></ul></li><li>lower(str)<ul><li>将字符串str全部转为小写</li></ul></li><li>upper(str)<ul><li>将字符串str全部转为大写</li></ul></li><li>lpad(str,n,pad)<ul><li>左填充，用字符串pad对str左侧进行填充，达到n个字符串长度</li></ul></li><li>rpad(str,n,pad)<ul><li>右填充，用字符串pad对str右侧进行填充，达到n个字符串长度</li></ul></li><li>trim(str)<ul><li>去掉字符串头部和尾部的空格</li></ul></li><li>substring(str,start,len)<ul><li>返回从字符串str从start位置起的len个长度的字符串</li></ul></li></ul><h3 id="数据函数"><a href="#数据函数" class="headerlink" title="数据函数"></a>数据函数</h3><p><strong>常用函数</strong>：</p><ul><li>ceil(x)<ul><li>向上取整</li></ul></li><li>floor(x)<ul><li>向下取整</li></ul></li><li>mod(x,y)<ul><li>返回x/y的摸</li></ul></li><li>rand()<ul><li>返回0-1的随机数</li></ul></li><li>round()<ul><li>求参数x的四舍五入，保留y位小数</li></ul></li></ul><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><ul><li>curdate()<ul><li>返回当前日期</li></ul></li><li>curtime()<ul><li>返回当前时间</li></ul></li><li>now()<ul><li>返回当前日期和时间</li></ul></li><li>year(date)<ul><li>获取指定date的年份</li></ul></li><li>month(date)<ul><li>获取指定date的月份</li></ul></li><li>day(date)<ul><li>获取指定date的日期</li></ul></li><li>date_add(date,interval expr type)<ul><li>返回一个日期/时间值加上一个时间间隔expr后的时间值</li></ul></li><li>datediff(date1,date2)<ul><li>返回起始时间date1和结束时间date2之间的天数</li></ul></li></ul><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><ul><li>if(value,t,f)<ul><li>若value为true，则返回t，否则返回f</li></ul></li><li>ifnull(value1,value2)<ul><li>若value1不为null，返回value1，否则返回value2</li></ul></li><li>case when [val1] then [res1]…else [default] end<ul><li>若val1为true，返回res1,…否则返回default默认值</li></ul></li><li>case [expr] when [val1] then [res1]…else [default] end<ul><li>若expr的值等于val1，返回res1,…否则返回default默认值</li></ul></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><strong>约束</strong>是作用于表中字段上的规则，用于限制存储在表中的数据。  </p><p><strong>目的</strong>：保证数据库中数据的正确，有效性和完整性。  </p><p><strong>分类</strong>：</p><ul><li>非空约束<ul><li>关键字：NOT NULL</li><li>限制该字段的数据不能为null</li></ul></li><li>唯一约束<ul><li>关键字：UNIQUE</li><li>保证该字段的所有数据都是唯一，不重复的</li></ul></li><li>主键约束<ul><li>关键字：PRIMARY KEY</li><li>主键是一行数据的唯一标识，要求非空且唯一</li></ul></li><li>默认约束<ul><li>DEFAULT</li><li>保存数据时，若未指定该字段的值，则采用默认值</li></ul></li><li>检查约束（8.0.16版本之后）<ul><li>CHECK</li><li>保证字段值满足某一个条件</li></ul></li><li>外键约束<ul><li>FOREIGN KEY</li><li>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</li></ul></li></ul><p><strong>注</strong>：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束  </p><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;id唯一标识&#39;,</span><br><span class="line">NAME VARCHAR(10) NOT NULL UNIQUE COMMENT &#39;姓名&#39;,</span><br><span class="line">age INT CHECK (age&gt;0&amp;&amp;age&lt;&#x3D;120) COMMENT &#39;年龄&#39;,</span><br><span class="line">STATUS CHAR(1) DEFAULT &#39;1&#39; COMMENT &#39;状态&#39;,</span><br><span class="line">gender CHAR(1) COMMENT &#39;性别&#39;</span><br><span class="line">)COMMENT &quot;用户表&quot;;</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><strong>外键</strong>用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。  </p><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[constraint] [外键名称] foreign key(外键字段名) references 主表(主表列名</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名)</span><br></pre></td></tr></table></figure><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名) on update 行为 on delete 行为</span><br></pre></td></tr></table></figure><p><strong>常见行为</strong>：</p><ul><li>cascade：当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，若有，则也删除/更新外键在子表中的记录</li><li>set null：当在父表中删除对应记录时，首先检查该记录是否有对应外键，若有则设置子表中该外键值为null（这就要求该外键允许取null）</li></ul><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><p>各个表结构之间存在着各种联系，基本上分为三种。</p><ol><li>一对多（多对一）<ul><li><strong>实现</strong>：在数据库表中多的一方，添加字段（外键），来关联一的主键。</li><li>一的表也可称为父表，多的表也可称为子表</li></ul></li><li>多对多<ul><li><strong>实现</strong>：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul></li><li>一对一<ul><li>一对一的关系，多用于表单拆分（一张大表单拆成两个小表单），将一张表的基础字段放在一张表中，其他字段放在另一张表中，以提升操作效率</li><li><strong>实现</strong>：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</li></ul></li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><strong>多表查询</strong>指从多张表中查询数据。  </p><p><strong>笛卡尔积</strong>：是指在数学中，两个集合的所有组合情况，在多表查询时，需消除无效的笛卡尔积。  </p><p><strong>分类</strong>：</p><ol><li>连接查询<ul><li>内连接：相当于查询A，B交集部分的数据</li><li>外连接<ul><li>左外连接：查询左表所有数据（包括两张表交集部分数据）</li><li>右外连接：查询右表所有数据（包括两张表交集部分数据）</li></ul></li></ul></li><li>子查询</li></ol><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li>隐式内连接<ul><li>select 字段列表 from 表1,表2 where 条件…;</li></ul></li><li>显式内连接<ul><li>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</li></ul></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>左外连接<ul><li>select 字段列表 from 左表1 left [outer] join 右表2 on 连接条件;</li></ul></li><li>右外连接<ul><li>select 字段列表 from 左表1 right [outer] join 右表2 on 连接条件;</li></ul></li></ul><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自连接查询，可以是内连接查询，也可以是外连接查询。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表a 别名a join 表a 别名b on 条件..;</span><br></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>对于union查询，就是把多次查询结果合并，形成新的查询结果集。  </p><p>使用联合查询的前提条件：列数和字段类型需保持一致。  </p><p>union all会将全部的数据直接合并在一起，union会对合并之后的数据去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表a...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 from 表b...;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套select语句，成为<strong>嵌套查询</strong>，又称<strong>子查询</strong>。  </p><p><strong>格式</strong>：  </p><p>select * from t1 where column1 = (select column1 from t2…)  </p><p>子查询外部的语句可以是insert/update/delete/select的任何一个，最常见的是select。  </p><p><strong>根据子查询结果分类</strong>：</p><ol><li>标量子查询：子查询返回的结果为单个值(数字，字符串，日期等)，即一行一列<ul><li>常用操作符：=,&lt;&gt;,&gt;,&gt;=,&lt;,&lt;=等</li></ul></li><li>列子查询：子查询返回的结果为一列<ul><li>常用操作符：in,not in，any,some,all等</li><li> any：子查询返回列表中，有任意一个满足即可</li><li>some：与any一致</li><li>all：子查询返回列表的所有值都必须满足</li></ul></li><li>行子查询：子查询返回的结果为一行<ul><li>常用操作符：=,&lt;&gt;,in,not in</li><li>例如：查询与”张三”的salary和managerid相同的员工信息<ul><li>SELECT * FROM emp WHERE (salary,managerid)=(SELECT salary,managerid FROM emp WHERE NAME=”张三”);</li></ul></li></ul></li><li>表子查询：子查询返回的结果为多行多列<ul><li>常用操作符：in</li></ul></li></ol><p><strong>根据子查询位置分类</strong>：where之后，from之后，select之后</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。  </p><p>默认mysql的事务是自动提交的，当执行一条DML语句，mysql会立即隐式的提交事务。  </p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>查看事物提交方式</p><ul><li>select @@autocommit</li></ul></li><li><p>设置事物提交方式</p><ul><li>set @@autocommit=0；</li><li>0为手动，1为自动</li></ul></li><li><p>开启事务</p><ul><li>start transaction;/begin;</li></ul></li><li><p>若一组操作执行成功，则提交事务</p><ul><li>commit;</li></ul></li><li><p>若一组操作至少有一个执行失败，则回滚事务</p><ul><li>rollback;</li></ul></li></ul><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><ol><li><strong>原子性</strong>：事务是不可分割的最小单元，要么全部成功，要么全部失败</li><li><strong>一致性</strong>：事务完成时，必须使所有的数据都保持一致状态</li><li><strong>隔离性</strong>：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li><strong>持久性</strong>：事务一旦提交或回滚，对数据库中的数据的改变就是永久的。</li></ol><h3 id="并发事物问题"><a href="#并发事物问题" class="headerlink" title="并发事物问题"></a>并发事物问题</h3><p><strong>问题</strong>：</p><ul><li>脏读<ul><li>一个事务读到另一个事务还没有提交的数据</li></ul></li><li>不可重复读<ul><li>一个事务先后读同一条记录，但两次读取的数据不同，称之为不可重复读</li></ul></li><li>幻读<ul><li>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了幻影</li></ul></li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>事务隔离级别越高，数据越安全，性能越低。  </p><p><strong>从低到高</strong>：</p><ol><li>Read uncommitted<ul><li>脏读 √</li><li>不可重复读 √</li><li>幻读 √</li></ul></li><li>Read committed<ul><li>脏读 x</li><li>不可重复读 √</li><li>幻读 √</li></ul></li><li>Repeatable Read(默认)<ul><li>脏读  x</li><li>不可重复读  x</li><li>幻读 √</li></ul></li><li>Serializable<ul><li>脏读  x</li><li>不可重复读  x</li><li>幻读 x</li></ul></li></ol><p><strong>查看事务隔离级别</strong>：  </p><p>select @@transaction_isolation;  </p><p><strong>设置事务隔离级别</strong>：  </p><p>set [session/global] transaction isolation level [Read uncommitted/Read committed/Repeatable Read/Serializable]</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础（一）</title>
      <link href="2023/08/01/mysql1/"/>
      <url>2023/08/01/mysql1/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql基础（一）"><a href="#mysql基础（一）" class="headerlink" title="mysql基础（一）"></a>mysql基础（一）</h1><p><strong>数据库</strong>：Database，存储的数据的集合，提供数据存储的服务。  </p><p><strong>数据库管理系统</strong>：Database Manage System，DBMS，数据库管理系统，是位于用户和操作系统之间的一层数据管理软件。  </p><p><strong>SQL</strong>：操作关系型数据库的编程语言，是一套标准。  </p><p><strong>数据库系统管理员</strong>：Database Administrator，DBA，负责数据库创建、使用及维护的专门人员。  </p><p><strong>数据库系统</strong>：Database System，DBS，数据库系统管理员、数据库管理系统及数据库组成整个单元。  </p><p><strong>关系型数据库</strong>：RNDMS，建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询。</li></ul><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ul><li><strong>DDL</strong> :Data Definition Language，数据定义语言，用来定义数据库对象（数据库，表，字段）</li><li><strong>DML</strong>: Data Manipulation Language，数据操作语言，用来对数据库表中的数据进行增删改</li><li><strong>DQL</strong>: Data Query Language，数据查询语言，用来查询数据库中表的记录</li><li><strong>DCL</strong>:Data Control Language，数据控制语言，用来创建数据库用户、控制数据库的访问权限</li></ul><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>默认有符号数，后可加unsigned变为无符号数。</p><ul><li>整数<ul><li>tinyint,占1byte</li><li>smallint,占2byte</li><li>mediumint,占3byte</li><li>int或integer.占4byte</li><li>bigint,占8byte</li></ul></li><li>浮点数，后加括号，括号里两个参数，一个是整个数字长度，一个是小数位个数<ul><li>float,占4byte</li><li>double,占8byte</li><li>decimal,以字符串形式存储，精度更高，依赖于M（精度）和D（标度）的值<ul><li>M：整体的长度</li><li>D：小数的长度 </li></ul></li></ul></li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ul><li><strong>char</strong>:定长字符串，char(n)，最多只能存储n个字符，不足n个字符，占用n个字符空间<ul><li>浪费空间，性能高（时间快）</li></ul></li><li><strong>varchar</strong>:定长字符串，varchar(n)，最多只能存储n个字符，不足n个字符，按实际长度存储<ul><li>节省空间，性能低（时间慢）</li></ul></li><li><strong>tinyblob</strong>，存储二进制字符串，长度0-255字节</li><li><strong>blob</strong>，存储二进制字符串，长度0-65535字节</li><li><strong>mediumblob</strong>，存储二进制字符串，长度0-1677215字节</li><li><strong>longblob</strong>，存储二进制字符串，长度0-4294967295字节</li><li><strong>tinytext</strong>，文本数据（字符串），0-255</li><li><strong>text</strong>，文本数据（字符串），0-65535</li><li><strong>mediumtext</strong>，文本数据（字符串），0-1677215</li><li><strong>longtext</strong>，文本数据（字符串），0-4294967295</li></ul><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><ul><li><strong>date</strong>：日期，只存储年月日，格式YYYY-MM-DD</li><li><strong>time</strong>：时间，只存储时分秒，格式HH:MM:SS</li><li><strong>year</strong>：年份，格式YYYY</li><li><strong>datetime</strong>：日期+时间，存储年月日时分秒，格式YYYY-MM-DD HH:MM:SS</li><li><strong>timestamp</strong>：日期+时间，时间戳，格式YYYY-MM-DD HH:MM:SS</li></ul><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库操作，以下语法中database，可以替换成schema</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询所有数据库：show databases;  </p><p>查询当前数据库：select database();  </p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用数据库：use 数据库名;</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建数据库：create database [if not exits] 数据库名 [default charset 字符集] [collate 排序规则];</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除数据库：drop database [if exits ] 数据库名;</p><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p><strong>格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">字段1 字段类型 [约束] [commnet 字段1注释],</span><br><span class="line">......</span><br><span class="line">字段n 字段类型 [约束] [commnet 字段n注释]</span><br><span class="line">)[commnet 表注释];</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：<br>设计一张员工信息表，要求如下：</p><ol><li>编号（纯数字）</li><li>员工工号(字符串类型,长度不超过10位)</li><li>员工姓名（字符串类型，长度不超过10位）</li><li>性别（男/女，存储一个汉字）</li><li>年龄 （正常人年龄,不可能存储负数）</li><li>身份证号（二代身份证号均为18位，身份证中有X这样的字符）</li><li>入职时间（取值年月日即可)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">id int unsigned comment &#39;编号&#39;,</span><br><span class="line">work_id varchar(10) comment &#39;员工工号&#39;,</span><br><span class="line">name varchar(10) comment &#39;员工姓名&#39;,</span><br><span class="line">gender char(1) comment &#39;性别&#39;,</span><br><span class="line">age tinyint unsigned comment &#39;年龄&#39;,</span><br><span class="line">id_card char(18) comment &#39;身份证号&#39;,</span><br><span class="line">entry_date date comment &#39;入职时间&#39;</span><br><span class="line">) comment &#39;员工信息表&#39;;</span><br></pre></td></tr></table></figure><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><ul><li>查询当前数据库所有表<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li><li>查询建表语句<ul><li>show create table 表名;</li></ul></li></ul><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li>添加字段<ul><li>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</li></ul></li><li>修改字段类型<ul><li>alter table 表名 modify 字段名 新数据类型(长度);</li></ul></li><li>修改字段名和字段类型<ul><li>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</li></ul></li><li>删除字段<ul><li>alter table 表名 drop column 字段名;</li></ul></li><li>修改表名<ul><li>rename table 表名 to新表名;</li></ul></li></ul><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p>删除表时，其中数据也会被删除</p><ul><li>删除表<ul><li>drop table [if exists] 表名;</li></ul></li><li>删除指定表，并重新创建该表（相当于把表中数据清除）<ul><li>truncate table 表名;</li></ul></li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><ul><li>指定字段添加数据<ul><li>insert into 表名(字段名1,字段名2) value(值1,值2);</li></ul></li><li>全部字段添加数据<ul><li>insert into 表名 values(值1,值2…);</li></ul></li><li>批量添加数据（指定字段）<ul><li>insert into 表名(字段名1,字段名2) values(值1,值2),(值1,值2);</li></ul></li><li>批量添加数据（全部字段）<ul><li>insert into 表名 values(值1,值2…),(值1,值2)</li></ul></li></ul><p><strong>注</strong>：</p><ol><li>插入数据时，指定的字段顺序需与值的顺序一一对应</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内。</li></ol><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>update 表名 set 字段名1=值1,字段2=值2,…[where 条件];  </p><p><strong>注</strong>：修改语句的条件可以有，也可无，若无，则会修改整张表的数据</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>delete from 表名 [where 条件];  </p><p><strong>注</strong>：</p><ol><li>delete语句的条件可以有，也可无，若无，则会删除整张表的所有数据</li><li>delete语句不能删除某个字段的值（若要操作，可使用update，将该字段的值值为NULL）</li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><ul><li>查询多个字段<ul><li>select 字段1,字段2,字段3 from 表名;</li></ul></li><li>查询所有字段（通配符）<ul><li>select * from 表名;</li><li><strong>注</strong>： * 代表所有字段，由于星号不直观且影响效率，所以在实际开发中尽量少用</li></ul></li><li>设置别名<ul><li>select 字段 [as 别名1],字段2 [as 别名2] from 表名;</li><li>as可以省略</li><li>若别名中包括特殊字符例如空格，需要将别名用引号引住</li></ul></li><li>去除重复记录<ul><li>select distinct 字段列表 from 表名;</li></ul></li></ul><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>select 字段列表 from 表名 where 条件列表;  </p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 大于</span><br><span class="line">&gt;&#x3D;大于等于</span><br><span class="line">&lt;小于</span><br><span class="line">&lt;&#x3D;小于等于</span><br><span class="line">&#x3D;等于</span><br><span class="line">&lt;&gt;或!&#x3D;   不等于</span><br><span class="line">between ... and ...在某个范围之内(含最小，最大值)</span><br><span class="line">in(...)在in之后的列表中的值，多选一</span><br><span class="line">like 占位符  模糊匹配，_匹配单个字符，%匹配任意个字符</span><br><span class="line">is [not] null（不）是null，不可以用&#x3D;null</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and 或 &amp;&amp;并且，多个条件同时成立</span><br><span class="line">or 或 ||或者，多个条件中任意一个成立</span><br><span class="line">not 或 !非，不是</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><strong>聚合函数</strong>是将一列数据作为一个整体，进行纵向计算。  </p><p>select 聚合函数(字段列表) from 表名;  </p><p><strong>函数</strong>：</p><ul><li><strong>count</strong>：统计数量</li><li><strong>max</strong>：最大值</li><li><strong>min</strong>：最小值</li><li><strong>avg</strong>：平均值</li><li><strong>sum</strong>：求和</li></ul><p><strong>注</strong>：</p><ul><li>null值不参与所有聚合函数运算</li><li>统计数量可以用: count(星号) count(字段) count(常量)，推荐使用count(星号)</li></ul><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];  </p><p><strong>having和where的区别</strong></p><ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，having可以</li></ol><p><strong>注</strong>：</p><ul><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li><li>执行顺序：where&gt;聚合函数&gt;having</li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>select 字段列表 from 表名 [where 条件列表] [group by 分组字段] order by 字段1 排序方式1,字段2 排序方式2…;  </p><p><strong>排序方式</strong>：</p><ol><li>ASC：升序，默认值，可省略</li><li>DESC：降序</li></ol><p><strong>注意事项</strong>：若是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>select 字段列表 from 表名 limit 起始索引,查询记录数;  </p><p><strong>注意事项</strong>：</p><ol><li>起始索引从0开始，起始索引=(查询页码-1)*每页显示记录数</li><li>分页查询在不同的数据库中有不同的实现，MySQL中是LIMIT</li><li>若查询的是第一页数据，起始索引可以省略，直接简写为limit 查询记录数</li></ol><h3 id="编写顺序"><a href="#编写顺序" class="headerlink" title="编写顺序"></a>编写顺序</h3><ol><li>select 字段列表</li><li>from 表名列表</li><li>where 条件列表</li><li>group by 分组字段列表 having 分组后条件列表</li><li>order by 排序字段列表</li><li>limit 分页参数</li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ol><li>from 表名列表</li><li>where 条件列表</li><li>group by 分组字段列表 having 分组后条件列表</li><li>select 字段列表</li><li>order by 排序字段列表</li><li>limit 分页参数</li></ol><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol><li>查询用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改用户密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#39;用户名&#39;@&#39;主机名&#39; identified with mysql_native_password by &#39;新密码&#39;;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:主机名可用%通配。</p><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p><strong>常见权限</strong>:</p><ul><li>all,all privileges:所有权限</li><li>select:查询数据</li><li>insert:插入数据</li><li>update:修改数据</li><li>delete:删除数据</li><li>alter:修改表</li><li>drop:删除数据库/表/视图</li><li>create:创建数据库/表</li></ul><p><strong>查询权限</strong>:  </p><p>show grants for ‘’用户名‘@’主机名’;  </p><p><strong>授予权限</strong>:  </p><p>grant 权限列表 on 数据库.表名 to ‘用户名‘@’主机名’;  </p><p><strong>撤销权限</strong>:  </p><p>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’;  </p><p><strong>注</strong>：</p><ol><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以通过*进行通配，代表所有</li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（八）</title>
      <link href="2023/07/28/jw8/"/>
      <url>2023/07/28/jw8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot（八）"><a href="#SpringBoot（八）" class="headerlink" title="SpringBoot（八）"></a>SpringBoot（八）</h1><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p><strong>从高到低</strong>：</p><ol><li>命令行参数<ul><li>–server.port=8085</li></ul></li><li>java系统属性<ul><li>-Dserver.port=8084</li></ul></li><li>application.properties</li><li>application.yml(推荐使用)</li><li>application.yaml</li></ol><p>打包后可在cmd中执行java指令，运行jar包:  </p><p>java –Dserver.port=8084 -jar 名字.jar –server.port=8085  </p><p><strong>注意事项</strong>：SpringBoot项目进行打包时，需引入插件spring-boot-maven-plugin（基于官网骨架创建项目，会自动添加该插件）</p><h2 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h2><p>默认情况下，Spring项目启动时，会把bean都创建好(这里主要针对默认的单例非延迟加载的bean)放在IOC容器中，若想主动获取bean，可通过以下方式：</p><ul><li>根据name获取bean：<ul><li>Object getBean(String name)</li></ul></li><li>根据类型获取bean:<ul><li><T> T getBean(Class<T> requiredType)</T></T></li></ul></li><li>根据name获取bean（带类型转换）<ul><li><T> T getBean(String name,Class<T> requiredType)</T></T></li></ul></li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private ApplicationContext applicationContext;&#x2F;&#x2F;IOC容器对象</span><br><span class="line">@Test</span><br><span class="line">public void testGetBean()&#123;</span><br><span class="line">    &#x2F;&#x2F;根据bean的名称获取</span><br><span class="line">    DeptController cbean1&#x3D;(DeptController)applicationContext.getBean(&quot;deptController&quot;);</span><br><span class="line">    &#x2F;&#x2F;DeptMapper mbean1&#x3D;(DeptMapper)applicationContext.getBean(&quot;deptMapper&quot;);</span><br><span class="line"></span><br><span class="line">    System.out.println(cbean1);</span><br><span class="line">    &#x2F;&#x2F;System.out.println(mbean1);</span><br><span class="line">    &#x2F;&#x2F;根据bean的类型获取</span><br><span class="line">    DeptController cbean2 &#x3D; applicationContext.getBean(DeptController.class);</span><br><span class="line">    &#x2F;&#x2F;DeptMapper mbean2 &#x3D; applicationContext.getBean(DeptMapper.class);</span><br><span class="line">    System.out.println(cbean2);</span><br><span class="line">    &#x2F;&#x2F;System.out.println(mbean2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据bean的名称 及 类型获取</span><br><span class="line">    DeptController cbean3 &#x3D; applicationContext.getBean(&quot;deptController&quot;, DeptController.class);</span><br><span class="line">    &#x2F;&#x2F;DeptMapper mbean3 &#x3D; applicationContext.getBean(&quot;deptMapper&quot;, DeptMapper.class);</span><br><span class="line">    System.out.println(cbean3);</span><br><span class="line">    &#x2F;&#x2F;System.out.println(mbean3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h2><p>Spring支持五种作用域，后三种（不常用）在web环境才生效：</p><ol><li><strong>singleton</strong>（默认）：容器内同名称的bean只有一个实例（单例）（默认）</li><li><strong>prototype</strong>：每次使用该bean时会创建新的实例（非单例）</li><li>request</li><li>session</li><li>application</li></ol><p>可以通过@Scope注解来进行配置作用域。  </p><p>@Scope(“作用域”)  </p><p><strong>注</strong>：</p><ol><li>默认singleton的bean，在容器启动时被创建，可使用@Lazy注解来延迟初始化（延迟到第一次使用时）</li><li>prototype的bean，每一次使用该bean时都会创建一个新的实例。</li><li>实际开发中，绝大部分bean都是单例，无需配置scope属性</li></ol><h2 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h2><p>若要管理bean对象来自第三方（非自定义），是无法用@Component及衍生注解声明bean的，需用到@Bean。  </p><p>若要管理第三方的bean对象，建议对这些bean进行集中分类配置，可通过@Configuration注解声明一个配置类。  </p><p>通过@Bean注解的name或value属性可以声明bean的名称，若不指定，默认bean的名称就是方法名。  </p><p>若第三方bean需依赖其他bean对象，直接在bean定义方法中设置形参即可吗，容器会根据类型自动装配。  </p><p><strong>@Component及衍生注解与@Bean注解使用场景</strong>：</p><ul><li>项目中自定义的，使用@Component及其衍生注解</li><li>项目中引入第三方的，使用@Bean注解</li></ul><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CommonConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public SAXReader saxReader()&#123;</span><br><span class="line">        return new SAXReader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>SpringBoot的自动配置就是当spring容器启动后，一些配置类，bean对象就自动存入到IOC容器中，不需去手动声明，从而简化开发，省去繁琐的配置操作</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&#123;&quot;com.example&quot;,&quot;com.itheima&quot;&#125;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootWebConfig2Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>@Import导入，使用@Import导入的类会被Spring加载到IOC容器中，导入形式主要有以下几种：</p><ol><li>导入普通类</li><li>导入配置类</li><li>导入ImportSelector接口实现类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;@Import(&#123;HeaderParser.class&#125;)</span><br><span class="line">&#x2F;&#x2F;@Import(&#123;HeaderConfig.class&#125;)</span><br><span class="line">@Import(&#123;MyImportSelector.class&#125;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootWebConfig2Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>@EnableXxxx注解，封装@Import注解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@EnableHeaderConfig</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootWebConfig2Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>该注解由三个部分组成：</p><ul><li>@SpringBootConfiguration：该注解与@Configuration注解作用相同，用来声明当前也是一个配置类</li><li>@ComponentScan：组建扫描，默认扫描当前引导类所在包及其子包</li><li>@EnableAutoConfiguration：SpringBoot实现自动化配置的核心注解</li></ul><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到SpringIOC容器中。  </p><p>子注解：</p><ol><li>@ConditionalOnClass：判断环境中是否有对应字节码文件，才注册bean到IOC容器</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean（类型或名称），才注册bean到IOC容器</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器</li></ol><h2 id="更新中…"><a href="#更新中…" class="headerlink" title="更新中…"></a>更新中…</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP（七）</title>
      <link href="2023/07/27/jw7/"/>
      <url>2023/07/27/jw7/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP（七）"><a href="#AOP（七）" class="headerlink" title="AOP（七）"></a>AOP（七）</h1><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p><strong>事务</strong>是一组操作的集合，是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败</p><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p>该注解放于业务（service）层的方法上，类上，接口上。  </p><p><strong>作用</strong>：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法</span><br><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void deleteById(Integer id) &#123;</span><br><span class="line">    deptMapper.deleteById(id);</span><br><span class="line">    int i&#x3D;1&#x2F;0;</span><br><span class="line">    empMapper.deleteByDeptId(id);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">@Transactional</span><br><span class="line">public interface DeptService&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类</span><br><span class="line">@Transactional</span><br><span class="line">@Service</span><br><span class="line">public class DeptServiceImpl implements DeptService &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;application.yml</span><br><span class="line">#spring事务管理日志</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.jdbc.support.JdbcTransactionManager: debug</span><br></pre></td></tr></table></figure><h4 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h4><p>默认情况下，只有出现RuntimeException才会回滚日常。rollbackFor属性用于控制出现何种异常类型，回滚事务。  </p><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(rollbackFor &#x3D; Exception.class)</span><br><span class="line">@Override</span><br><span class="line">public void deleteById(Integer id) throws Exception&#123;</span><br><span class="line">    deptMapper.deleteById(id);</span><br><span class="line">    if(true)&#123;</span><br><span class="line">        throw new Exception(&quot;出现异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    empMapper.deleteByDeptId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h4><p><strong>事务传播行为</strong>：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。  </p><ul><li>REQUIRED：大部分情况下都是用该传播行为即可。</li><li>REQUIRED_NEW：当我们不希望事务之间相互影响时，可使用该传播行为。</li></ul><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><strong>AOP</strong>：Aspect Oriented Programming（面向切面编程，面向方面编程），其实就是面向特定方法编程。  </p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>在pom.xml中导入AOP的依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写AOP程序：针对特定方法根据业务需要进行编程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Aspect &#x2F;&#x2F;AOP类</span><br><span class="line">public class TimeAspect &#123;</span><br><span class="line">    @Around(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;) &#x2F;&#x2F;切入点表达式</span><br><span class="line">    public Object recordTime(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F;1. 记录开始时间</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2. 调用原始方法运行</span><br><span class="line">        Object result &#x3D; joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3. 记录结束时间, 计算方法执行耗时</span><br><span class="line">        long end &#x3D; System.currentTimeMillis();</span><br><span class="line">        log.info(joinPoint.getSignature()+&quot;方法执行耗时: &#123;&#125;ms&quot;, end-begin);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><strong>连接点</strong>：JointPoint，可以被AOP控制的方法（暗含方法执行时的相关信息@）  </p><p><strong>通知</strong>：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）  </p><p><strong>切入点</strong>：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用  </p><p><strong>切面</strong>：Apect，描述通知与切入点的对应关系（通知+切入点）  </p><p><strong>目标对象</strong>：Target，通知所应用的对象  </p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>进行AOP程序的开发，运行的不再是原始目标对象，而是基于目标对象所生成的代理对象。  </p><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ol><li>@Around：环绕通知。此注解标注的通知方法在目标方法前后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After：后置通知，此注解标注的通知方法在目标方法后被执行</li><li>@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行</li></ol><p><strong>注</strong>：</p><ul><li>@Around环绕通知需要自己调用proceedingJoinPoint.proceed()来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值</li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.aop;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class MyAspect1 &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line">    @Before(&quot;pt()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        log.info(&quot;before ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        log.info(&quot;around before ...&quot;);</span><br><span class="line">        Object result &#x3D; proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F;调用目标对象的原始方法执行</span><br><span class="line"></span><br><span class="line">        log.info(&quot;around after ...&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    @After(&quot;pt()&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        log.info(&quot;after ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterReturning(&quot;pt()&quot;)</span><br><span class="line">    public void afterReturning()&#123;</span><br><span class="line">        log.info(&quot;afterReturning ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterThrowing(&quot;pt()&quot;)</span><br><span class="line">    public void afterThrowing()&#123;</span><br><span class="line">        log.info(&quot;afterThrowing ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><ol><li>不同切面类中，默认按照切面类的类名字母排序<ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul></li><li>用@Order(数字)加在切面类上来控制顺序<ul><li>目标方法前的通知方法：数字小的先执行</li><li>目标方法后的通知方法：数字小的后执行</li></ul></li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>描述切入点方法的一种表达式，即<strong>切入点表达式</strong>。  </p><p><strong>作用</strong>：主要用来决定项目中的哪些需要加入通知  </p><p><strong>常见形式</strong>：</p><ol><li>execution(…)：根据方法的签名来匹配</li><li>@annotation(….)：根据注释匹配</li></ol><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><p><strong>语法</strong>:  </p><p>execution(访问修饰符?  返回值 包名.类名.?方法名(方法参数) throws 异常?)  </p><p>其中带?的表示可以省略的部分  </p><p><strong>通配符</strong></p><ul><li>*： 单个独立的任意符号，可以通配任意返回值，报名，类名，方法名，任意类型的一个参数，也可以通配包，类，方法名的一部分</li><li>..：多个连续的任意符号，可以通配任意层级的包，或任意类型，任意个数的参数</li></ul><p><strong>书写规范</strong>：</p><ul><li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配，如：查询类方法都是find开头，更新类方法都是update开头</li><li>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强扩展性</li><li>在满足业务需要的前提下，尽量缩小切入点的匹配范围，例如：报名匹配尽量不使用..，使用*匹配单个包</li></ul><h4 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h4><p>@annotation切入点表达式，用于匹配标识有特定注解的方法。  </p><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.aop;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface Mylog &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.itheima.aop;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class MyAspect1 &#123;</span><br><span class="line">    @Pointcut(&quot;@annotation(com.itheima.aop.Mylog)&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line">    @Before(&quot;pt()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        log.info(&quot;aspect1 ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line">import com.itheima.aop.Mylog;</span><br><span class="line">import com.itheima.mapper.DeptMapper;</span><br><span class="line">import com.itheima.pojo.Dept;</span><br><span class="line">import com.itheima.service.DeptService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class DeptServiceImpl implements DeptService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    @Mylog</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Dept&gt; list() &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList &#x3D; deptMapper.list();</span><br><span class="line">        return deptList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Mylog</span><br><span class="line">    @Override</span><br><span class="line">    public void delete(Integer id) &#123;</span><br><span class="line">        &#x2F;&#x2F;1. 删除部门</span><br><span class="line">        deptMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void save(Dept dept) &#123;</span><br><span class="line">        dept.setCreateTime(LocalDateTime.now());</span><br><span class="line">        dept.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        deptMapper.save(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Dept getById(Integer id) &#123;</span><br><span class="line">        return deptMapper.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(Dept dept) &#123;</span><br><span class="line">        dept.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        deptMapper.update(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，例如目标类名，方法名，方法参数等。  </p><ul><li>@Around：获取连接点信息只能使用ProceedingJoinPoint</li><li>对于其他四种通知，获取连接点信息只能用JoinPoint，它是ProceedingJoinPoint的父类型</li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.aop;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class MyAspect1 &#123;</span><br><span class="line">    @Pointcut(&quot;@annotation(com.itheima.aop.Mylog)&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object round(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        String name &#x3D; joinPoint.getTarget().getClass().getName();</span><br><span class="line">        log.info(&quot;目标对象的类名&#123;&#125;&quot;,name);</span><br><span class="line">        String methodName &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">        log.info(&quot;目标对象的方法名&#123;&#125;&quot;,methodName);</span><br><span class="line">        Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">        log.info(&quot;目标对象的参数&#123;&#125;&quot;, Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;放行目标方法执行</span><br><span class="line">        Object result &#x3D; joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        log.info(&quot;目标方法的返回值为：&#123;&#125;&quot;,result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;非Around注解中，方法参数用JoinPoint，获取目标对象各项属性的方法与ProceedingJoinPoint一致·</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录（六）</title>
      <link href="2023/07/26/jw6/"/>
      <url>2023/07/26/jw6/</url>
      
        <content type="html"><![CDATA[<h1 id="登录（六）"><a href="#登录（六）" class="headerlink" title="登录（六）"></a>登录（六）</h1><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p><strong>会话</strong>：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束，在一次会话中可以包含多次请求和响应。  </p><p><strong>会话跟踪</strong>：一种维护浏览器状态的方法，服务器需识别多次请求是否来自同一浏览器，以便在同一次会话的多次请求见共享数据。  </p><p><strong>会话跟踪方案</strong>：</p><ul><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li><li>令牌技术</li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><strong>优点</strong>：http协议中支持的技术。  </p><p><strong>缺点</strong>：</p><ul><li>移动端APP无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p><strong>优点</strong>：存储在服务器，安全。  </p><p><strong>缺点</strong>：</p><ul><li>服务器集群环境下无法直接使用Session</li><li>Cookie的缺点</li></ul><h3 id="令牌技术"><a href="#令牌技术" class="headerlink" title="令牌技术"></a>令牌技术</h3><p><strong>优点</strong>：</p><ul><li>支持PC，移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务器端存储压力</li></ul><p><strong>缺点</strong>：需自己实现</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><strong>JWT</strong>全程JSON Web Token。  </p><p>定义一组简洁的，自包含的格式，用于在通信双方以JSON数据格式安全的传递信息。由于数据签名的存在，这些信息是可靠的。  </p><p><strong>组成</strong>：</p><ol><li>Header（头），记录令牌类型，签名算法。</li><li>Payload（有效荷载）：携带一些自定义信息，默认信息等。</li><li>Signature（签名），防止Token被篡改，确保安全性，将header，payload，并加入指定秘钥，通过指定签名算法计算而来。</li></ol><p><strong>使用场景</strong>：登录认证</p><h3 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h3><ol><li>登录成功后，生成令牌。</li><li>后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</li></ol><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.9.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="生成和校验"><a href="#生成和校验" class="headerlink" title="生成和校验"></a>生成和校验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;生成</span><br><span class="line">@Test</span><br><span class="line">void jwtGenerate()&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">    map.put(&quot;a&quot;,1);</span><br><span class="line">    map.put(&quot;b&quot;,2);</span><br><span class="line">    String ljsblog &#x3D; Jwts.builder()</span><br><span class="line">            .setClaims(map)</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, &quot;ljsblog&quot;)</span><br><span class="line">            .setExpiration(new Date(System.currentTimeMillis()+1000*3600*12))</span><br><span class="line">            .compact();</span><br><span class="line">    System.out.println(ljsblog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;校验</span><br><span class="line">@Test</span><br><span class="line">void jwtCertify()&#123;</span><br><span class="line">    Claims ljsblog &#x3D; Jwts.parser()</span><br><span class="line">            .setSigningKey(&quot;ljsblog&quot;)</span><br><span class="line">            .parseClaimsJws(&quot;eyJhbGciOiJIUzI1NiJ9.eyJhIjoxLCJiIjoyLCJleHAiOjE2ODQzNTc4NzV9.jr-x-QlFpVgt44kc-8Mfyduzd_m10jb7pwhyxPtYfwQ&quot;)</span><br><span class="line">            .getBody();</span><br><span class="line">    System.out.println(ljsblog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥配套</li><li>若JWT令牌解析校验时报错，则说明JWT令牌被纂改或失效，令牌非法</li></ol><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p><strong>Filter过滤器</strong>：是Javaweb三大组件（Servlet,Filter,Listener）之一。  </p><p>过滤器可把资源的请求拦截下来，从而实现一些特殊功能。  </p><p>过滤器一般完成一些通用操作，比如：登录校验，统一编码处理，敏感字符处理等。  </p><h3 id="Filter快速入门"><a href="#Filter快速入门" class="headerlink" title="Filter快速入门"></a>Filter快速入门</h3><ol><li>定义Filter<ul><li>定义一个类，实现Filter接口，并重写其所有方法</li></ul></li><li>配置Filter<ul><li>Filter类加@WebFilter注解，配置拦截资源的路径，引导类加上@ServletComponentScan开启Servlet组建支持。</li></ul></li></ol><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.file;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">@WebFilter(urlPatterns &#x3D; &quot;&#x2F;*&quot;)</span><br><span class="line">public class DemoFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        Filter.super.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        Filter.super.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.ljsblog;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class TliasWebManagmentApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(TliasWebManagmentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter拦截路径"><a href="#Filter拦截路径" class="headerlink" title="Filter拦截路径"></a>Filter拦截路径</h3><ul><li>拦截具体路径<ul><li>urlPatterns值：/路径名</li><li>只有访问/路径名时，才会被拦截</li></ul></li><li>目录拦截<ul><li>urlPatterns值：/路径名/*</li><li>访问/路径名下的所有资源，都会被拦截</li></ul></li><li>拦截所有<ul><li>urlPatterns值：/*</li><li>访问所有资源，都会被拦截</li></ul></li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol><li>请求</li><li>放行前逻辑</li><li>放行</li><li>资源</li><li>放行后逻辑</li></ol><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>一个web应用中，配置多个过滤器，就形成一个过滤器链  </p><p><strong>顺序</strong>：注解配置的Filter，优先级是按照过滤器类名（字符串）的自然排序</p><h3 id="登录校验filter"><a href="#登录校验filter" class="headerlink" title="登录校验filter"></a>登录校验filter</h3><p><strong>注</strong>：</p><ol><li>除了登录请求，其余请求拦截到都需要校验令牌</li><li>拦截到请求后，有令牌且令牌校验通过（合法）才可以放行，否则都会返回登录错误结果</li></ol><p><strong>流程</strong>：</p><ol><li>获取请求url</li><li>判断请求url中是否包含login，若包含，说明是登录操作，放行。 </li><li>获取请求头中的令牌（token）</li><li>判断令牌时否存在，若不存在，返回错误结果（未登录）</li><li>解析token，若解析失败，返回错误结果（未登录）</li><li>放行</li></ol><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><strong>拦截器</strong>是一种动态拦截方法调用的机制，类似于过滤器，Spring框架中提供的，用来动态拦截控制器方法的执行，可用来拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。  </p><h3 id="Interceptor快速入门"><a href="#Interceptor快速入门" class="headerlink" title="Interceptor快速入门"></a>Interceptor快速入门</h3><ol><li>定义拦截器，实现HandlerInterceptor接口，并重写其所有方法</li><li>注册拦截器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class CheckInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;preHandle&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;postHandle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;afterCompletion&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebConfig implements WebMvcConfigurer&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CheckInterceptor checkInterceptor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(checkInterceptor).addPathPatterns(&quot;&#x2F;**&quot;).excludePathPatterns(&quot;&#x2F;login&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h3><p>addPathPatterns：需要拦截的资源。  </p><p>excludePathPatterns：不需要拦截的资源。  </p><ul><li>拦截路径：/*<ul><li>一级路径</li></ul></li><li>拦截路径：/**<ul><li>任意级路径</li></ul></li><li>拦截路径：/路径名/*<ul><li>/路径名 下的一级路径</li></ul></li><li>拦截路径：/路径名/**<ul><li>/路径名 下的任意级路径</li></ul></li></ul><h2 id="Filter和Interceptor的区别"><a href="#Filter和Interceptor的区别" class="headerlink" title="Filter和Interceptor的区别"></a>Filter和Interceptor的区别</h2><ul><li>接口规范不同<ul><li>过滤器需要实现Filter接口</li><li>拦截器需要实现HandlerInterceptor接口</li></ul></li><li>拦截范围不同<ul><li>过滤器会拦截所有资源</li><li>拦截器只拦截Spring环境中的资源</li></ul></li></ul><h2 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line">    @ExceptionHandler(Exception.class)</span><br><span class="line">    public Result ex(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        return Result.error(&quot;操作失败，请联系管理员&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（五）</title>
      <link href="2023/05/11/jw5/"/>
      <url>2023/05/11/jw5/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis（五）"><a href="#Mybatis（五）" class="headerlink" title="Mybatis（五）"></a>Mybatis（五）</h1><p>Mybatis是一款优秀的持久层框架，用于简化JDBC的开发。</p><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;mapper包下</span><br><span class="line">package com.ljsblog.mapper;</span><br><span class="line"></span><br><span class="line">import com.ljsblog.pojo.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    @Select(&quot;select * from user&quot;)</span><br><span class="line">    public List&lt;User&gt; userList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;pojo包下</span><br><span class="line">package com.ljsblog.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private short age;</span><br><span class="line">    private short gender;</span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(Integer id, String name, short age, short gender, String phone) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">        this.phone &#x3D; phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public short getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(short age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return gender</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public short getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param gender</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setGender(short gender) &#123;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return phone</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getPhone() &#123;</span><br><span class="line">        return phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param phone</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setPhone(String phone) &#123;</span><br><span class="line">        this.phone &#x3D; phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;id &#x3D; &quot; + id + &quot;, name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;, gender &#x3D; &quot; + gender + &quot;, phone &#x3D; &quot; + phone + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;application.properties</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;root</span><br><span class="line"></span><br><span class="line">package com.ljsblog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test&#x2F;java&#x2F;com.ljsblog</span><br><span class="line">import com.ljsblog.mapper.UserMapper;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringbootmybatisApplicationTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    @Test</span><br><span class="line">    public void userList()&#123;</span><br><span class="line">        userMapper.userList().stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p><strong>JDBC</strong>：Java DataBase Connectivity，就是使用java语言操作关系型数据库的一套API。  </p><p>sun公司官方定义一套操作所有关系型数据库的规范，即接口，各个数据库厂商（Mysql，Oracle等）去实现该接口，提供数据库驱动jar包，我们可用该接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。  </p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><strong>数据库连接池</strong>是个容器，负责分配，管理数据库连接（Connection）  </p><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。  </p><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏。  </p><p><strong>优势</strong>：</p><ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏。</li></ul><p><strong>现常用数据库连接池产品</strong></p><ul><li>Druid</li><li>Hikari（Springboot默认）</li></ul><p>若使用Druid需引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="lombok工具包"><a href="#lombok工具包" class="headerlink" title="lombok工具包"></a>lombok工具包</h2><p>Lombok是一个实用的java类库，能通过注解的形式自动生成构造器，getter/setter，equals，hashcode，toString等方法，并可以自动化生成日志变量，简化Java开发，提高效率。  </p><p><strong>需引入依赖</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>注解</strong>：</p><ul><li>@Getter/@Setter<ul><li>为所有属性提供get/set方法</li></ul></li><li>@ToString<ul><li>会给类自动生成易阅读的toString方法</li></ul></li><li>@EqualsAndHashCode<ul><li>根据类所拥有的非静态字段自动重写equals方法和hashCode方法</li></ul></li><li>@Data<ul><li>提供更综合的生成代码功能，相当于@Getter+@Setter+@ToString+@EqualsAndHashCode</li></ul></li><li>@NoArgsConstructor<ul><li>为实体类生成无参的构造器方法</li></ul></li><li>@AllArgsConstructor<ul><li>为实体类生成除了static修饰的字段之外带有各个参数的构造器方法</li></ul></li></ul><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private short age;</span><br><span class="line">    private short gender;</span><br><span class="line">    private String phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mybatis基础操作"><a href="#Mybatis基础操作" class="headerlink" title="Mybatis基础操作"></a>Mybatis基础操作</h2><h3 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h3><ul><li>#{…}<ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li>${…}<ul><li>拼接SQL，直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：若对表名，列表进行动态设置时使用</li></ul></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Mapper</span><br><span class="line">package com.ljsblog.mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Delete;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">@Mapper</span><br><span class="line">public interface EmpMapper &#123;</span><br><span class="line">    @Delete(&quot;delete from emp where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">    public void delete(Integer id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test</span><br><span class="line">    @Test</span><br><span class="line">    public void delete()&#123;</span><br><span class="line">        empMapper.delete(17);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：若mapper接口方法形参只有一个普通类型的参数，#{…}里面的属性名可以随便写。  </p><p><strong>日志输出</strong>：  </p><p>可在application.properties中，打开mybatis的日志，并指定输出到控制台。  </p><p>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</p><h3 id="添加（新增）"><a href="#添加（新增）" class="headerlink" title="添加（新增）"></a>添加（新增）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +&quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,&#123;updateTime&#125;)&quot;)</span><br><span class="line">public void insert(Emp emp);</span><br><span class="line">    </span><br><span class="line">@Test</span><br><span class="line">public void insert()&#123;</span><br><span class="line">Emp emp&#x3D;new Emp();</span><br><span class="line">    emp.setUsername(&quot;Jerry&quot;);</span><br><span class="line">    emp.setName(&quot;杰瑞&quot;);</span><br><span class="line">    emp.setGender((short)1);</span><br><span class="line">    emp.setImage(&quot;1.jpg&quot;);</span><br><span class="line">    emp.setJob((short)1);</span><br><span class="line">    emp.setEntrydate(LocalDate.of(2000,1,1));</span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    emp.setDeptId(1);</span><br><span class="line">    empMapper.insert(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Options(useGeneratedKeys &#x3D; true,keyProperty &#x3D; &quot;id&quot;)&#x2F;&#x2F;获取返回的主键，并将其存入emp的id变量中</span><br><span class="line">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +</span><br><span class="line">        &quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br><span class="line">public void insert(Emp emp);</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void insert()&#123;</span><br><span class="line">    Emp emp&#x3D;new Emp();</span><br><span class="line">    emp.setUsername(&quot;Tom&quot;);</span><br><span class="line">    emp.setName(&quot;汤姆&quot;);</span><br><span class="line">    emp.setGender((short)1);</span><br><span class="line">    emp.setImage(&quot;1.jpg&quot;);</span><br><span class="line">    emp.setJob((short)1);</span><br><span class="line">    emp.setEntrydate(LocalDate.of(2000,1,1));</span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    emp.setDeptId(1);</span><br><span class="line">    empMapper.insert(emp);</span><br><span class="line">    System.out.println(emp.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Update(&quot;update emp set username&#x3D;#&#123;username&#125;,name&#x3D;#&#123;name&#125;,gender&#x3D;#&#123;gender&#125;,image&#x3D;#&#123;image&#125;,job&#x3D;#&#123;job&#125;,entrydate&#x3D;#&#123;entrydate&#125;,dept_id&#x3D;#&#123;deptId&#125;,update_time&#x3D;#&#123;updateTime&#125; where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">public void update(Emp emp);</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void update()&#123;</span><br><span class="line">Emp emp&#x3D;new Emp();</span><br><span class="line">    emp.setId(21);</span><br><span class="line">    emp.setUsername(&quot;Tom1&quot;);</span><br><span class="line">    emp.setName(&quot;汤姆1&quot;);</span><br><span class="line">    emp.setGender((short)2);</span><br><span class="line">    emp.setImage(&quot;2.jpg&quot;);</span><br><span class="line">    emp.setJob((short)2);</span><br><span class="line">    emp.setEntrydate(LocalDate.of(2001,1,1));</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    emp.setDeptId(2);</span><br><span class="line">    empMapper.update(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="根据id查询"><a href="#根据id查询" class="headerlink" title="根据id查询"></a>根据id查询</h4><p><strong>数据封装</strong>：</p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装</li><li>若实体类属性名和数据库表查询返回的字段名不一致，不能自动封装</li></ul><p><strong>开启驼峰命名</strong>：若字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射，例如dept_id会变成deptId。  </p><p>开启驼峰命名需在application.properties文件里加入以下代码：  </p><p>mybatis.configuration.map-underscore-to-camel-case=true。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from emp where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">public Emp select(int id);</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void select()&#123;</span><br><span class="line">System.out.println(empMapper.select(21));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case&#x3D;true。  </span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;sql，concat,拼接字符串</span><br><span class="line">@Select(&quot;select * from emp where name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;) and gender&#x3D;#&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc&quot;)</span><br><span class="line">public List&lt;Emp&gt; select1(String name, Short gender, LocalDate begin, LocalDate end);</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void select1()&#123;</span><br><span class="line">    System.out.println(empMapper.select1(&quot;张&quot;,(short)1,LocalDate.of(2010,1,1),LocalDate.of(2020,1,1)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h3><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><ul><li>XML映射文件的名称和Mapper接口名称一致，并且将XML映射文件和Mapper放在相同名称的包下（同包同名）。</li><li>XML映射文件的namespace属性与Mapper接口全限定名一致</li><li>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型的一致。</li></ul><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Emp&gt; select2(String name, Short gender, LocalDate begin, LocalDate end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--以上为固定，从https:&#x2F;&#x2F;mybatis.net.cn&#x2F;getting-started.html复制--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ljsblog.mapper.EmpMapper&quot;&gt;</span><br><span class="line">&lt;!--    resultType指单条记录所封装的类型--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;select2&quot; resultType&#x3D;&quot;com.ljsblog.pojo.Emp&quot;&gt;</span><br><span class="line">        select * from emp where name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;) and gender&#x3D;#&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="注解方式和XML方式"><a href="#注解方式和XML方式" class="headerlink" title="注解方式和XML方式"></a>注解方式和XML方式</h3><ul><li><p>若执行简单的增删改查功能，使用注解。</p></li><li><p>若执行复杂的SQL功能，使用XML。</p></li></ul><h3 id="Mybatis动态sql"><a href="#Mybatis动态sql" class="headerlink" title="Mybatis动态sql"></a>Mybatis动态sql</h3><p>随着用户的输入或外部条件的变化而变化的语句，称为<strong>动态sql</strong>。  </p><p><strong>标签</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;if&gt;用于判断条件是否成立，使用test属性进行条件判断，若条件为true，则拼接SQL</span><br><span class="line">&lt;where&gt;where元素只会在子元素有内容的情况才能插入where子句，而且会自动去除子句开头的AND或OR</span><br><span class="line">&lt;set&gt;动地在行首插入set关键字，并会删掉额外的逗号，用在update语句中</span><br><span class="line">&lt;foreach&gt;遍历，属性：</span><br><span class="line">collection:集合名称</span><br><span class="line">item:结合遍历出来的元素&#x2F;项</span><br><span class="line">separator:每次遍历使用的分隔符</span><br><span class="line">open:遍历开始前拼接的片段</span><br><span class="line">close:遍历结束后拼接的片段</span><br><span class="line">&lt;sql&gt;定义可重用的SQL片段，属性值id</span><br><span class="line">&lt;include&gt;通过属性refid，指定包含的sql片段</span><br></pre></td></tr></table></figure><p><strong>范例1</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Emp&gt; select2(String name, Short gender, LocalDate begin, LocalDate end);</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--以上为固定，从https:&#x2F;&#x2F;mybatis.net.cn&#x2F;getting-started.html复制--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ljsblog.mapper.EmpMapper&quot;&gt;</span><br><span class="line">&lt;!--resultType指单条记录所封装的类型--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;select2&quot; resultType&#x3D;&quot;com.ljsblog.pojo.Emp&quot;&gt;</span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D;null&quot;&gt;</span><br><span class="line">                name like concat(&#39;%&#39;, #&#123;name&#125;, &#39;%&#39;)</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;gender!&#x3D;null&quot;&gt;</span><br><span class="line">                and gender &#x3D; #&#123;gender&#125;</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;begin!&#x3D;null and end!&#x3D;null&quot;&gt;</span><br><span class="line">                and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;where&gt;</span><br><span class="line">        order by update_time desc</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void select2()&#123;</span><br><span class="line">System.out.println(empMapper.select2(&quot;张&quot;,null,null,null));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public void update1(Emp emp);</span><br><span class="line"></span><br><span class="line">    &lt;update id&#x3D;&quot;update1&quot;&gt;</span><br><span class="line">        update emp</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;username!&#x3D;null&quot;&gt;</span><br><span class="line">            username&#x3D;#&#123;username&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;name!&#x3D;null&quot;&gt;</span><br><span class="line">            name&#x3D;#&#123;name&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;gender!&#x3D;null&quot;&gt;</span><br><span class="line">            gender&#x3D;#&#123;gender&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;image!&#x3D;null&quot;&gt;</span><br><span class="line">            image&#x3D;#&#123;image&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;job!&#x3D;null&quot;&gt;</span><br><span class="line">            job&#x3D;#&#123;job&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;entrydate!&#x3D;null&quot;&gt;</span><br><span class="line">            entrydate&#x3D;#&#123;entrydate&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;deptId!&#x3D;null&quot;&gt;</span><br><span class="line">            dept_id&#x3D;#&#123;deptId&#125;,</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;updateTime!&#x3D;null&quot;&gt;</span><br><span class="line">            update_time&#x3D;#&#123;updateTime&#125;</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">        where id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">    </span><br><span class="line">     @Test</span><br><span class="line">    public void update1()&#123;</span><br><span class="line">        Emp emp&#x3D;new Emp();</span><br><span class="line">        emp.setId(21);</span><br><span class="line">        emp.setUsername(&quot;Tom5&quot;);</span><br><span class="line">        emp.setName(&quot;汤姆5&quot;);</span><br><span class="line">        emp.setGender((short)3);</span><br><span class="line">        emp.setDeptId(1);</span><br><span class="line">        empMapper.update1(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>范例3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void delete1(List&lt;Integer&gt; ids);</span><br><span class="line"></span><br><span class="line">&lt;delete id&#x3D;&quot;delete1&quot;&gt;</span><br><span class="line">    delete from emp where id in</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;ids&quot; item&#x3D;&quot;id&quot; separator&#x3D;&quot;,&quot; open&#x3D;&quot;(&quot; close&#x3D;&quot;)&quot;&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void delete1()&#123;</span><br><span class="line">    List&lt;Integer&gt; ids&#x3D; Arrays.asList(10,11);</span><br><span class="line">    empMapper.delete1(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Emp&gt; selectAll();</span><br><span class="line"></span><br><span class="line">&lt;sql id&#x3D;&quot;all&quot;&gt;select，id,username,password,name,gender,image,job,entrydate,dept_id,create_time,update_time&lt;&#x2F;sql&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;selectAll&quot; resultType&#x3D;&quot;com.ljsblog.pojo.Emp&quot;&gt;</span><br><span class="line">&lt;include refid&#x3D;&quot;all&quot;&#x2F;&gt; from emp</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void allSelect()&#123;</span><br><span class="line">List&lt;Emp&gt; empList&#x3D;empMapper.selectAll();</span><br><span class="line">    System.out.println(empList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求响应和分层解耦（四）</title>
      <link href="2023/05/10/jw4/"/>
      <url>2023/05/10/jw4/</url>
      
        <content type="html"><![CDATA[<h1 id="请求响应和分层解耦（四）"><a href="#请求响应和分层解耦（四）" class="headerlink" title="请求响应和分层解耦（四）"></a>请求响应和分层解耦（四）</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><ol><li>原始方式获取请求参数</li><li>SpringBoot中接收简单参数</li><li>@RequestParam注解</li></ol><h4 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h4><p>Controller方法形参中声明HttpServletRequest对象，调用对象的getParameter(参数名)  </p><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目内位置src&#x2F;main&#x2F;java&#x2F;com.ljsblog&#x2F;controller&#x2F;RequestController.java</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public String test(HttpServletRequest request)&#123;</span><br><span class="line">        String name&#x3D;request.getParameter(&quot;name&quot;);</span><br><span class="line">        String pass&#x3D;request.getParameter(&quot;pass&quot;);</span><br><span class="line">        System.out.println(name+&quot;:&quot;+pass);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Springboot方式"><a href="#Springboot方式" class="headerlink" title="Springboot方式"></a>Springboot方式</h4><p>请求参数名与方法形参变量名相同，会自动进行类型转换。  </p><p><strong>范例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目内位置src&#x2F;main&#x2F;java&#x2F;com.ljsblog&#x2F;controller&#x2F;RequestController.java</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public String test(String name,Integer pass)&#123;</span><br><span class="line">        System.out.println(name+&quot;:&quot;+pass);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="@RequestParam注解"></a>@RequestParam注解</h4><p>方法形参名称与请求参数名称不匹配，通过该注解完成映射，该注解的require属性值默认是true，代表请求参数必须传递。  </p><p><strong>范例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">&#x2F;&#x2F;postman里设置的参数名为username,password</span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public String test(@RequestParam(name &#x3D; &quot;username&quot;) String name, @RequestParam(name&#x3D;&quot;password&quot;) Integer pass)&#123;</span><br><span class="line">        System.out.println(name+&quot;:&quot;+pass);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><h4 id="简单实体对象"><a href="#简单实体对象" class="headerlink" title="简单实体对象"></a>简单实体对象</h4><p><strong>简单实体对象</strong>：请求参数名与形参对象属性名相同，定义POJO接收即可。  </p><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;User.java</span><br><span class="line">package com.ljsblog.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;RequestController.java</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line"></span><br><span class="line">import com.ljsblog.pojo.User;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;pojotest&quot;)</span><br><span class="line">    public String test(User user)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman里的数据为</span><br><span class="line">&#x2F;&#x2F;name</span><br><span class="line">&#x2F;&#x2F;age</span><br></pre></td></tr></table></figure><h4 id="复杂实体对象"><a href="#复杂实体对象" class="headerlink" title="复杂实体对象"></a>复杂实体对象</h4><p><strong>复杂实体对象</strong>：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。  </p><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;User.java</span><br><span class="line">package com.ljsblog.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Address address;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Address getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(Address address) &#123;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, address&#x3D;&quot; + address +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Address.java</span><br><span class="line">package com.ljsblog.pojo;</span><br><span class="line"></span><br><span class="line">public class Address &#123;</span><br><span class="line">    private String province;</span><br><span class="line">    private String city;</span><br><span class="line"></span><br><span class="line">    public String getProvince() &#123;</span><br><span class="line">        return province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProvince(String province) &#123;</span><br><span class="line">        this.province &#x3D; province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCity(String city) &#123;</span><br><span class="line">        this.city &#x3D; city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Address&#123;&quot; +</span><br><span class="line">                &quot;province&#x3D;&#39;&quot; + province + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, city&#x3D;&#39;&quot; + city + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;RequestController.java</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line"></span><br><span class="line">import com.ljsblog.pojo.User;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;pojotest&quot;)</span><br><span class="line">    public String test(User user)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman里的数据为</span><br><span class="line">&#x2F;&#x2F;name</span><br><span class="line">&#x2F;&#x2F;age</span><br><span class="line">&#x2F;&#x2F;address.province</span><br><span class="line">&#x2F;&#x2F;address.city</span><br></pre></td></tr></table></figure><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><p><strong>数组参数</strong>：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参可接收参数。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;arrTest&quot;)</span><br><span class="line">    public String arrTest(String[] arr)&#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman参数</span><br><span class="line">&#x2F;&#x2F;arr</span><br><span class="line">&#x2F;&#x2F;arr</span><br><span class="line">&#x2F;&#x2F;arr</span><br></pre></td></tr></table></figure><h3 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h3><p><strong>集合参数</strong>：请求参数名与形参集合名称相同且请求参数为多个，@RequestParam绑定参数关系，若不用该注解，数据默认封装到数组。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;listTest&quot;)</span><br><span class="line">    public String listTest(@RequestParam ArrayList&lt;String&gt; list)&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman参数</span><br><span class="line">&#x2F;&#x2F;list</span><br><span class="line">&#x2F;&#x2F;list</span><br><span class="line">&#x2F;&#x2F;list</span><br></pre></td></tr></table></figure><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><p>使用@DateTimeFormat注解完成日期参数格式转换。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;datetimeTest&quot;)</span><br><span class="line">public String dateTimeTest(@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)LocalDateTime dateTime)&#123;</span><br><span class="line">System.out.println(dateTime);</span><br><span class="line">    return &quot;ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman参数</span><br><span class="line">&#x2F;&#x2F;dateTime  2019-11-30 12:06:54</span><br></pre></td></tr></table></figure><h3 id="JSON参数"><a href="#JSON参数" class="headerlink" title="JSON参数"></a>JSON参数</h3><p>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需使用@RequestBody标识。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;jsonTest&quot;)</span><br><span class="line">public String jsonTest(@RequestBody User user)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    return &quot;ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman参数</span><br><span class="line">&#x2F;&#x2F;选择post方式，因为Json存放在存储体中</span><br><span class="line">&#x2F;&#x2F;数据类型选择postman</span><br><span class="line">&#x2F;*</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;zhangsan&quot;,</span><br><span class="line">    &quot;age&quot;:18,</span><br><span class="line">    &quot;address&quot;:&#123;</span><br><span class="line">        &quot;province&quot;:&quot;河北&quot;,</span><br><span class="line">        &quot;city&quot;:&quot;廊坊&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>通过请求URL直接传递参数，使用{…}来标识该路径参数，需使用@PathVariable获取路径参数。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;pathTest&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">public String pathTest(@PathVariable Integer id)&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    return &quot;ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(&quot;&#x2F;pathTest&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&quot;)</span><br><span class="line">public String pathTest(@PathVariable Integer id,@PathVariable String name)&#123;</span><br><span class="line">    System.out.println(id+&quot;：&quot;+name);</span><br><span class="line">    return &quot;ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;postman的url</span><br><span class="line">&#x2F;&#x2F;单http:&#x2F;&#x2F;localhost:8080&#x2F;pathTest&#x2F;5</span><br><span class="line">&#x2F;&#x2F;多http:&#x2F;&#x2F;localhost:8080&#x2F;pathTest&#x2F;3&#x2F;zhangsan</span><br></pre></td></tr></table></figure><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="Responsebody"><a href="#Responsebody" class="headerlink" title="@Responsebody"></a>@Responsebody</h3><p><strong>类型</strong>：方法注解，类注解  </p><p><strong>位置</strong>：Controller方法/类上  </p><p><strong>作用</strong>：将方法返回值直接响应，若返回值类型是实体对象/集合，将会转换成JSON格式响应。  </p><p><strong>说明</strong>：@RestController=@Controller+@ResponseBody  </p><h3 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>Result(code,msg,data)  </p><h2 id="分层耦合"><a href="#分层耦合" class="headerlink" title="分层耦合"></a>分层耦合</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li>service：业务逻辑层，处理具体的业务逻辑</li><li>dao：数据访问层（Data Access Object）（持久层），负责数据的访问操作，包括数据的增删改查</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;controller</span><br><span class="line">&#x2F;&#x2F;EmpController</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.pojo.Result;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import com.ljsblog.service.impl.EmpServiceA;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.List;</span><br><span class="line">@RestController</span><br><span class="line">public class EmpController &#123;</span><br><span class="line">    private EmpService empService&#x3D;new EmpServiceA();</span><br><span class="line">    @RequestMapping(&quot;&#x2F;listEmp&quot;)</span><br><span class="line">    public Result list()&#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empService.empList();</span><br><span class="line">        return Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;service</span><br><span class="line">package com.ljsblog.service.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.dao.impl.EmpDaoA;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class EmpServiceA implements EmpService &#123;</span><br><span class="line">    private EmpDao empDao&#x3D;new EmpDaoA();</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; empList() &#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empDao.listEmp();</span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            String gender&#x3D;emp.getGender();</span><br><span class="line">            if(gender.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setGender(&quot;男&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                emp.setGender(&quot;女&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            String job&#x3D;emp.getJob();</span><br><span class="line">            if(job.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;讲师&quot;);</span><br><span class="line">            &#125;else if(job.equals(&quot;2&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;班主任&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                emp.setJob(&quot;就业指导&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.ljsblog.service;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpService &#123;</span><br><span class="line">    public List&lt;Emp&gt; empList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;dao</span><br><span class="line">package com.ljsblog.dao.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.utils.XmlParserUtils;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">public class EmpDaoA implements EmpDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; listEmp() &#123;</span><br><span class="line">        String file&#x3D;this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D; XmlParserUtils.parse(file,Emp.class);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.ljsblog.dao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpDao &#123;</span><br><span class="line">    public List&lt;Emp&gt; listEmp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><p><strong>内聚</strong>：软件各个功能模块内部的功能联系。  </p><p><strong>耦合</strong>：衡量软件中各个层/模块之间的依赖，关联的程度。  </p><p><strong>软件设计原则</strong>：高内聚低耦合。  </p><p><strong>控制反转</strong>：Inversion Of Control，简称IOC，对象的创建控制权由程序自身转移到外部（容器），这种思想成为控制反转。  </p><p><strong>依赖注入</strong>：Dependency Injection，简称DI，容器为应用程序提供运行时所依赖的资源，称之为依赖注入。  </p><p><strong>Bean对象</strong>：IOC容器中创建，管理的对象，称之为bean。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;controller</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.pojo.Result;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.List;</span><br><span class="line">@RestController</span><br><span class="line">public class EmpController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpService empService;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;listEmp&quot;)</span><br><span class="line">    public Result list()&#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empService.empList();</span><br><span class="line">        return Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;dao</span><br><span class="line">package com.ljsblog.dao.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.utils.XmlParserUtils;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Component</span><br><span class="line">public class EmpDaoA implements EmpDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; listEmp() &#123;</span><br><span class="line">        String file&#x3D;this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D; XmlParserUtils.parse(file,Emp.class);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.ljsblog.dao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpDao &#123;</span><br><span class="line">    public List&lt;Emp&gt; listEmp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;service</span><br><span class="line">package com.ljsblog.service.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Component</span><br><span class="line">public class EmpServiceA implements EmpService &#123;</span><br><span class="line">    @Autowired&#x2F;&#x2F;依赖注入</span><br><span class="line">    private EmpDao empDao;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; empList() &#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empDao.listEmp();</span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            String gender&#x3D;emp.getGender();</span><br><span class="line">            if(gender.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setGender(&quot;男&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                emp.setGender(&quot;女&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            String job&#x3D;emp.getJob();</span><br><span class="line">            if(job.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;讲师&quot;);</span><br><span class="line">            &#125;else if(job.equals(&quot;2&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;班主任&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                emp.setJob(&quot;就业指导&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.ljsblog.service;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpService &#123;</span><br><span class="line">    public List&lt;Emp&gt; empList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p><strong>Bean的声明</strong>：若要将某个对象交给IOC容器管理，需在对应的类上加上如下注解之一：  </p><ul><li><strong>@Component</strong>：声明bean的基础注解，不属于以下三类时，用此注解<ul><li><strong>@Controller</strong>：@Component的衍生注解，标注在控制器类上，（@RestController包括@Controller）</li><li><strong>@Service</strong>：@Component的衍生注解，标注在业务类上</li><li><strong>@Repository</strong>：@Component的衍生注解，标注在数据访问类上（由于与mybatis整合，用得少）</li></ul></li></ul><p><strong>注意事项</strong>：</p><ul><li>声明bean的时候，可通过value属性指定bean的名字，若未指定，默认为类名首字母小写。  </li><li>使用以上四个注解都可以声明bean，但在springboot集成web开发中，声明控制器bean只能用@Controller</li></ul><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;controller</span><br><span class="line">package com.ljsblog.controller;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.pojo.Result;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.List;</span><br><span class="line">@RestController</span><br><span class="line">public class EmpController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpService empService;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;listEmp&quot;)</span><br><span class="line">    public Result list()&#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empService.empList();</span><br><span class="line">        return Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;dao</span><br><span class="line">package com.ljsblog.dao.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.utils.XmlParserUtils;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Repository</span><br><span class="line">public class EmpDaoA implements EmpDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; listEmp() &#123;</span><br><span class="line">        String file&#x3D;this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D; XmlParserUtils.parse(file,Emp.class);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.ljsblog.dao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpDao &#123;</span><br><span class="line">    public List&lt;Emp&gt; listEmp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Service</span><br><span class="line">package com.ljsblog.service.impl;</span><br><span class="line">import com.ljsblog.dao.EmpDao;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import com.ljsblog.service.EmpService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Service</span><br><span class="line">public class EmpServiceA implements EmpService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpDao empDao;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; empList() &#123;</span><br><span class="line">        List&lt;Emp&gt; empList&#x3D;empDao.listEmp();</span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            String gender&#x3D;emp.getGender();</span><br><span class="line">            if(gender.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setGender(&quot;男&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                emp.setGender(&quot;女&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            String job&#x3D;emp.getJob();</span><br><span class="line">            if(job.equals(&quot;1&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;讲师&quot;);</span><br><span class="line">            &#125;else if(job.equals(&quot;2&quot;))&#123;</span><br><span class="line">                emp.setJob(&quot;班主任&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                emp.setJob(&quot;就业指导&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.ljsblog.service;</span><br><span class="line">import com.ljsblog.pojo.Emp;</span><br><span class="line">import java.util.List;</span><br><span class="line">public interface EmpService &#123;</span><br><span class="line">    public List&lt;Emp&gt; empList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bean组建扫描</strong>：前面声明bean的四大注解，想要生效，需被组建扫描注解@ComponentScan扫描。  </p><p>@ComponentScan注解虽然没有显式配置，却已包含在启动类声明注解@SpringBootApplication中，默认扫描的范围是启动类所在包及其子包。  </p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p><strong>依赖注入的注解</strong>：</p><ul><li>@Autowired：默认按照类型自动装配</li><li>若同类型的bean存在多个<ul><li>@Primary</li><li>@Autowired+@Qualifier(“bean的名称，bean默认是类的首字母小写”)</li><li>@Resource(name=”bean的名称”)</li></ul></li></ul><p><strong>@Resource和@Autowired的区别</strong>：</p><ol><li>@Autowired是spring框架提供的注释，@Resource是JDK提供的注解</li><li>@Autowired默认是按照类型注入，而@Resource默认是按照名称注入。  </li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven和Web入门(三)</title>
      <link href="2023/05/09/jw3/"/>
      <url>2023/05/09/jw3/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven和Web入门-三"><a href="#Maven和Web入门-三" class="headerlink" title="Maven和Web入门(三)"></a>Maven和Web入门(三)</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Apache Maven是apache旗下的一个开源项目，是一个（特别是Java编程）项目管理及自动构建工具，它基于项目对象模型（POM,project object model）的概念，通过一小段描述信息来管理项目的构建。  </p><p><strong>官方网站</strong>：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li><strong>方便的依赖管理</strong>：方便快捷的管理项目依赖的资源(jar包),避免版本冲突问题</li><li><strong>统一的项目结构</strong>：提供标准，统一的项目结构</li><li><strong>标准的项目构建</strong>：标准跨平台(Linux,Windows,MacOS)的自动化项目构建方式</li></ol><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p><strong>仓库</strong>：用于存储资源，管理各种jar包。  </p><ul><li><strong>本地仓库</strong>：自己计算机上的一个目录</li><li><strong>中央仓库</strong>：由maven团队维护的全球唯一的。<ul><li>仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li></ul></li><li><strong>远程仓库（私服）</strong>：一般由公司团队搭建的私有仓库。  </li></ul><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>Maven中坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。  </p><p>使用坐标来定义项目或引入项目中需要的依赖。  </p><p>Maven坐标的主要组成：</p><ul><li><p>groupId:定义当前Maven项目隶属组织名称（通常是域名反写）</p></li><li><p>artifactId:定义当前Maven项目名称</p></li><li><p>version:定义当前项目版本号</p></li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.10&lt;&#x2F;version&gt;</span><br></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p><strong>依赖</strong>：指当前项目运行所需要的的jar包，一个项目可以引入多个依赖。  </p><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><ol><li>在pom.xml中填写标签dependencies</li><li>在dependencies标签中使用dependency引入坐标</li><li>定义坐标的groupId,artifactId,version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol><p><strong>注意事项</strong>：</p><ul><li>若引入的依赖，在本地仓库中不存在，将会连接远程仓库/中央仓库，然后下载资源</li><li>若不知道依赖的坐标信息，可以到<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>中搜索</li></ul><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>依赖具有传递性。</p><ul><li><strong>直接依赖</strong>：在当前项目中通过依赖配置建立的依赖关系</li><li><strong>简介依赖</strong>：被依赖的资源中若依赖其他资源，当前项目简介依赖其他资源</li><li><strong>排序依赖</strong>：排除依赖指主动断开依赖的资源，被排除的资源无需指定版本<ul><li>exclusions 标签中使用exclusion</li></ul></li></ul><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p>依赖的jar包，默认情况下，可在任何地方使用，可以通过scope标签设置其作用范围。  </p><p><strong>作用范围</strong>：</p><ul><li>主程序范围有效（main文件夹范围内）</li><li>测试程序范围有效（test文件夹范围内）</li><li>是否参与打包运行（package指令范围内）</li></ul><p><strong>scope值</strong>：</p><ul><li>compile（默认）<ul><li>主程序有效</li><li>测试程序有效</li><li>打包（运行）有效</li></ul></li><li>test<ul><li>主程序无效</li><li>测试程序有效</li><li>打包（运行）无效</li></ul></li><li>provided<ul><li>主程序有效</li><li>测试程序有效</li><li>打包（运行）无效</li></ul></li><li>runtime<ul><li>主程序无效</li><li>测试程序有效</li><li>打包（运行）无效</li></ul></li></ul><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.10&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。   </p><p>在同一套生命周期里，当运行后面的阶段时，前面的阶段都会运行</p><p><strong>常用生命周期</strong>：</p><ul><li>clean：溢出上一次构建生成的文件（target文件夹）</li><li>compile：编译项目源代码</li><li>test：使用合适的单元测试进行测试（junit）</li><li>package：将编译后的文件打包，如：jar，war等</li><li>install：安装项目到本地仓库</li></ul><p><strong>执行指定生命周期的方式</strong></p><ol><li>在idea中，右侧maven栏，选中对应的生命周期，双击运行</li><li>在命令行中，通过命令执行，例如：mvn compile</li></ol><h4 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h4><ul><li>spring-boot-starter-web<ul><li>包含web应用开发所需要的常见依赖</li></ul></li><li>spring-boot-starter-test<ul><li>包含单元测试所需要的常见依赖</li></ul></li></ul><h3 id="分模块设计"><a href="#分模块设计" class="headerlink" title="分模块设计"></a>分模块设计</h3><p><strong>分模块设计</strong>：将项目按照功能拆分成若干个子模块，方便项目的管理维护，扩展，也方便模块间的相互调用，资源共享</p><p><strong>注</strong>：分模块设计需先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><strong>概念</strong>：Hyper Text Transfer Protocol，超文本传输协议，规定浏览器和服务器之间数据传输的规则。  </p><p><strong>特点</strong>：</p><ol><li>基于TCP协议：面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事物处理没有记忆能力，每次请求-响应都是独立的<ul><li>缺点：多次请求间不能共享数据</li><li>优点：速度快</li></ul></li></ol><h3 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h3><p>HTTP请求数据格式：</p><ol><li><strong>请求行</strong>：请求数据第一行，包括请求方式，资源路径，协议</li><li><strong>请求头</strong>：第二行开始，格式key:value</li><li><strong>请求体</strong>：POST请求，存放请求参数</li></ol><p><strong>注</strong>：</p><ul><li>请求方式GET<ul><li>请求参数在请求行中，没有请求体</li></ul></li><li>请求方式POST<ul><li>请求参数在请求体中，POST请求大小是没有限制的</li></ul></li></ul><h3 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h3><p>HTTP响应格式：</p><ol><li><strong>响应行</strong>：响应数据第一行（协议，状态码，描述）</li><li><strong>响应头</strong>：第二行开始：格式key:value</li><li><strong>响应体</strong>：最后一部分，存放相应数据</li></ol><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p><strong>web服务器</strong>：对HTTP协议操作进行封装，简化web程序开发，部署web项目，对外提供网上信息浏览服务。  </p><p><strong>Tomcat</strong>：一个轻量级的web服务器，支持servlet，jsp等少量的javaEE规范，也被称为web容器，servlet容器。  </p><p><strong>官网下载地址</strong>：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a>  </p><p><strong>卸载</strong>：直接删除tomcat目录。  </p><p><strong>启动</strong>：进入bin\startup.bat。  </p><p><strong>若控制台中文出现乱码</strong>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">则修改文件conf&#x2F;logging.properties。</span><br><span class="line">java.util.logging.ConsoleHandler.encoding &#x3D; GBK</span><br></pre></td></tr></table></figure><p><strong>关闭</strong>：</p><ul><li>直接x掉运行窗口：强制关闭</li><li>shutdown.bat正常关闭</li><li>Ctrl+C正常关闭</li></ul><p><strong>配置Tomcat端口号</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conf&#x2F;server.xml</span><br><span class="line">    &lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>HTTP协议默认端口号为80，若将Toncat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p><p><strong>部署</strong>：应用复制到webapps目录</p><h3 id="内嵌Tomcat服务器"><a href="#内嵌Tomcat服务器" class="headerlink" title="内嵌Tomcat服务器"></a>内嵌Tomcat服务器</h3><p>基于Springboot开发的web应用程序，内置tomcat服务器，当启动类运行时，会启动内嵌的tomcat服务器。  </p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(二)</title>
      <link href="2023/05/05/jw2/"/>
      <url>2023/05/05/jw2/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL（二）"><a href="#MySQL（二）" class="headerlink" title="MySQL（二）"></a>MySQL（二）</h1><p><strong>数据库</strong>：Database，存储的数据的集合，提供数据存储的服务。  </p><p><strong>数据库管理系统</strong>：Database Manage System，DBMS，数据库管理系统，是位于用户和操作系统之间的一层数据管理软件。  </p><p><strong>数据库系统管理员</strong>：Database Administrator，DBA，负责数据库创建、使用及维护的专门人员。  </p><p><strong>数据库系统</strong>：Database System，DBS，数据库系统管理员、数据库管理系统及数据库组成整个单元。  </p><h2 id="MySQL数据模型"><a href="#MySQL数据模型" class="headerlink" title="MySQL数据模型"></a>MySQL数据模型</h2><p><strong>关系型数据库</strong>：RNDMS，建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询。</li></ul><h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2><p><strong>SQL</strong>：Structure Query Language，一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。  </p><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ul><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格/缩进来增强语句的可读性</li><li>MYSQL数据库的SQL语句不区分大小写</li><li>注释<ul><li>单行注释：– 注释内容或 # 注释内容（mysql特有）</li><li>多行注释：/* 注释内容 */</li></ul></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><strong>DDL</strong> :Data Definition Language，数据定义语言，用来定义数据库对象（数据库，表，字段）</li><li><strong>DML</strong>: Data Manipulation Language，数据操作语言，用来对数据库表中的数据进行增删改</li><li><strong>DQL</strong>: Data Query Language，数据查询语言，用来查询数据库中表的记录</li><li><strong>DCL</strong>:Data Control Language，数据控制语言，用来创建数据库用户、控制数据库的访问权限</li></ul><h2 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>默认有符号数，后可加unsigned变为无符号数。</p><ul><li>整数<ul><li>tinyint,占1byte</li><li>smallint,占2byte</li><li>mediumint,占3byte</li><li>int或integer.占4byte</li><li>bigint,占8byte</li></ul></li><li>浮点数，后加括号，括号里两个参数，一个是整个数字长度，一个是小数位个数<ul><li>float,占4byte</li><li>double,占8byte</li><li>decimal,以字符串形式存储，精度更高，依赖于M（精度）和D（标度）的值<ul><li>M：数字的长度</li><li>D：小数的长度 </li></ul></li></ul></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li><strong>char</strong>:定长字符串，char(n)，最多只能存储n个字符，不足n个字符，占用n个字符空间<ul><li>浪费空间，性能高（时间快）</li></ul></li><li><strong>varchar</strong>:定长字符串，varchar(n)，最多只能存储n个字符，不足n个字符，按实际长度存储<ul><li>节省空间，性能低（时间慢）日期时间类型</li></ul></li><li><strong>tinyblob</strong>，存储二进制字符串，长度0-255字节</li><li><strong>blob</strong>，存储二进制字符串，长度0-65535字节</li><li><strong>mediumblob</strong>，存储二进制字符串，长度0-1677215字节</li><li><strong>longblob</strong>，存储二进制字符串，长度0-4294967295字节</li><li><strong>tinytext</strong>，文本数据（字符串），0-255</li><li><strong>text</strong>，文本数据（字符串），0-65535</li><li><strong>mediumtext</strong>，文本数据（字符串），0-1677215</li><li><strong>longtext</strong>，文本数据（字符串），0-4294967295</li></ul><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ul><li><strong>date</strong>：日期，只存储年月日，格式YYYY-MM-DD</li><li><strong>time</strong>：时间，只存储时分秒，格式HH:MM:SS</li><li><strong>year</strong>：年份，格式YYYY</li><li><strong>datetime</strong>：日期+时间，存储年月日时分秒，格式YYYY-MM-DD HH:MM:SS</li><li><strong>timestamp</strong>：日期+时间，时间戳，格式YYYY-MM-DD HH:MM:SS</li></ul><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库操作，以下语法中database，可以替换成schema</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询所有数据库：show databases;  </p><p>查询当前数据库：select database();  </p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用数据库：use 数据库名;</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建数据库：create database [if not exits] 数据库名;</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除数据库：drop database [if exits ] 数据库名;</p><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p><strong>格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">字段1 字段类型 [约束] [commnet 字段1注释],</span><br><span class="line">......</span><br><span class="line">字段n 字段类型 [约束] [commnet 字段n注释]</span><br><span class="line">)[commnet 表注释];</span><br></pre></td></tr></table></figure><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE db1_1( </span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;唯一的id&#39;, </span><br><span class="line">username VARCHAR(20) NOT NULL UNIQUE COMMENT &#39;唯一的用户名&#39;, </span><br><span class="line">NAME VARCHAR(20) NOT NULL COMMENT &#39;姓名&#39;, </span><br><span class="line">age INT COMMENT &#39;年龄&#39;, </span><br><span class="line">gender CHAR(1) DEFAULT &#39;男&#39; COMMENT &#39;性别&#39; </span><br><span class="line">)COMMENT &#39;db1&#39;;</span><br></pre></td></tr></table></figure><h5 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h5><p><strong>约束</strong>是作用于表中字段上的规则，目的是保证数据库中数据的正确性，有效性和完整性。  </p><ul><li><strong>非空约束</strong>：限制该字段值不能为null。<ul><li>关键字：not null</li></ul></li><li><strong>唯一约束</strong>：保证字段的所有数据都是唯一，不重复的<ul><li>关键字：unique</li></ul></li><li><strong>主键约束</strong>：主键是一行数据的唯一标识，要求非空且唯一<ul><li>关键字：primary key (auto_increment自增)</li></ul></li><li><strong>默认约束</strong>：保存数据时，若未指定该字段值，则采用默认值<ul><li>关键字：default</li></ul></li><li><strong>外键约束</strong>：让两张表的数据建立连接，保证数据的一致性和完整性<ul><li>关键字：foreign key</li></ul></li></ul><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><ul><li>查询当前数据库所有表<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li><li>查询建表语句<ul><li>show create table 表名;</li></ul></li></ul><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li>添加字段<ul><li>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</li></ul></li><li>修改字段类型<ul><li>alter table 表名 modify 字段名 新数据类型(长度);</li></ul></li><li>修改字段名和字段类型<ul><li>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</li></ul></li><li>删除字段<ul><li>alter table 表名 drop column 字段名;</li></ul></li><li>修改表名<ul><li>rename table 表名 to新表名;</li></ul></li></ul><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p>drop table [if exists] 表名;</p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><ul><li>指定字段添加数据<ul><li>insert into 表名(字段名1,字段名2) value(值1,值2);</li></ul></li><li>全部字段添加数据<ul><li>insert into 表名 values(值1,值2…);</li></ul></li><li>批量添加数据（指定字段）<ul><li>insert into 表名(字段名1,字段名2) values(值1,值2),(值1,值2);</li></ul></li><li>批量添加数据（全部字段）<ul><li>insert into 表名 values(值1,值2…),(值1,值2)</li></ul></li></ul><p><strong>注</strong>：</p><ol><li>插入数据时，指定的字段顺序需与值的顺序一一对应</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内。</li></ol><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>update 表名 set 字段名1=值1,字段2=值2,…[where 条件];  </p><p><strong>注</strong>：修改语句的条件可以有，也可无，若无，则会修改整张表的数据</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>delete from 表名 [where 条件];  </p><p><strong>注</strong>：</p><ol><li>delete语句的条件可以有，也可无，若无，则会删除整张表的所有数据</li><li>delete语句不能删除某个字段的值（若要操作，可使用update，将该字段的值值为NULL）</li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><ul><li>查询多个字段<ul><li>select 字段1,字段2,字段3 from 表名;</li></ul></li><li>查询所有字段（通配符）<ul><li>select * from 表名;</li><li><strong>注</strong>： * 代表所有字段，由于星号不直观且影响效率，所以在实际开发中尽量少用</li></ul></li><li>设置别名<ul><li>select 字段 [as 别名1],字段2 [as 别名2] from 表名;</li><li>as可以省略</li><li>若别名中包括特殊字符例如空格，需要将别名用引号引住</li></ul></li><li>去除重复记录<ul><li>select distinct 字段列表 from 表名;</li></ul></li></ul><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>select 字段列表 from 表名 where 条件列表;  </p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 大于</span><br><span class="line">&gt;&#x3D;大于等于</span><br><span class="line">&lt;小于</span><br><span class="line">&lt;&#x3D;小于等于</span><br><span class="line">&#x3D;等于</span><br><span class="line">&lt;&gt;或!&#x3D;   不等于</span><br><span class="line">between ... and ...在某个范围之内(含最小，最大值)</span><br><span class="line">in(...)在in之后的列表中的值，多选一</span><br><span class="line">like 占位符  模糊匹配，_匹配单个字符，%匹配任意个字符</span><br><span class="line">is [not] null（不）是null，不可以用&#x3D;null</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and 或 &amp;&amp;并且，多个条件同时成立</span><br><span class="line">or 或 ||或者，多个条件中任意一个成立</span><br><span class="line">not 或 !非，不是</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><strong>聚合函数</strong>是将一列数据作为一个整体，进行纵向计算。  </p><p>select 聚合函数(字段列表) from 表名;  </p><p><strong>函数</strong>：</p><ul><li><strong>count</strong>：统计数量</li><li><strong>max</strong>：最大值</li><li><strong>min</strong>：最小值</li><li><strong>avg</strong>：平均值</li><li><strong>sum</strong>：求和</li></ul><p><strong>注</strong>：</p><ul><li>null值不参与所有聚合函数运算</li><li>统计数量可以用: count(星号) count(字段) count(常量)，推荐使用count(星号)</li></ul><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];  </p><p><strong>having和where的区别</strong></p><ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，having可以</li></ol><p><strong>注</strong>：</p><ul><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li><li>执行顺序：where&gt;聚合函数&gt;having</li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>select 字段列表 from 表名 [where 条件列表] [group by 分组字段] order by 字段1 排序方式1,字段2 排序方式2…;  </p><p><strong>排序方式</strong>：</p><ol><li>ASC：升序，默认值，可省略</li><li>DESC：降序</li></ol><p><strong>注意事项</strong>：若是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>select 字段列表 from 表名 limit 起始索引,查询记录数;  </p><p><strong>注意事项</strong>：</p><ol><li>起始索引从0开始，起始索引=(查询页码-1)*每页显示记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>若查询的是第一页数据，起始索引可以省略，直接简写为limit 查询记录数</li></ol><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><ul><li>if(表达式,value1,value2);<ul><li>当表达式为true，取值value1，当表达式为false。取值value2</li></ul></li><li>case expr when value1 then result1 [when value2 then value2…] [else result] end;</li></ul><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><p>各个表结构之间存在着各种联系，基本上分为三种。</p><ol><li>一对多（多对一）<ul><li><strong>实现</strong>：在数据库表中多的一方，添加字段（外键），来关联一的主键。</li><li>一的表也可称为父表，多的表也可称为子表</li></ul></li><li>多对多<ul><li><strong>实现</strong>：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul></li><li>一对一<ul><li>一对一的关系，多用于表单拆分（一张大表单拆成两个小表单），将一张表的基础字段放在一张表中，其他字段放在另一张表中，以提升操作效率</li><li><strong>实现</strong>：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</li></ul></li></ol><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><h4 id="物理外键"><a href="#物理外键" class="headerlink" title="物理外键"></a>物理外键</h4><p>使用foreign key 定义外键关联另外一张表。  </p><p><strong>缺点</strong>：</p><ol><li>影响增删改的效率（需检查外键关系）</li><li>仅用于单节点数据库，不适用与分布式，集群场景</li><li>容易引发数据库的死锁问题，消耗性能</li></ol><h4 id="逻辑外键"><a href="#逻辑外键" class="headerlink" title="逻辑外键"></a>逻辑外键</h4><p>推荐使用的方式，在业务逻辑中，解决外键关联。  </p><p>通过逻辑外键，可方便的解决物理外键的缺点。</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><strong>多表查询</strong>指从多张表中查询数据。  </p><p><strong>笛卡尔积</strong>：是指在数学中，两个集合的所有组合情况，在多表查询时，需消除无效的笛卡尔积。  </p><p><strong>分类</strong>：</p><ol><li>连接查询<ul><li>内连接：相当于查询A，B交集部分的数据</li><li>外连接<ul><li>左外连接：查询左表所有数据（包括两张表交集部分数据）</li><li>右外连接：查询右表所有数据（包括两张表交集部分数据）</li></ul></li></ul></li><li>子查询</li></ol><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li>隐式内连接<ul><li>select 字段列表 from 表1,表2 where 条件…;</li></ul></li><li>显式内连接<ul><li>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</li></ul></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>左外连接<ul><li>select 字段列表 from 左表1 left [outer] join 右表2 on 连接条件;</li></ul></li><li>右外连接<ul><li>select 字段列表 from 左表1 right [outer] join 右表2 on 连接条件;</li></ul></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套select语句，成为<strong>嵌套查询</strong>，又称<strong>子查询</strong>。  </p><p><strong>格式</strong>：  </p><p>select * from t1 where column1 = (select column1 from t2…)  </p><p>子查询外部的语句可以是insert/update/delete/select的任何一个，最常见的是select。  </p><p><strong>分类</strong>：</p><ol><li>标量子查询：子查询返回的结果为单个值<ul><li>常用操作符：=,&lt;&gt;,&gt;,&gt;=,&lt;,&lt;=等</li></ul></li><li>列子查询：子查询返回的结果为一列<ul><li>常用操作符：in,not in等</li></ul></li><li>行子查询：子查询返回的结果为一行<ul><li>常用操作符：=,&lt;&gt;,in,not in</li></ul></li><li>表子查询：子查询返回的结果为多行多列<ul><li>常用操作符：in</li></ul></li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。  </p><p>默认mysql的事务是自动提交的，当执行一条DML语句，mysql会立即隐式的提交事务。  </p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>开启事务<ul><li>start transaction;/begin;</li></ul></li><li>若一组操作执行成功，则提交事务<ul><li>commit;</li></ul></li><li>若一组操作至少有一个执行失败，则回滚事务<ul><li>rollback;</li></ul></li></ul><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><ol><li><strong>原子性</strong>：事务是不可分割的最小单元，要么全部成功，要么全部失败</li><li><strong>一致性</strong>：事务完成时，必须使所有的数据都保持一致状态</li><li><strong>隔离性</strong>：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li><strong>持久性</strong>：事务一旦提交或回滚，对数据库中的数据的改变就是永久的。</li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>索引</strong>是帮助数据库高效获取数据的数据结构。  </p><p><strong>优点</strong>：</p><ol><li>提高数据查询的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗</li></ol><p><strong>缺点</strong>：</p><ol><li>索引会占用存储空间</li><li>索引大大提高了查询效率，同时也降低了insert，update，delete的效率</li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>创建索引<ul><li>create [unique] index 索引名 on 表名(字段名…);</li></ul></li><li>查看索引<ul><li>show index from 表名</li></ul></li><li>删除索引<ul><li>drop index 索引名 on 表名;</li></ul></li></ul><p><strong>注意事项</strong>：</p><ul><li>主键字段，在建表时，会自动创建主键索引</li><li>添加唯一约束时，数据库实际上会添加唯一索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端(一)</title>
      <link href="2023/04/27/jw1/"/>
      <url>2023/04/27/jw1/</url>
      
        <content type="html"><![CDATA[<h1 id="前端（一）"><a href="#前端（一）" class="headerlink" title="前端（一）"></a>前端（一）</h1><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li><strong>HTML</strong>:负责网页的结构</li><li><strong>CSS</strong>:负责网页的表现</li><li><strong>JS</strong>:负责网页的行为</li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;标题&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>HTML标签不区分大小写</li><li>HTML标签属性值单双引号都可以</li><li>HTML语法松散</li></ul><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">标题标签</span><br><span class="line">标签：&lt;h1&gt;内容&lt;h1&gt;</span><br><span class="line">注：h1-h6重要程度依次降低，h1只能用一次</span><br><span class="line"></span><br><span class="line">水平线标签&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">图片标签&lt;img src&#x3D;&quot;...&quot; width&#x3D;&quot;...&quot; height&#x3D;&quot;...&quot;&gt;</span><br><span class="line">绝对路径：绝对磁盘路径(d:&#x2F;xxxx)，绝对网络路径(https:&#x2F;&#x2F;xxxx)</span><br><span class="line">相对路径：从当前文件开始查找(.&#x2F; : 当前目录，..&#x2F; : 上级目录)</span><br><span class="line"></span><br><span class="line">&lt;span&gt;标签</span><br><span class="line">是一个在无语义的布局标签，一行可显示多个，宽度和高度默认由内容撑开</span><br><span class="line"></span><br><span class="line">&lt;a&gt;标签</span><br><span class="line">属性：</span><br><span class="line">href：指定资源访问的url</span><br><span class="line">target：指定在何处打开资源链接</span><br><span class="line">_self：默认值，在当前页面打开</span><br><span class="line">_blank：在空白页面打开</span><br><span class="line"></span><br><span class="line">&lt;audio&gt;标签</span><br><span class="line">audio音频标签,src（必须有的属性）音频的Url,controls显示音频控制面板，loop，循环播放，autoplay自动播放，为了提升用户体验，浏览器一般会禁用自动播放</span><br><span class="line">在h5里面，若属性名和属性值完全一样，可以简写为一个单词，例如:controls&#x3D;&quot;controls&quot;可以简写为controls</span><br><span class="line"></span><br><span class="line">&lt;video&gt;标签</span><br><span class="line">src（必须存在的属性）视频URL，control是显示视频控制面板，loop循环播放，muted静音播放，autoplay自动播放，为提升用户体验，浏览器支持视频静音状态自动播放</span><br><span class="line"></span><br><span class="line">&lt;br&gt;换行</span><br><span class="line">&lt;p&gt;段落</span><br><span class="line"></span><br><span class="line">&lt;b&gt;或&lt;strong&gt;文本加粗</span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt; </span><br><span class="line">描述：定义表格整体，可包括多个&lt;tr&gt;</span><br><span class="line">属性：border:规定表格边框的宽度</span><br><span class="line"> width:规定表格的宽度</span><br><span class="line"> cellspacing:规定单元之间的空间</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">描述：表格的行，可包括多个&lt;td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">描述：表格单元格（普通），可包括内容</span><br><span class="line">属性：若是表头单元格，可替换为&lt;th&gt;,&lt;th&gt;具有加粗居中效果</span><br></pre></td></tr></table></figure><h3 id="表单标签和表单项"><a href="#表单标签和表单项" class="headerlink" title="表单标签和表单项"></a>表单标签和表单项</h3><p><strong>场景</strong>：在网页中主要负责数据采集功能，如：注册，登录等数据采集。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">标签：&lt;form&gt;</span><br><span class="line">表单项：不同类型的input元素，下拉列表，文本域等。</span><br><span class="line">&lt;input&gt;：定义表单项，通过type属性控制输入形式</span><br><span class="line">type属性取值text,默认值，定义单行的输入字段</span><br><span class="line">type属性取值password，定义密码字段</span><br><span class="line">type属性取值radio，定义单选按钮</span><br><span class="line">type属性取值checkbox，定义复选框</span><br><span class="line">type属性取值file，定义文件上传按钮</span><br><span class="line">type属性取值date&#x2F;time&#x2F;datetime-local，定义日期&#x2F;时间&#x2F;日期时间</span><br><span class="line">type属性取值number，定义数字输入框</span><br><span class="line">type属性取值email，定义邮件输入框</span><br><span class="line">type属性取值hidden，定义隐藏域</span><br><span class="line">type属性取值取值submit&#x2F;reset&#x2F;button，定义提交按钮&#x2F;重复按钮&#x2F;可点击按钮</span><br><span class="line">&lt;select&gt;：定义下拉列表，&lt;option&gt;定义列表项</span><br><span class="line">&lt;textarea&gt;：定义文本域</span><br><span class="line">属性：</span><br><span class="line">action：规定当前提交表单时向何处发表表单数据，URL</span><br><span class="line">method：规定用于发送表单数据的方式。GET,POST</span><br><span class="line">GET:表单数据拼接在url后面，例如：?username&#x3D;java，大小有限制</span><br><span class="line">POST:表单数据在请求体中携带，大小没有限制</span><br></pre></td></tr></table></figure><p><strong>注</strong>：表单项必须有name属性才可以提交</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>html中。无论输入多少空格，只会显示一个。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可使用空格占位符:</span><br><span class="line">&amp;nbsp;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="引入样式"><a href="#引入样式" class="headerlink" title="引入样式"></a>引入样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内样式：&lt;标签 style&#x3D;&quot;...&quot;&gt;</span><br><span class="line">内嵌样式：&lt;style&gt;...&lt;&#x2F;style&gt;</span><br><span class="line">外联样式：xxx.css&lt;link href&#x3D;&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h3><ul><li>关键字：red,green…</li><li>rgb表示法：rgb(255,0,0)、rgb(134,100,89)</li><li>十六进制：#ff0000,#cccccc,#ccc</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>color:设置文本内容的颜色  </p><p>font-size:字体大小（加px）  </p><p>text-decoration:规定添加到文本的修饰，none表示定义标准的文本  </p><p>line-height：设置行高  </p><p>text-indent：定义第一个行内容的缩进  </p><p>text-align：规定元素中的文本的水平对齐方式  </p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>元素选择器：标签名{}</li><li>id选择器：#id属性值{}</li><li>类选择器：class属性值{}</li></ul><p><strong>优先级</strong>：id选择器&gt;类选择器&gt;元素选择器</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p><strong>组成</strong>：内容(content)，内边距(padding)，边框(border)，外边距(margin)  </p><p><strong>属性</strong>：  </p><ul><li>width：设置宽度</li><li>height：设置高度</li><li>border：设置边框的属性，如：1px solid #000</li><li>padding：内边距</li><li>margin：外边距</li></ul><p><strong>注</strong>：若只需要设置第一个方位的边框，内边距，外边距，可在属性名后方加上-left/right/top/bottom，</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><strong>JavaScript</strong>简称<strong>JS</strong>是一门跨平台，面向对象的脚本语言，是用来控制网页行为的，能使网页可交互。  </p><p>JavaScript和Java是完全不同的语言，不论是概念还是设计，但是基础语法类似。  </p><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><h4 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h4><p>将js代码定义在HTML页面中。  </p><ul><li>JavaScript代码必须位于script标签之间</li><li>在html文档中，可在任意地方，放置任意数量的script</li><li>一般会把脚本置于body元素的底部，可改善显示速度</li></ul><h4 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h4><p>将js代码定义在外部JS文件中，后引入到html页面中。  </p><ul><li>外部js文件中，只包含js代码，不包含script标签</li><li>script标签的不能自闭和</li></ul><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">test.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    alert(&quot;内部脚本&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;test.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">test.js</span><br><span class="line">alert(&quot;外部脚本&quot;);</span><br></pre></td></tr></table></figure><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><p>区分大小写：和java一样，变量名，函数名以及其他一切东西都是区分大小写的。  </p><p>每行结尾的分号可有可无，不过尽量加上。  </p><p><strong>注释</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单行注释：&#x2F;&#x2F;注释内容</span><br><span class="line">多行注释：&#x2F;*注释内容*&#x2F;</span><br></pre></td></tr></table></figure><p>大括号表示代码块</p><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><ul><li>使用window.alert()写入警告框</li><li>使用document.write()写入HTML输出</li><li>使用console.log()写入浏览器控制台</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.alert(&quot;window.alert&quot;);</span><br><span class="line">    document.write(&quot;document.write&quot;);</span><br><span class="line">    console.log(&quot;console.log&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>JavaScript中用<strong>var</strong>关键字（variable的缩写），<strong>let</strong>（ECMAScript6新增），<strong>const</strong>（ECMAScript6新增）来声明变量。  </p><p>JavaScript是一门弱类型语言，变量可存放不同类型的值。  </p><p><strong>变量起名</strong>：</p><ol><li>组成字符可以是字母，数字，下划线，或美元符号($)</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ol><p><strong>var特点</strong>：</p><ol><li>作用域比较大，全局变量</li><li>可重复定义</li></ol><p><strong>let特点</strong>：用法类似于var，但其所声明的变量，只在let关键字所在的代码块有效，且不允许重复定义。  </p><p><strong>const特点</strong>：用来声明一个只读的常量，一旦声明，常量值不可变</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript中虽然变量不用定义类型，但是数据有类型。  </p><p><strong>数据类型</strong>：原始类型和引用类型。  </p><h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><p><strong>number</strong>：数字（整数，小数，NaN(Not a Number)）  </p><p><strong>String</strong>：字符串，单双引皆可  </p><p><strong>boolean</strong>：布尔，true，false  </p><p><strong>null</strong>：对象为空</p><p><strong>undefined</strong>：当声明的变量未初始化时，该变量的默认值是undefined。  </p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>字符串转为数字：将字符串字面值转为数字，若字面值不是数字，则转为NaN</li><li>其他类型转为boolean<ul><li>Number：0和NaN为false，其余转为true</li><li>String：空字符串为false，其余转为true</li><li>null和undefined：均转为false</li></ul></li></ul><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">alert(parseInt(&quot;123&quot;));&#x2F;&#x2F;123</span><br><span class="line">alert(parseInt(&quot;12ab3&quot;));&#x2F;&#x2F;12</span><br><span class="line">alert(parseInt(&quot;sfa&quot;));&#x2F;&#x2F;NaN</span><br><span class="line">if(0)&#123;</span><br><span class="line">    alert(&quot;0为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;0为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(NaN)&#123;</span><br><span class="line">    alert(&quot;NaN为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;NaN为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(-1)&#123;</span><br><span class="line">    alert(&quot;-1为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;-1为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(&quot;&quot;)&#123;</span><br><span class="line">    alert(&quot;空字符串为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;空字符串为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(&quot;aa&quot;)&#123;</span><br><span class="line">    alert(&quot;字符串aa为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;字符串aa为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(null)&#123;</span><br><span class="line">    alert(&quot;null为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;null为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if(undefined)&#123;</span><br><span class="line">    alert(&quot;undefined为true&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;undefined为false&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>与java运算符大致相似。</p><p>**==和===**：</p><ul><li>==会进行类型转换</li><li>===不会进行类型转换</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;10;</span><br><span class="line">alert(a&#x3D;&#x3D;10);&#x2F;&#x2F;true</span><br><span class="line">alert(a&#x3D;&#x3D;&quot;10&quot;);&#x2F;&#x2F;true</span><br><span class="line">alert(a&#x3D;&#x3D;&#x3D;10);&#x2F;&#x2F;true</span><br><span class="line">alert(a&#x3D;&#x3D;&#x3D;&quot;10&quot;);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>函数</strong>（方法）是被设计为执行特定任务的代码块。  </p><p><strong>定义方式一</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function functionName(参数1,参数2...)&#123;</span><br><span class="line">&#x2F;&#x2F;要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义方式二</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var functionName&#x3D;function(参数1,参数2...)&#123;</span><br><span class="line">&#x2F;&#x2F;要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong>：functionName(实际参数列表)  </p><p><strong>注</strong>：</p><ul><li>JavaScript是弱类型语言，形式参数无需类型</li><li>返回值也不需定义类型，可在函数内部直接用return返回</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add1(a,b)&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line">alert(add1(3,5));</span><br><span class="line">let add2&#x3D;function(a,b)&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125; </span><br><span class="line">alert(add2(4,5));</span><br></pre></td></tr></table></figure><h3 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>JavaScript中的数组相当于java中集合，数组的长度是可变的，而JavaScript是弱类型，所以可存储任意类型的数据。  </p><p><strong>定义</strong>：  </p><ol><li>let/var 变量名=new Array{元素列表}</li><li>let/var 变量名=[元素列表]</li></ol><p><strong>访问</strong>：  </p><p>arr[索引]=值  </p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p><strong>length</strong>：设置或返回数组中元素的数量</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>**foreach()**：遍历数组中每个有值的元素，并调用一次传入的数据。  </p><p>**push()**：将新元素添加到数组的末尾，并返回新的长度。  </p><p>**splice()**：从数组中删除元素</p><h5 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let arr&#x3D;[1,2,&quot;aaa&quot;,4,true,6];</span><br><span class="line">arr[10]&#x3D;10;</span><br><span class="line">console.log(&quot;for遍历&quot;);</span><br><span class="line">for (let index &#x3D; 0; index &lt; arr.length; index++) &#123;</span><br><span class="line">    console.log(arr[index]);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;foreach遍历&quot;);</span><br><span class="line">arr.forEach(function(e)&#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&quot;foreach简化遍历&quot;);</span><br><span class="line">arr.forEach((e)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&quot;push&quot;);</span><br><span class="line">arr.push(1,&quot;aa&quot;,3);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(&quot;slice&quot;);</span><br><span class="line">arr.splice(2,2);&#x2F;&#x2F;索引2开始，删除两个</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><strong>创建方式</strong>：</p><ol><li>let/var 变量名=new String(“…”)</li><li>let/var 变量名=”…”</li></ol><h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><p><strong>length</strong>：字符串的长度</p><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><p>charAt()：返回在指定位置的字符。  </p><p>indexOf()：检索字符串。  </p><p>trim()：去除字符串两边的空格。  </p><p>substring()：提取字符串中两个指定的索引号之间的字符</p><h5 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str&#x3D;&quot; hello world &quot;;</span><br><span class="line">console.log(str);</span><br><span class="line">console.log(str.length);</span><br><span class="line">console.log(str.charAt(1));</span><br><span class="line">console.log(str.indexOf(&quot;llo&quot;));</span><br><span class="line">let s&#x3D;str.trim();</span><br><span class="line">console.log(s.substring(2,5));</span><br></pre></td></tr></table></figure><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><h5 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var&#x2F;let 对象名 &#x3D; &#123;</span><br><span class="line">属性名1:属性值1,</span><br><span class="line">属性名2:属性值2,</span><br><span class="line">属性名3:属性值3,</span><br><span class="line">...</span><br><span class="line">函数名称:function(形参列表)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;函数简化版</span><br><span class="line">函数名称(形参列表)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h5><ul><li>对象名.属性名;  </li><li>对象名.函数名();</li></ul><h5 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let student&#x3D;&#123;</span><br><span class="line">age:19,</span><br><span class="line">id:8,</span><br><span class="line">name:&quot;zhangsan&quot;,</span><br><span class="line">study()&#123;</span><br><span class="line">alert(&quot;学习&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(student.age);</span><br><span class="line">student.study();</span><br></pre></td></tr></table></figure><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>JavaScript Object Notation，JavaScript对象标记法。  </p><p>JSON是通过JavaScript对象标记法书写的文本。  </p><p>由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输。  </p><h5 id="定义格式-1"><a href="#定义格式-1" class="headerlink" title="定义格式"></a>定义格式</h5><p>var/let 变量名=’{“key1”:value1,”key2”,value2}‘  </p><p><strong>value的数据类型</strong>：</p><ul><li>数字，整数或浮点数</li><li>字符串，在双引号中。</li><li>逻辑值，true或false</li><li>数组，在方括号中</li><li>对象，在方括号中</li><li>null</li></ul><p><strong>JSON字符串转换成JS对象</strong>：  </p><p>var/let jsObject=JSON.parse(JSON字符串);  </p><p><strong>JS对象转换成JSON字符串</strong>：  </p><p>var/let jsonStr=JSON.stringify(jsObject);  </p><h5 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let student&#x3D;&#39;&#123;&quot;age&quot;:18,&quot;name&quot;:&quot;zhangsan&quot;,&quot;score&quot;:[66,19,21]&#125;&#39;;</span><br><span class="line">let studentobject&#x3D;JSON.parse(student);</span><br><span class="line">alert(studentobject.age);</span><br><span class="line">alert(studentobject.name);</span><br><span class="line">alert(studentobject.score);</span><br><span class="line">let studentstr&#x3D;JSON.stringify(studentobject);</span><br><span class="line">alert(studentstr);</span><br></pre></td></tr></table></figure><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>Brower Object Model 浏览器对象模型，允许JavaScript与浏览器对话，JavaScript将浏览器的各个组成部分封装成对象。  </p><p><strong>组成</strong>：</p><ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h5 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h5><p><strong>介绍</strong>：浏览器窗口对象  </p><p><strong>获取</strong>：直接使用Window，其中Window.可以省略。  </p><p><strong>属性</strong>：</p><ul><li>history：对History的只读引用</li><li>location：用于窗口或框架的Location对象</li><li>navigator：对Navigator对象的只读引用</li></ul><p><strong>方法</strong>：</p><ul><li>alert()：显示带有一段消息和一个确认按钮的警告框</li><li>confirm()：显示带有一段消息及确认按钮和取消按钮的对话框，若选择确认则会返回true。若选择取消则会返回false</li><li>setInterval()：按照指定的周期（以毫秒计）来调用函数或计算表达式</li><li>setTimeout()：在指定的毫秒数后调用函数或计算表达式</li></ul><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;alert&quot;);</span><br><span class="line"></span><br><span class="line">let flag&#x3D;confirm(&quot;您确定吗？&quot;);</span><br><span class="line">alert(flag);</span><br><span class="line"></span><br><span class="line">let i&#x3D;0;</span><br><span class="line">setInterval(function()&#123;</span><br><span class="line">i++;</span><br><span class="line">alert(&quot;这是第&quot;+i+&quot;次运行&quot;);</span><br><span class="line">&#125;,3000);</span><br><span class="line"></span><br><span class="line">setTimeout((function()&#123;</span><br><span class="line">alert(&quot;运行&quot;);</span><br><span class="line">&#125;,3000);</span><br></pre></td></tr></table></figure><h5 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h5><p><strong>介绍</strong>：地址栏对象。  </p><p><strong>获取</strong>：使用window.location获取，其中window.location可省略  </p><p>window.location.属性;  </p><p>location.属性;  </p><p><strong>属性</strong>：<br>href：设置或返回完整的URL  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(location.href);</span><br><span class="line">location.href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;;&#x2F;&#x2F;自动跳转到百度</span><br></pre></td></tr></table></figure><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>Document Object Model，文档对象模型。 </p><p>将标记语言的各个组成部分封装为对应的对象。  </p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>JavaScript通过DOM，就能够对html进行操作：</p><ul><li><p>改变html元素的内容</p></li><li><p>改变html元素的样式</p></li><li><p>对html DOM事件作出反应</p></li><li><p>添加和删除html元素</p><p>DOM是W3C（万维网联盟）的标准，定义了访问html和xml文档的标准，分为3个不同的部分。 </p></li></ul><ol><li>Core DOM：所有文档类型的标准类型<ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li><li>XML DOM-XML文档的标准模型</li><li>HTML DOM-HTML文档的标准类型<ul><li>Image: &lt; img &gt; </li><li>Button:&lt; input type=’button’&gt;</li></ul></li></ol><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;img&#x2F;off.gif&quot; id&#x3D;&quot;h1&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;cls&quot;&gt;传智教育&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;cls&quot;&gt;黑马程序源&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt;电影</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt;旅游</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt;游戏</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let img&#x3D;document.getElementById(&quot;h1&quot;);</span><br><span class="line">    alert(img);</span><br><span class="line">    let divs&#x3D;document.getElementsByTagName(&quot;div&quot;);</span><br><span class="line">    for (let index &#x3D; 0; index &lt;divs.length; index++) &#123;</span><br><span class="line">        console.log(divs[index]);        </span><br><span class="line">    &#125;</span><br><span class="line">    let names&#x3D;document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line">    for (let index &#x3D; 0; index &lt;names.length; index++) &#123;</span><br><span class="line">        console.log(names[index]);        </span><br><span class="line">    &#125;</span><br><span class="line">    let classnames&#x3D;document.getElementsByClassName(&quot;cls&quot;);</span><br><span class="line">    for (let index &#x3D; 0; index &lt;classnames.length; index++) &#123;</span><br><span class="line">        console.log(classnames[index]);        </span><br><span class="line">    &#125;</span><br><span class="line">    divs[0].innerHTML&#x3D;&quot;传智教育666&quot; </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p><strong>事件</strong>：HTML事件是发生在HTML元素上的”事情”，比如：</p><ul><li>按钮被点击</li><li>鼠标移动到元素上</li><li>按下键盘按键</li></ul><p><strong>事件监听</strong>：JavaScript可在事件被侦测到时执行代码  </p><p><strong>事件绑定方式</strong>：</p><ol><li>通过HTML标签中的事件属性进行绑定</li><li>通过DOM元素属性绑定</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方式一</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;on()&quot; value&#x3D;&quot;按钮1&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function on()&#123;</span><br><span class="line">alert(&quot;我被点击了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">方式二</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;按钮2&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&#39;btn&#39;).onclick&#x3D;function()&#123;</span><br><span class="line">alert(&quot;我被点击了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h5><ul><li>onclick：鼠标单击事件</li><li>onblur：元素失去焦点</li><li>onfocus：元素获得焦点</li><li>onload：某个页面或图像被完成加载</li><li>onsubmit：当表单提交时触发该事件</li><li>onkeydown：某个键盘的键被按下</li><li>onmouseover：鼠标被移到某元素之上</li><li>onmouseout：鼠标从某元素移开</li></ul><h5 id="范例-5"><a href="#范例-5" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;JS-事件-案例&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img id&#x3D;&quot;light&quot; src&#x3D;&quot;img&#x2F;off.gif&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点亮&quot; onclick&#x3D;&quot;on()&quot;&gt; </span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot;  value&#x3D;&quot;熄灭&quot; onclick&#x3D;&quot;off()&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; value&#x3D;&quot;ITCAST&quot; onfocus&#x3D;&quot;lower()&quot; onblur&#x3D;&quot;upper()&quot;&gt;</span><br><span class="line">    &lt;br&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt; 电影</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt; 旅游</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot;&gt; 游戏</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;全选&quot; onclick&#x3D;&quot;onAll()&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;反选&quot; onclick&#x3D;&quot;offAll()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function on()&#123;</span><br><span class="line">        let img&#x3D;document.getElementById(&quot;light&quot;);</span><br><span class="line">        img.src&#x3D;&quot;img&#x2F;on.gif&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function off()&#123;</span><br><span class="line">        let img&#x3D;document.getElementById(&quot;light&quot;);</span><br><span class="line">        img.src&#x3D;&quot;img&#x2F;off.gif&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function lower()&#123;</span><br><span class="line">        let input&#x3D;document.getElementById(&quot;name&quot;);</span><br><span class="line">        input.value &#x3D; input.value.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    function upper()&#123;</span><br><span class="line">        let input&#x3D;document.getElementById(&quot;name&quot;);</span><br><span class="line">        input.value &#x3D; input.value.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    function onAll()&#123;</span><br><span class="line">        let names&#x3D;document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line">        for (let index &#x3D; 0; index &lt; names.length; index++) &#123;</span><br><span class="line">            const element &#x3D; names[index];</span><br><span class="line">            element.checked&#x3D;true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function offAll()&#123;</span><br><span class="line">        let names&#x3D;document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line">        for (let index &#x3D; 0; index &lt; names.length; index++) &#123;</span><br><span class="line">            const element &#x3D; names[index];</span><br><span class="line">            element.checked&#x3D;false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。  </p><p><strong>例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;cesgu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p><strong>形式</strong>：  </p><p><strong>内容</strong>：</p><ul><li>变量</li><li>三元运算符</li><li>函数调用</li><li>算数运算</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><strong>指令</strong>：HTML标签上带有v-前缀的特殊属性，不同指令具有不同含义。  </p><ul><li>v-bind<ul><li>为HTML标签绑定属性值，如设置href,css样式等</li></ul></li><li>v-model<ul><li>在表单元素上创建双向数据绑定</li></ul></li><li>v-on<ul><li>为HTML标签绑定事件</li></ul></li><li>v-if;v-else-if;v-else<ul><li>条件性的渲染某元素，判定为true时渲染，否则不渲染</li></ul></li><li>v-show<ul><li>根据条件展示某元素，区别在与切换的是display属性的值</li></ul></li><li>v-for<ul><li>列表渲染，遍历容器的元素或对象的属性</li></ul></li></ul><h4 id="范例1"><a href="#范例1" class="headerlink" title="范例1"></a>范例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- v-bind --&gt;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;url&quot;&gt;连接1&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;!-- v-bind简化版 --&gt;</span><br><span class="line">        &lt;a :href&#x3D;&quot;url&quot;&gt;连接2&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;!-- v-model --&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;url&quot;&gt;</span><br><span class="line">        &lt;!-- v-on --&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;handle&quot;&gt;按钮1&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;!-- v-on简化版 --&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;handle&quot;&gt;按钮2&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;!-- v-if;v-else-if;v-else --&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;score1&lt;60&quot;&gt;不及格&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p v-else-if&#x3D;&quot;score1&gt;&#x3D;60&amp;&amp;score1&lt;80&quot;&gt;及格&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p v-else&#x3D;&quot;score1&gt;&#x3D;80&quot;&gt;优秀&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;score1&quot;&gt;</span><br><span class="line">        &lt;!-- v-show --&gt;</span><br><span class="line">        &lt;p v-show&#x3D;&quot;score2&lt;60&quot;&gt;不及格&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p v-show&#x3D;&quot;score2&gt;&#x3D;60&quot;&gt;及格&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;score2&quot;&gt;</span><br><span class="line">        &lt;!-- v-for --&gt;</span><br><span class="line">        &lt;p v-for&#x3D;&quot;arr in arrs&quot;&gt;&#123;&#123;arr&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p v-for&#x3D;&quot;(arr,index) in arrs&quot;&gt;&#123;&#123;index&#125;&#125;:&#123;&#123;arr&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            url:&quot;https:&#x2F;&#x2F;www.baidu.com&quot;,</span><br><span class="line">            score1:20,</span><br><span class="line">            score2:80,</span><br><span class="line">            arrs:[&quot;红&quot;,&quot;绿&quot;,&quot;蓝&quot;,&quot;橙&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handle:function()&#123;</span><br><span class="line">                alert(&quot;按钮被点击了&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="范例2"><a href="#范例2" class="headerlink" title="范例2"></a>范例2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue-指令-案例&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;  </span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot; cellspacing&#x3D;&quot;0&quot; width&#x3D;&quot;60%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;年龄&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;性别&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;成绩&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;等级&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tr align&#x3D;&quot;center&quot; v-for&#x3D;&quot;(user,index) in users&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;user.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;user.age&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;span v-if&#x3D;&quot;user.gender&#x3D;&#x3D;1&quot;&gt;男&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;span v-else&gt;女&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;user.score&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;span v-if&#x3D;&quot;user.score&gt;&#x3D;85&quot;&gt;优秀&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;span v-else-if&#x3D;&quot;user.score&gt;&#x3D;60&quot;&gt;及格&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;span v-else style&#x3D;&quot;color: red;&quot;&gt;不及格&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [&#123;</span><br><span class="line">                name: &quot;Tom&quot;,</span><br><span class="line">                age: 20,</span><br><span class="line">                gender: 1,</span><br><span class="line">                score: 78</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                name: &quot;Rose&quot;,</span><br><span class="line">                age: 18,</span><br><span class="line">                gender: 2,</span><br><span class="line">                score: 86</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                name: &quot;Jerry&quot;,</span><br><span class="line">                age: 26,</span><br><span class="line">                gender: 1,</span><br><span class="line">                score: 90</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                name: &quot;Tony&quot;,</span><br><span class="line">                age: 30,</span><br><span class="line">                gender: 1,</span><br><span class="line">                score: 52</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><strong>生命周期</strong>：指一个对象从创建到销毁的整个过程。  </p><p>生命周期分为八个阶段，每触发一个生命周期事件，会自动执行一个生命周期方法（钩子）  </p><ul><li>beforeCreate<ul><li>创建前</li></ul></li><li>created<ul><li>创建后</li></ul></li><li>beforeMount<ul><li>挂在前</li></ul></li><li>mounted<ul><li>挂载完成</li></ul></li><li>beforeUpdate<ul><li>更新前</li></ul></li><li>updated<ul><li>更新后</li></ul></li><li>beforeDestroy<ul><li>销毁前</li></ul></li><li>destroyed<ul><li>销毁后</li></ul></li></ul><h4 id="范例-6"><a href="#范例-6" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue-指令-案例&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;  </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            alert(&quot;挂载完成&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p><strong>Ajax</strong>:Asynchronous Javascript And XML，异步的JavaScript和XML。  </p><p><strong>作用</strong>：</p><ul><li><strong>数据交换</strong>：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。  </li><li><strong>异步交互</strong>：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，例如：搜索联想，用户名是否可用的校验等等</li></ul><p><strong>Axios</strong>：对原生的Ajax进行封装，简化书写，快速开发。  </p><p><strong>Axios请求方式别名</strong>：</p><ul><li>axios.get(url,[,config])</li><li>axios.delete(url,[,config])</li><li>axios.post(url [,data[,config]])</li><li>axios,put(url [,data[,config]])</li></ul><h3 id="范例-7"><a href="#范例-7" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;axios&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;axios-0.18.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot; cellspacing&#x3D;&quot;0&quot; width&#x3D;&quot;60%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;图像&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;性别&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;职位&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;入职日期&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;最后操作时间&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;tr align&#x3D;&quot;center&quot; v-for&#x3D;&quot;(emp,index) in emps&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;index + 1&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;emp.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;img :src&#x3D;&quot;emp.image&quot; width&#x3D;&quot;70px&quot; height&#x3D;&quot;50px&quot;&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;span v-if&#x3D;&quot;emp.gender &#x3D;&#x3D; 1&quot;&gt;男&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;span v-if&#x3D;&quot;emp.gender &#x3D;&#x3D; 2&quot;&gt;女&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;emp.job&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;emp.entrydate&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;emp.updatetime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            emps:[]</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            axios.get(&quot;http:&#x2F;&#x2F;yapi.smart-xwork.cn&#x2F;mock&#x2F;169327&#x2F;emp&#x2F;list&quot;).then(result&#x3D;&gt;(</span><br><span class="line">                this.emps&#x3D;result.data.data</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和动态管理（二十一-完）</title>
      <link href="2023/04/08/J21/"/>
      <url>2023/04/08/J21/</url>
      
        <content type="html"><![CDATA[<h1 id="反射和动态管理（二十一-完）"><a href="#反射和动态管理（二十一-完）" class="headerlink" title="反射和动态管理（二十一-完）"></a>反射和动态管理（二十一-完）</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><strong>反射</strong>允许对字段（成员变量），成员方法，构造方法的信息进行编程访问。  </p><p><strong>反射</strong>操作可分为<strong>获取</strong>和<strong>解刨</strong>。  </p><p><strong>获取</strong>不是从java文件获取，而是从class字节码文件获取。  </p><p><strong>作用</strong>：</p><ol><li>获取一个类里面的所有的信息，获取到了后，再执行其他的业务逻辑</li><li>结合配置文件，动态的创建对象并调用方法</li></ol><h3 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h3><ol><li>Class.forname(“全类名”)<ul><li>全类名：包名+类名‘</li><li>该方法是最为常用的</li></ul></li><li>类名.class<ul><li>一般当做当前参数进行传递，比如synchronized(类名.class)</li></ul></li><li>对象.getclass<ul><li>有该类的对象后，才可使用</li></ul></li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class="line">        Class class1 &#x3D; Class.forName(&quot;reflect.Student&quot;);</span><br><span class="line">        System.out.println(class1);</span><br><span class="line">        Class class2 &#x3D; Student.class;</span><br><span class="line">        System.out.println(class2);</span><br><span class="line">        Student student&#x3D;new Student();</span><br><span class="line">        Class class3&#x3D;student.getClass();</span><br><span class="line">        System.out.println(class3);</span><br><span class="line">        System.out.println(class1&#x3D;&#x3D;class2);</span><br><span class="line">        System.out.println(class2&#x3D;&#x3D;class3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">class reflect.Student</span><br><span class="line">class reflect.Student</span><br><span class="line">class reflect.Student</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><h4 id="Class类中用于获取构造方法的方法"><a href="#Class类中用于获取构造方法的方法" class="headerlink" title="Class类中用于获取构造方法的方法"></a>Class类中用于获取构造方法的方法</h4><h5 id="getConstructors"><a href="#getConstructors" class="headerlink" title="getConstructors"></a>getConstructors</h5><p>Constructor&lt;?&gt;[] getConstructors()  </p><p><strong>说明</strong>：返回所有公共构造方法对象的数组</p><h5 id="getDeclaredConstructors"><a href="#getDeclaredConstructors" class="headerlink" title="getDeclaredConstructors"></a>getDeclaredConstructors</h5><p>Constructor&lt;?&gt;[] getDeclaredConstructors()  </p><p><strong>说明</strong>：返回所有构造方法对象的数组</p><h5 id="getConstructor"><a href="#getConstructor" class="headerlink" title="getConstructor"></a>getConstructor</h5><p>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)  </T></p><p><strong>说明</strong>：返回单个公共构造方法对象</p><h5 id="getDeclaredConstructor"><a href="#getDeclaredConstructor" class="headerlink" title="getDeclaredConstructor"></a>getDeclaredConstructor</h5><p>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)   </T></p><p><strong>说明</strong>：返回单个构造方法对象</p><h4 id="Constructor类中用于创建对象的方法"><a href="#Constructor类中用于创建对象的方法" class="headerlink" title="Constructor类中用于创建对象的方法"></a>Constructor类中用于创建对象的方法</h4><h5 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h5><p>T newInstance(Object…initargs)  </p><p><strong>说明</strong>：根据指定的构造方法创建对象</p><h5 id="setAccessible"><a href="#setAccessible" class="headerlink" title="setAccessible"></a>setAccessible</h5><p>setAccessible(boolean flag)  </p><p><strong>说明</strong>：设置为true，表示取消访问检查</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    private Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    protected Student(int age)&#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class clazz &#x3D; Class.forName(&quot;reflect.Student&quot;);</span><br><span class="line">        &#x2F;&#x2F;getConstructors</span><br><span class="line">        Constructor[] constructors1 &#x3D; clazz.getConstructors();</span><br><span class="line">        for (Constructor constructor:constructors1)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredConstructors</span><br><span class="line">        Constructor[] constructors2 &#x3D; clazz.getDeclaredConstructors();</span><br><span class="line">        for (Constructor constructor:constructors2)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getConstructor</span><br><span class="line">        Constructor constructor1 &#x3D; clazz.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredConstructor</span><br><span class="line">        Constructor constructor2 &#x3D; clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(constructor2.getModifiers());&#x2F;&#x2F;获取权限修饰符，以数字的形式表现</span><br><span class="line">        System.out.println();</span><br><span class="line">        Parameter[] parameters &#x3D; constructor2.getParameters();&#x2F;&#x2F;获取参数</span><br><span class="line">        for (Parameter parameter:parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;newInstance和setAccessible</span><br><span class="line">        &#x2F;&#x2F;暴力反射：临时取消权限校验</span><br><span class="line">        constructor2.setAccessible(true);&#x2F;&#x2F;使private类型的构造方法可以创建</span><br><span class="line">        Student student&#x3D;(Student) constructor2.newInstance(&quot;张三&quot;,3);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">public reflect.Student(java.lang.String)</span><br><span class="line">public reflect.Student()</span><br><span class="line"></span><br><span class="line">protected reflect.Student(int)</span><br><span class="line">private reflect.Student(java.lang.String,int)</span><br><span class="line">public reflect.Student(java.lang.String)</span><br><span class="line">public reflect.Student()</span><br><span class="line"></span><br><span class="line">public reflect.Student()</span><br><span class="line"></span><br><span class="line">private reflect.Student(java.lang.String,int)</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">java.lang.String arg0</span><br><span class="line">int arg1</span><br><span class="line">Student&#123;name &#x3D; 张三, age &#x3D; 3&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><h4 id="Class类中获取成员变量对象的方法"><a href="#Class类中获取成员变量对象的方法" class="headerlink" title="Class类中获取成员变量对象的方法"></a>Class类中获取成员变量对象的方法</h4><h5 id="getFields"><a href="#getFields" class="headerlink" title="getFields"></a>getFields</h5><p>Field[] getFields()  </p><p><strong>说明</strong>：返回所有公共成员变量对象的数组</p><h5 id="getDeclaredFields"><a href="#getDeclaredFields" class="headerlink" title="getDeclaredFields"></a>getDeclaredFields</h5><p>Field[] getDeclaredFields()  </p><p><strong>说明</strong>：返回所有成员变量对象的数组</p><h5 id="getField"><a href="#getField" class="headerlink" title="getField"></a>getField</h5><p>Field getField(String name)  </p><p><strong>说明</strong>：返回单个公共成员变量对象</p><h5 id="getDeclaredField"><a href="#getDeclaredField" class="headerlink" title="getDeclaredField"></a>getDeclaredField</h5><p>Field getDeclaredField(String name)  </p><p><strong>说明</strong>：返回单个成员变量对象</p><h4 id="Field类中用于创建对象的方法"><a href="#Field类中用于创建对象的方法" class="headerlink" title="Field类中用于创建对象的方法"></a>Field类中用于创建对象的方法</h4><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><p>void set(Object obj,Object value)  </p><p><strong>说明</strong>：赋值</p><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><p>Object get(Object obj)  </p><p><strong>说明</strong>：获取值</p><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz&#x3D;Class.forName(&quot;reflect.Student&quot;);</span><br><span class="line">        &#x2F;&#x2F;getFields</span><br><span class="line">        Field[] fields1 &#x3D; clazz.getFields();</span><br><span class="line">        for (Field field:fields1)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredFields</span><br><span class="line">        Field[] fields2 &#x3D; clazz.getDeclaredFields();</span><br><span class="line">        for (Field field:fields2)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getField</span><br><span class="line">        Field field1&#x3D;clazz.getField(&quot;sex&quot;);</span><br><span class="line">        System.out.println(field1);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredField</span><br><span class="line">        Field field2&#x3D;clazz.getDeclaredField(&quot;name&quot;);</span><br><span class="line">        System.out.println(field2);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;get</span><br><span class="line">        System.out.println(field1.getModifiers());&#x2F;&#x2F;获取变量修饰符</span><br><span class="line">        System.out.println(field1.getName());&#x2F;&#x2F;获取变量名</span><br><span class="line">        Class&lt;?&gt; type &#x3D; field1.getType();&#x2F;&#x2F;获取变量类型</span><br><span class="line">        System.out.println(type);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Student student&#x3D;new Student(&quot;张三&quot;,18,&quot;男&quot;);</span><br><span class="line">        field2.setAccessible(true);</span><br><span class="line">        String s&#x3D;(String)field2.get(student);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        field2.set(student,&quot;李四&quot;);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">public java.lang.String reflect.Student.sex</span><br><span class="line"></span><br><span class="line">private java.lang.String reflect.Student.name</span><br><span class="line">private int reflect.Student.age</span><br><span class="line">public java.lang.String reflect.Student.sex</span><br><span class="line"></span><br><span class="line">public java.lang.String reflect.Student.sex</span><br><span class="line"></span><br><span class="line">private java.lang.String reflect.Student.name</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">sex</span><br><span class="line">class java.lang.String</span><br><span class="line"></span><br><span class="line">张三</span><br><span class="line"></span><br><span class="line">Student&#123;name &#x3D; 李四, age &#x3D; 18, sex &#x3D; 男&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h3><h4 id="Class类中用于获取成员方法的方法"><a href="#Class类中用于获取成员方法的方法" class="headerlink" title="Class类中用于获取成员方法的方法"></a>Class类中用于获取成员方法的方法</h4><h5 id="getMethods"><a href="#getMethods" class="headerlink" title="getMethods"></a>getMethods</h5><p>Method[] getMethods()  </p><p><strong>说明</strong>：返回所有公共成员方法对象的数组，包括继承的</p><h5 id="getDeclaredMethods"><a href="#getDeclaredMethods" class="headerlink" title="getDeclaredMethods"></a>getDeclaredMethods</h5><p>Method[] getDeclaredMethods()  </p><p><strong>说明</strong>：返回所有成员方法对象的数组，不包括继承的</p><h5 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h5><p>Method getMethods(String name,Class&lt;?&gt;…parameterTypes)  </p><p><strong>说明</strong>：返回单个公共成员方法对象</p><h5 id="getDeclaredMethod"><a href="#getDeclaredMethod" class="headerlink" title="getDeclaredMethod"></a>getDeclaredMethod</h5><p>Method getDeclaredMethods(String name,Class&lt;?&gt;…parameterTypes)  </p><p><strong>说明</strong>：返回单个成员方法对象</p><h5 id="Method类中用于创建对象的方法"><a href="#Method类中用于创建对象的方法" class="headerlink" title="Method类中用于创建对象的方法"></a>Method类中用于创建对象的方法</h5><p>Object invoke(Object obj,Object…args);运行方法  </p><p><strong>参数一</strong>：用obj对象调用该方法  </p><p><strong>参数二</strong>：调用方法的传递的参数（若无则不写）  </p><p><strong>返回值</strong>：方法的返回值（若无则不写）  </p><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz&#x3D;Class.forName(&quot;reflect.Student&quot;);</span><br><span class="line">        &#x2F;&#x2F;getMethods</span><br><span class="line">        Method[] methods1 &#x3D; clazz.getMethods();</span><br><span class="line">        for (Method method:methods1)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getDeclaredMethods</span><br><span class="line">        Method[] methods2&#x3D;clazz.getDeclaredMethods();</span><br><span class="line">        for(Method method:methods2)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getMethod</span><br><span class="line">        Method study &#x3D; clazz.getMethod(&quot;study&quot;, String.class);</span><br><span class="line">        System.out.println(study);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;getMethods</span><br><span class="line">        Method eat &#x3D; clazz.getDeclaredMethod(&quot;eat&quot;, String.class,String.class);</span><br><span class="line">        System.out.println(eat);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(eat.getModifiers());&#x2F;&#x2F;获取修饰符</span><br><span class="line">        System.out.println(eat.getName());&#x2F;&#x2F;获取名字</span><br><span class="line">        Parameter[] parameters &#x3D; eat.getParameters();</span><br><span class="line">        for (Parameter parameter:parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class[] exceptionTypes &#x3D; study.getExceptionTypes();</span><br><span class="line">        for (Class ex:exceptionTypes)&#123;</span><br><span class="line">            System.out.println(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Student student&#x3D;new Student(&quot;路人甲&quot;,8);</span><br><span class="line">        eat.setAccessible(true);</span><br><span class="line">        String result&#x3D;(String)eat.invoke(student,&quot;汉堡包&quot;,&quot;可乐&quot;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Student</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String eat(String food,String drink)&#123;</span><br><span class="line">        System.out.println(name+&quot;正在吃&quot;+food+&quot;，正在喝&quot;+drink);</span><br><span class="line">        return &quot;排泄物&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    private String eat(String food)&#123;</span><br><span class="line">        System.out.println(name+&quot;正在吃&quot;+food);</span><br><span class="line">        return &quot;排泄物&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public void study(String name)throws IOException,ArrayIndexOutOfBoundsException &#123;</span><br><span class="line">        System.out.println(name+&quot;正在学习&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">public java.lang.String reflect.Student.toString()</span><br><span class="line">public java.lang.String reflect.Student.getName()</span><br><span class="line">public void reflect.Student.setName(java.lang.String)</span><br><span class="line">public int reflect.Student.getAge()</span><br><span class="line">public void reflect.Student.setAge(int)</span><br><span class="line">public void reflect.Student.study(java.lang.String) throws java.io.IOException,java.lang.ArrayIndexOutOfBoundsException</span><br><span class="line">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">public native int java.lang.Object.hashCode()</span><br><span class="line">public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">public final native void java.lang.Object.notify()</span><br><span class="line">public final native void java.lang.Object.notifyAll()</span><br><span class="line"></span><br><span class="line">public java.lang.String reflect.Student.toString()</span><br><span class="line">public java.lang.String reflect.Student.getName()</span><br><span class="line">public void reflect.Student.setName(java.lang.String)</span><br><span class="line">public int reflect.Student.getAge()</span><br><span class="line">public void reflect.Student.setAge(int)</span><br><span class="line">private java.lang.String reflect.Student.eat(java.lang.String)</span><br><span class="line">private java.lang.String reflect.Student.eat(java.lang.String,java.lang.String)</span><br><span class="line">public void reflect.Student.study(java.lang.String) throws java.io.IOException,java.lang.ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">public void reflect.Student.study(java.lang.String) throws java.io.IOException,java.lang.ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">private java.lang.String reflect.Student.eat(java.lang.String,java.lang.String)</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">eat</span><br><span class="line">java.lang.String arg0</span><br><span class="line">java.lang.String arg1</span><br><span class="line">class java.io.IOException</span><br><span class="line">class java.lang.ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">路人甲正在吃汉堡包，正在喝可乐</span><br><span class="line">排泄物</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对于任意一个对象，都可以吧对象的所有字段名和值，保存到文件中去</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, IllegalAccessException &#123;</span><br><span class="line">        Student s&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Teacher t&#x3D;new Teacher(&quot;李四&quot;,19999.0,3,11);</span><br><span class="line">        &#x2F;&#x2F;saveFile(t);</span><br><span class="line">        &#x2F;&#x2F;saveFIle(s)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void saveFile(Object obj) throws IOException, IllegalAccessException &#123;</span><br><span class="line">        BufferedWriter bw&#x3D;new BufferedWriter(new FileWriter(&quot;a.txt&quot;));</span><br><span class="line">        Class clazz &#x3D; obj.getClass();</span><br><span class="line">        Field[] fields &#x3D; clazz.getDeclaredFields();</span><br><span class="line">        for (Field field:fields)&#123;</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            String name &#x3D; field.getName();</span><br><span class="line">            Object value &#x3D; field.get(obj);</span><br><span class="line">            bw.write(name+&quot;&#x3D;&quot;+value);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Teacher.java</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private double salary;</span><br><span class="line">    private int id;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Teacher() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Teacher(String name, double salary, int id, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return salary</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param salary</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setSalary(double salary) &#123;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Teacher&#123;name &#x3D; &quot; + name + &quot;, salary &#x3D; &quot; + salary + &quot;, id &#x3D; &quot; + id + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">若是执行saveFile(t)</span><br><span class="line">a.txt内容为</span><br><span class="line">name&#x3D;李四</span><br><span class="line">salary&#x3D;19999.0</span><br><span class="line">id&#x3D;3</span><br><span class="line">age&#x3D;11</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">若是执行saveFile(s)</span><br><span class="line">a.txt内容为</span><br><span class="line">name&#x3D;张三</span><br><span class="line">age&#x3D;18</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;反射可以跟配置文件结合的方式，动态的创建对象，并调用方法</span><br><span class="line">&#x2F;*properties.properties</span><br><span class="line">classname&#x3D;reflect.Teacher</span><br><span class="line">method&#x3D;teach</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(&quot;学习&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Teacher.java</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private double salary;</span><br><span class="line">    private int id;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Teacher() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Teacher(String name, double salary, int id, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return salary</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param salary</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setSalary(double salary) &#123;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param id</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Teacher&#123;name &#x3D; &quot; + name + &quot;, salary &#x3D; &quot; + salary + &quot;, id &#x3D; &quot; + id + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public void teach()&#123;</span><br><span class="line">        System.out.println(&quot;教学&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Properties pro&#x3D;new Properties();</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(&quot;properties.properties&quot;);</span><br><span class="line">        pro.load(fis);</span><br><span class="line">        fis.close();</span><br><span class="line">        String name&#x3D;(String) pro.get(&quot;classname&quot;);</span><br><span class="line">        String method&#x3D;(String)pro.get(&quot;method&quot;);</span><br><span class="line">        Class clazz&#x3D;Class.forName(name);</span><br><span class="line">        Constructor constructor &#x3D; clazz.getDeclaredConstructor();</span><br><span class="line">        Object o &#x3D; constructor.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        Method method1 &#x3D; clazz.getDeclaredMethod(method);</span><br><span class="line">        method1.setAccessible(true);</span><br><span class="line">        method1.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Teacher&#123;name &#x3D; null, salary &#x3D; 0.0, id &#x3D; 0, age &#x3D; 0&#125;</span><br><span class="line">教学</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理可以无侵入式（不改变原有代码）的给对象增强其他功能。  </p><p>对象若嫌身上干的事太多，可通过代理转移部分职责。  </p><p>对象若有方法要被代理，代理则一定要有对应的方法。  </p><p>调用者调用对象的方法时，是由调用者先调用代理的方法，再由代理调用对象的方法。  </p><p><strong>代理长什么样：</strong>代理里面是对象要被代理的方法。  </p><p>java通过接口保证代理的样子，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。  </p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>java.lang.reflect.Proxy类：提供为对象产生代理对象的方法:  </p><p>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)  </p><p><strong>参数一</strong>：用于指定用哪个类加载器，去加载生成的代理类  </p><p><strong>参数二</strong>：指定接口，这些接口用于指定生成的代理长什么样，也就是有哪些方法  </p><p><strong>参数三</strong>：用来指定生成的代理对象要干什么事情  </p><h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Cinema.java</span><br><span class="line">public class Cinema implements CinemaExtend&#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Cinema() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String watchMovie()&#123;</span><br><span class="line">        System.out.println(&quot;进入&quot;+name+&quot;电影院&quot;);</span><br><span class="line">        return &quot;看电影&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eatPopcorn(String audience)&#123;</span><br><span class="line">        System.out.println(audience+&quot;吃爆米花&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Cinema(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Cinema&#123;name &#x3D; &quot; + name + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;CinemaExtend.java</span><br><span class="line">public interface CinemaExtend &#123;</span><br><span class="line">    public abstract String watchMovie();</span><br><span class="line">    public abstract void eatPopcorn(String audience);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;ProxyUtil.java</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">public class ProxyUtil &#123;</span><br><span class="line">    public static CinemaExtend createProxy(Cinema cinema)&#123;</span><br><span class="line">        CinemaExtend cinemaExtend&#x3D;(CinemaExtend)Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),</span><br><span class="line">                new Class[]&#123;CinemaExtend.class&#125;, new InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                        if(&quot;watchMovie&quot;.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(&quot;买电影票&quot;);</span><br><span class="line">                        &#125;else if(&quot;eatPopcorn&quot;.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(&quot;买爆米花&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        return method.invoke(cinema,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        return cinemaExtend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Cinema cinema&#x3D;new Cinema(&quot;万达&quot;);</span><br><span class="line">        CinemaExtend ce&#x3D;ProxyUtil.createProxy(cinema);</span><br><span class="line">        ce.eatPopcorn(&quot;路人甲&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(ce.watchMovie());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">买爆米花</span><br><span class="line">路人甲吃爆米花</span><br><span class="line"></span><br><span class="line">买电影票</span><br><span class="line">进入万达电影院</span><br><span class="line">看电影</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程（二十）</title>
      <link href="2023/04/08/J20/"/>
      <url>2023/04/08/J20/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程（二十）"><a href="#网络编程（二十）" class="headerlink" title="网络编程（二十）"></a>网络编程（二十）</h1><p><strong>网络编程</strong>：计算机与计算机之间通过网络进行数据传输。  </p><p>Java中可以使用java.net包下的技术开发出常见的网络应用程序。  </p><h2 id="常见的软件架构"><a href="#常见的软件架构" class="headerlink" title="常见的软件架构"></a>常见的软件架构</h2><h3 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h3><p>CS，Client/Server，客户端/服务器，在用户本地需要下载并安装客户端程序，在远程有一个服务器端程序。  </p><p>通过客户端访问服务器。  </p><p>适合定制专业化的办公类软件，例如：IDEA，网游  </p><p><strong>优点</strong>：</p><ol><li>不需开发客户端，只需开发服务端</li><li>用户不需下载，打开浏览器即可使用</li></ol><p><strong>缺点</strong>：若应用过大，用户体验会受到影响。</p><h3 id="BS"><a href="#BS" class="headerlink" title="BS"></a>BS</h3><p>BS，Brower/Server，浏览器/服务器，只需要一个浏览器，用户通过不同的网址，客户访问不同的服务器。  </p><p>通过浏览器访问服务器。  </p><p>适合移动互联网应用，可以在任何地方任何时间访问的系统。  </p><p><strong>优点</strong>：应用可以非常大，用户体验好。  </p><p><strong>缺点</strong>：</p><ol><li>需开发客户端和服务端</li><li>用户下载和更新时较为麻烦</li></ol><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><ol><li><strong>IP</strong>：设备在网络中的地址，是唯一的标识</li><li><strong>端口号</strong>：应用程序在设备中唯一的标识</li><li><strong>协议</strong>：数据在网络中传输的规则，常见的协议有UDP,TCP,http,https,ftp</li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>全称：Internet Protocol，是互联网协议地址，也称IP地址，是分配给上网设备的数字标签，即上网设备在网络中的地址，是唯一的。  </p><p><strong>常见IP分类</strong>：IPv4，IPv6</p><h4 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h4><p>全称：Internet Protocol Version 4，互联网通信协议第四版，采用32位地址长度，分为4组，每组8位二进制数。  </p><p>可利用<strong>点分十进制表示法</strong>来表示。  </p><p>目前的主流方案，最多只有2^32次方个IP，目前已经用完，现在利用局域网IP解决IP不够的问题。  </p><p><strong>IPv4</strong>的地址分类形式：</p><ul><li>公网地址（万维网使用）和私有地址（局域网使用）</li><li>192.168.开头代表的就是私有地址，范围为192.168.0.0-192.168.255.255，专门为组织机构内部使用，以此节省IP。</li></ul><p><strong>特殊IP地址</strong>：127.0.0.1，也可以是localhost，是回送地址也称本地回环地址，也称本机IP，永远只会寻找当前所在本机。</p><h4 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h4><p>全称：Internet Protocol Version 6，互联网通信协议第六版，采用128位地址长度，分为8组，每组16位二进制数。  </p><p>可利用<strong>冒分十六进制表示法</strong>。  </p><p>最多有2^128次方个IP。</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>由两个字节表示的整数，取值范围：0-65535  </p><p>其中0-1023之间的端口用于一些知名的网络服务或应用，我们自己使用1024以上的端口号就可以了。  </p><p><strong>注</strong>：一个端口号只能被一个应用程序使用</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>计算机网络中，连接和通信的规则被称为网络通信协议。  </p><ul><li><strong>OSI参考模型</strong>：世界互联协议标准，全球通信规范，单模型过于理想化，未在因特网上进行广泛传播<ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网路层</li><li>数据链路层</li><li>物理层</li></ul></li><li><strong>TCP/IP参考模型</strong>：或TCP/IP协议，事实上的国际标准<ul><li>应用层：HTTP,FTP,Telnet,DNS…</li><li>传输层：TCP,UDP…</li><li>网络互联层：IP,ICMP,ARP…</li><li>网络接入层：硬件设备0101010….</li></ul></li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>用户数据报协议，User Datagram Protocol  </p><p>UDP是<strong>面向无连接</strong>（不管是否连接成功）的通信协议。  </p><p>速度快，有大小限制，一次最多发64K，数据不安全，易丢失数据。</p><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>传输控制协议，Transmission Control Protocol  </p><p>TCP协议是<strong>面向连接</strong>（确保连接成功）的通信协议。  </p><p>速度慢，无大小限制，数据安全。</p><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p>此类表示互联网协议（IP）的地址，该类并未对外提供构造方法，需要通过静态方法getByName获取对象。  </p><p><strong>InetAddress</strong>有两个子类：Inet4Address，Inet6Address</p><p><strong>getByName方法</strong>会判断是使用的IPv4还是IPv6。  </p><p>若是IPv4则会创建Inet4Address对象进行返回。  </p><p>若是IPv6则会创建Inet6Address对象进行返回。  </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="getByName"><a href="#getByName" class="headerlink" title="getByName"></a>getByName</h4><p><strong>格式</strong>：  </p><p>static InetAddress getByName(String host)  </p><p><strong>说明</strong>：确定主机名称的IP地址，主机名称可以是机器名称，也可以是IP地址。</p><h4 id="getHostName"><a href="#getHostName" class="headerlink" title="getHostName"></a>getHostName</h4><p><strong>格式</strong>：  </p><p>String getHostName()  </p><p><strong>说明</strong>：获取此IP地址的主机名</p><h4 id="getHostAddress"><a href="#getHostAddress" class="headerlink" title="getHostAddress"></a>getHostAddress</h4><p><strong>格式</strong>：  </p><p>String getHostAddress()  </p><p><strong>说明</strong>：返回文本显示中的IP地址字符串</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws UnknownHostException &#123;</span><br><span class="line">        InetAddress address1&#x3D;InetAddress.getByName(&quot;192.168.19.1&quot;);</span><br><span class="line">        System.out.println(address1);&#x2F;&#x2F;打印出 &#x2F;IP地址</span><br><span class="line">        System.out.println(address1.getHostAddress());&#x2F;&#x2F;打印出IP地址</span><br><span class="line">        System.out.println(address1.getHostName());&#x2F;&#x2F;打印出设备名称</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        InetAddress address2&#x3D;InetAddress.getByName(&quot;DESKTOP-FAEF9UU&quot;);</span><br><span class="line">        System.out.println(address2);&#x2F;&#x2F;打印出 设备名&#x2F;IP地址</span><br><span class="line">        System.out.println(address2.getHostAddress());&#x2F;&#x2F;打印出IP地址</span><br><span class="line">        System.out.println(address2.getHostName());&#x2F;&#x2F;打印出设备名称</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h2><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p><strong>步骤</strong>：</p><ol><li>创建发送端的DatagramSocket对象<ul><li>绑定端口，以后我们就是通过这个端口往外发送</li><li>空参：所有可用的端口中随机一个进行使用</li><li>有参：指定端口号进行使用</li></ul></li><li>数据打包DatagramPacket</li><li>发送数据</li><li>释放资源</li></ol><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><p><strong>步骤</strong>：</p><ol><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ol><h3 id="范例1"><a href="#范例1" class="headerlink" title="范例1"></a>范例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;必须先执行接收文件，再执行发送文件</span><br><span class="line">&#x2F;&#x2F;ReceiveMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line"></span><br><span class="line">public class ReceiveMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket(10086);</span><br><span class="line"></span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length);</span><br><span class="line">        ds.receive(dp);</span><br><span class="line"></span><br><span class="line">        byte[] data&#x3D;dp.getData();</span><br><span class="line">        int length&#x3D;dp.getLength();</span><br><span class="line">        InetAddress address &#x3D;dp.getAddress();</span><br><span class="line">        int port&#x3D;dp.getPort();</span><br><span class="line">        System.out.println(&quot;接收到数据&quot;+new String(data,0,length));</span><br><span class="line">        System.out.println(&quot;该数据是从&quot;+address+&quot;电脑中端口为&quot;+port+&quot;的位置发出&quot;);</span><br><span class="line"></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">接收到数据你好</span><br><span class="line">该数据是从&#x2F;127.0.0.1电脑中端口为52727的位置发出</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;SendMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line"></span><br><span class="line">public class SendMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建DatagramSocket对象</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.打包数据</span><br><span class="line">        InetAddress address&#x3D;InetAddress.getByName(&quot;127.0.0.1&quot;);</span><br><span class="line">        String s&#x3D;&quot;你好&quot;;</span><br><span class="line">        byte[] bytes&#x3D;s.getBytes();</span><br><span class="line">        int port&#x3D;10086;</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length,address,port);</span><br><span class="line">        &#x2F;&#x2F;3.发送数据</span><br><span class="line">        ds.send(dp);</span><br><span class="line">        &#x2F;&#x2F;4.释放数据</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范例2"><a href="#范例2" class="headerlink" title="范例2"></a>范例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按照下面的要求实现程序</span><br><span class="line">&#x2F;&#x2F;UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span><br><span class="line">&#x2F;&#x2F;UDP接收数据：因为接收端不知道发送端什么时候停止，故采用死循环</span><br><span class="line">&#x2F;&#x2F;SendMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SendMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket();</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;请输入你要传输的数据：&quot;);</span><br><span class="line">            String s&#x3D;sc.nextLine();</span><br><span class="line">            byte[] bytes&#x3D;s.getBytes();</span><br><span class="line">            InetAddress address&#x3D;InetAddress.getByName(&quot;127.0.0.1&quot;);</span><br><span class="line">            int port&#x3D;10086;</span><br><span class="line">            DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length,address,port);</span><br><span class="line">            ds.send(dp);</span><br><span class="line">            if(s.equals(&quot;886&quot;))&#123;</span><br><span class="line">                System.out.println(&quot;通讯结束&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ReceiveMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line">public class ReceiveMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket(10086);</span><br><span class="line">        byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">        DatagramPacket dp &#x3D; new DatagramPacket(bytes, bytes.length);</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            int port &#x3D; dp.getPort();</span><br><span class="line">            String address &#x3D; dp.getAddress().getHostAddress();</span><br><span class="line">            String name &#x3D; dp.getAddress().getHostName();</span><br><span class="line">            byte[] data &#x3D; dp.getData();</span><br><span class="line">            int len &#x3D; dp.getLength();</span><br><span class="line">            System.out.println(&quot;接收到数据：&quot;);</span><br><span class="line">            String s &#x3D; new String(data, 0, len);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(&quot;该数据来自&quot; + address + &quot;主机名&quot;+name+&quot;端口为&quot; + port + &quot;的位置&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><ol><li>单播：只给一个网络设备发送数据，之前的两个范例便时单播</li><li>组播：给一组网络设备发送数据<ul><li>组播地址：224.0.0.0-239.255.255.255，其中224.0.0.0-224.0.0.255为预留的组播地址</li><li>组播接收端：不创建DatagramSocket对象，而需要创建MulticastSocket对象，且需要将当前本机添加到指定组中</li><li>组播发送端：不创建DatagramSocket对象，而需要创建MulticastSocket对象，需将目的地址改成组播地址</li></ul></li><li>广播：给局域网内所有网络设备发送数据<ul><li>广播地址：255.255.255.255</li><li>和单播大致没区别，只需要把地址目的地址改为255.255.255.0</li></ul></li></ol><h4 id="组播范例"><a href="#组播范例" class="headerlink" title="组播范例"></a>组播范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;SendMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.MulticastSocket;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SendMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        MulticastSocket ms&#x3D;new MulticastSocket();</span><br><span class="line">        System.out.print(&quot;请输入数据：&quot;);</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        String s&#x3D;sc.nextLine();</span><br><span class="line">        byte[] bytes&#x3D;s.getBytes();</span><br><span class="line">        InetAddress address&#x3D;InetAddress.getByName(&quot;224.0.0.1&quot;);</span><br><span class="line">        int port&#x3D;10086;</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length,address,port);</span><br><span class="line">        ms.send(dp);</span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ReceiveMessageDemo1.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line">public class ReceiveMessageDemo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        MulticastSocket ms&#x3D;new MulticastSocket(10086);</span><br><span class="line"></span><br><span class="line">        InetAddress address&#x3D;InetAddress.getByName(&quot;224.0.0.1&quot;);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length);</span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        int port&#x3D;dp.getPort();</span><br><span class="line">        String sendAddress&#x3D;dp.getAddress().getHostAddress();</span><br><span class="line">        String sendName&#x3D;dp.getAddress().getHostName();</span><br><span class="line">        int len&#x3D;dp.getLength();</span><br><span class="line">        byte[] data &#x3D; dp.getData();</span><br><span class="line">        String s &#x3D; new String(data, 0, len);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(&quot;该数据来自&quot; + sendAddress + &quot;主机名&quot;+sendName+&quot;端口为&quot; + port + &quot;的位置&quot;);</span><br><span class="line"></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ReceiveMessageDemo2.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line">public class ReceiveMessageDemo2 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        MulticastSocket ms&#x3D;new MulticastSocket(10086);</span><br><span class="line"></span><br><span class="line">        InetAddress address&#x3D;InetAddress.getByName(&quot;224.0.0.1&quot;);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length);</span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        int port&#x3D;dp.getPort();</span><br><span class="line">        String sendAddress&#x3D;dp.getAddress().getHostAddress();</span><br><span class="line">        String sendName&#x3D;dp.getAddress().getHostName();</span><br><span class="line">        int len&#x3D;dp.getLength();</span><br><span class="line">        byte[] data &#x3D; dp.getData();</span><br><span class="line">        String s &#x3D; new String(data, 0, len);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(&quot;该数据来自&quot; + sendAddress + &quot;主机名&quot;+sendName+&quot;端口为&quot; + port + &quot;的位置&quot;);</span><br><span class="line"></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广播范例"><a href="#广播范例" class="headerlink" title="广播范例"></a>广播范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;SendMessageDemo.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.*;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class SendMessageDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket();</span><br><span class="line"></span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入数据：&quot;);</span><br><span class="line">        String s&#x3D;sc.nextLine();</span><br><span class="line">        byte[] bytes&#x3D;s.getBytes();</span><br><span class="line">        InetAddress address&#x3D;InetAddress.getByName(&quot;255.255.255.255&quot;);</span><br><span class="line">        int port&#x3D;10086;</span><br><span class="line">        DatagramPacket dp&#x3D;new DatagramPacket(bytes,bytes.length,address,port);</span><br><span class="line">        ds.send(dp);</span><br><span class="line">        ds.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ReceiveMessageDemo1.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line">public class ReceiveMessageDemo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        DatagramSocket ds&#x3D;new DatagramSocket(10086);</span><br><span class="line">        byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">        DatagramPacket dp &#x3D; new DatagramPacket(bytes, bytes.length);</span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        int port &#x3D; dp.getPort();</span><br><span class="line">        String address &#x3D; dp.getAddress().getHostAddress();</span><br><span class="line">        String name &#x3D; dp.getAddress().getHostName();</span><br><span class="line">        byte[] data &#x3D; dp.getData();</span><br><span class="line">        int len &#x3D; dp.getLength();</span><br><span class="line">        System.out.println(&quot;接收到数据：&quot;);</span><br><span class="line">        String s &#x3D; new String(data, 0, len);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(&quot;该数据来自&quot; + address + &quot;主机名&quot;+name+&quot;端口为&quot; + port + &quot;的位置&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立一个Socket对象。  </p><p>通信之前要保证连接已经建立。  </p><p>通过Socket产生IO流来进行网络通信。  </p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ol><li>客户端向服务器发出连接请求，等待服务器确认</li><li>服务器向客户端返回一个响应，告诉客户端收到了请求</li><li>客户端向服务器再次发出确认信息，连接建立</li></ol><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ol><li>客户端向服务器发出取消连接请求</li><li>服务器向客户端返回一个响应，表示收到客户端取消请求，随后服务器将最后的数据处理完毕。</li><li>服务器向客户端发送确认取消信息</li><li>客户端再次发送确认信息，连接取消</li></ol><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><p><strong>客户端</strong>：</p><ol><li>创建客户的Socket对象(Socket)与指定服务端连接，三次握手协议保证连接建立，若连接不上，代码会报错<ul><li>Socket(String host,int port)</li></ul></li><li>获取输出流，写数据<ul><li>OutputStream getOutputStream()</li></ul></li><li>释放资源，利用四次挥手协议断开连接，且确保连接通道里的数据已经处理完毕<ul><li>void close()</li></ul></li></ol><p><strong>服务器</strong>：</p><ol><li>创建服务端的Socket对象(ServerSocket)<ul><li>ServerSocket(int port)</li></ul></li><li>监听客户单连接，返回一个Socket对象<ul><li>Socket accept()</li></ul></li><li>获取输入流，读数据，并把数据显示在控制台<ul><li>InputStream getInputStream</li></ul></li><li>释放资源<ul><li>void close()</li></ul></li></ol><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需要先运行服务端</span><br><span class="line">&#x2F;&#x2F;client.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket socket&#x3D;new Socket(&quot;127.0.0.1&quot;,10086);</span><br><span class="line">        String s&#x3D;&quot;hello!你好！&quot;;</span><br><span class="line">        OutputStream os&#x3D;socket.getOutputStream();</span><br><span class="line">        os.write(s.getBytes());</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Server.java</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        Socket accept &#x3D; ss.accept();</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new InputStreamReader(accept.getInputStream()));</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;br.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;多发多收</span><br><span class="line">&#x2F;&#x2F;客户端：多次发送数据</span><br><span class="line">&#x2F;&#x2F;服务器多次接收数据，并打印</span><br><span class="line">&#x2F;&#x2F;Client.java</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket socket&#x3D;new Socket(&quot;127.0.0.1&quot;,10086);</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        OutputStream os&#x3D;socket.getOutputStream();</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;请输入数据:&quot;);</span><br><span class="line">            String s&#x3D;sc.nextLine();</span><br><span class="line">            if(s.equals(&quot;886&quot;))&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(s.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Server.java</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        Socket socket&#x3D;ss.accept();</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;br.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*client的运行</span><br><span class="line">请输入数据:saf</span><br><span class="line">请输入数据:453</span><br><span class="line">请输入数据:996</span><br><span class="line">请输入数据:886</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*Server的运行</span><br><span class="line">saf453996</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接收与反馈</span><br><span class="line">&#x2F;&#x2F;客户端：发送一条消息，接收服务端反馈的消息并打印</span><br><span class="line">&#x2F;&#x2F;服务器：接收数据并打印，在给客户端反馈消息</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Server.java</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建对象并绑定10086接口</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        &#x2F;&#x2F;2.等待客户端连接</span><br><span class="line">        Socket s&#x3D;ss.accept();</span><br><span class="line">        &#x2F;&#x2F;3.socket中获取输入流读取数据</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(s.getInputStream()));</span><br><span class="line">        int ch;</span><br><span class="line">        &#x2F;&#x2F;细节：read方法会从接连通道中读取数据</span><br><span class="line">        &#x2F;&#x2F;需要有一个结束标记，此处循环才会停止</span><br><span class="line">        &#x2F;&#x2F;程序就会一直挺爱read方法这里，等待读取下面的数据</span><br><span class="line">        while ((ch&#x3D;br.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;4.回写数据</span><br><span class="line">        OutputStream os &#x3D; s.getOutputStream();</span><br><span class="line">        os.write(&quot;服务端已收到消息&quot;.getBytes());</span><br><span class="line">        &#x2F;&#x2F;5.释放资源</span><br><span class="line">        s.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Client.java</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建socket对象连接客户端</span><br><span class="line">        Socket s&#x3D;new Socket(&quot;127.0.0.1&quot;,10086);</span><br><span class="line">        &#x2F;&#x2F;2.写出数据</span><br><span class="line">        OutputStream os &#x3D; s.getOutputStream();</span><br><span class="line">        os.write(&quot;你好&quot;.getBytes());</span><br><span class="line">        &#x2F;&#x2F;3.写出一个结束标记</span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;4.接收服务端回写的数据</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new InputStreamReader(s.getInputStream()));</span><br><span class="line">        int ch;</span><br><span class="line">        while ((ch&#x3D;br.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;5.释放资源</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*Server收到的消息</span><br><span class="line">你好</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*Client发送的消息</span><br><span class="line">服务端已收到消息</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;上传文件</span><br><span class="line">&#x2F;&#x2F;客户端：将本地文件上传到服务器，接收服务器的反馈</span><br><span class="line">&#x2F;&#x2F;服务器：接收客户端上传的文件，上传完毕后给出反馈</span><br><span class="line">&#x2F;&#x2F;服务器接收后文件是唯一的，每次接收的内容一样，文件名不一样</span><br><span class="line">&#x2F;&#x2F;利用UUID类的randomUUID方法实现，UUID表示通用唯一标识符UUID类，UUID表示一个128位的值）</span><br><span class="line">&#x2F;&#x2F;Server.java</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        Socket accept &#x3D; ss.accept();</span><br><span class="line">        BufferedInputStream bis &#x3D; new BufferedInputStream(accept.getInputStream());</span><br><span class="line">        String name&#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">        BufferedOutputStream bos &#x3D; new BufferedOutputStream(new FileOutputStream(&quot;serverphoto\\&quot;+name+&quot;.jpg&quot;));</span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;bis.read(bytes))!&#x3D;-1)&#123;</span><br><span class="line">            bos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedWriter bw&#x3D;new BufferedWriter(new OutputStreamWriter(accept.getOutputStream()));</span><br><span class="line">        bw.write(&quot;上传成功&quot;);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Client.java</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket s&#x3D;new Socket(&quot;127.0.0.1&quot;,10086);</span><br><span class="line">        BufferedInputStream bis&#x3D;new BufferedInputStream(new FileInputStream(&quot;clientphoto\\photo.jpg&quot;));</span><br><span class="line">        BufferedOutputStream bos &#x3D; new BufferedOutputStream(s.getOutputStream());</span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;bis.read(bytes))!&#x3D;-1)&#123;</span><br><span class="line">            bos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.flush();</span><br><span class="line">        s.shutdownOutput();</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(s.getInputStream()));</span><br><span class="line">        String str&#x3D;br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        br.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;上传文件（多线程版）</span><br><span class="line">&#x2F;&#x2F;若服务器不停止，能接收很多用户上传的图片</span><br><span class="line">&#x2F;&#x2F;提示：可用循环或多线程，但循环不合理，最优解法（循环+多线程+线程池）改写</span><br><span class="line">&#x2F;&#x2F;Server.java</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ThreadPoolExecutor pool&#x3D;new ThreadPoolExecutor(</span><br><span class="line">                3,</span><br><span class="line">                16,</span><br><span class="line">                60,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                new ArrayBlockingQueue&lt;&gt;(2),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                new ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">        );</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Socket accept&#x3D;ss.accept();</span><br><span class="line">            pool.execute(new MyRunnable(accept));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Client.java</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Socket s&#x3D;new Socket(&quot;127.0.0.1&quot;,10086);</span><br><span class="line">        BufferedInputStream bis&#x3D;new BufferedInputStream(new FileInputStream(&quot;clientphoto\\photo.jpg&quot;));</span><br><span class="line">        BufferedOutputStream bos &#x3D; new BufferedOutputStream(s.getOutputStream());</span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;bis.read(bytes))!&#x3D;-1)&#123;</span><br><span class="line">            bos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.flush();</span><br><span class="line">        s.shutdownOutput();</span><br><span class="line">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(s.getInputStream()));</span><br><span class="line">        String str&#x3D;br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        br.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;BS,接收浏览器的消息并打印</span><br><span class="line">&#x2F;&#x2F;无需写客户端</span><br><span class="line">&#x2F;&#x2F;服务器：接收数据并打印</span><br><span class="line">&#x2F;&#x2F;在浏览器搜索 127.0.0.1:端口号</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket ss&#x3D;new ServerSocket(10086);</span><br><span class="line">        Socket accept &#x3D; ss.accept();</span><br><span class="line">        InputStreamReader isr &#x3D; new InputStreamReader(accept.getInputStream());</span><br><span class="line"></span><br><span class="line">        int ch;</span><br><span class="line">        while ((ch&#x3D;isr.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        accept.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程（十九）</title>
      <link href="2023/04/06/J19/"/>
      <url>2023/04/06/J19/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程（十九）"><a href="#多线程（十九）" class="headerlink" title="多线程（十九）"></a>多线程（十九）</h1><p><strong>进程</strong>：进程是程序的基本执行实体。  </p><p><strong>线程</strong>：线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中实际运作单位，简单理解为在应用软件中互相独立，可以同时运行的功能。  </p><p>有了<strong>多线程</strong>，可让程序同时做多件事情，<strong>多线程</strong>可以提高效率，若想让多个事情同时运行就需要用到多线程，比如：软件中的耗时操作，所有的聊天软件，所有的服务器。  </p><p><strong>并发</strong>：在同一时刻，有多个指令在单个CPU上交替执行。  </p><p><strong>并行</strong>：在同一时刻，有多个指令在单个CPU上同时执行。  </p><p><strong>线程的调度</strong></p><ol><li><strong>抢占式调度</strong>：指优先让可运行池中优先级高的线程占用CPU，优先级并不绝对，只不过优先级越高，占用CPU的概率越高。</li><li><strong>分时调度</strong>：又称非抢占式调度，指让所有线程轮流获得cpu的使用权。</li></ol><h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><p>线程是程序中的执行线程，java虚拟机允许应用程序并发地运行多个执行线程。</p><ol><li>继承Thread类的方式进行实现</li><li>实现Runnable接口的方式进行实现</li><li>利用Callable接口和Future接口方式实现</li></ol><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p><strong>步骤</strong>：</p><ol><li>定义一个类继承Thread</li><li>重写run方法</li><li>创建子类对象，并启动线程（利用start方法启动，run方法会自动调用）</li></ol><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Function f1&#x3D;new Function();</span><br><span class="line">        Function f2&#x3D;new Function();</span><br><span class="line">        f1.setName(&quot;线程1&quot;);</span><br><span class="line">        f2.setName(&quot;线程2&quot;);</span><br><span class="line">        f1.start();</span><br><span class="line">        f2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Function.java</span><br><span class="line">public class Function extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(getName()+&quot;执行&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程1执行</span><br><span class="line">线程2执行</span><br><span class="line">线程1执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p><strong>步骤</strong>：</p><ol><li>定义一个类实现Runnable接口</li><li>重写里面的run方法</li><li>创建自己类的对象</li><li>创建一个Thread类的对象，并开启线程</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建function对象，表示多线程要执行的任务</span><br><span class="line">        Function f&#x3D;new Function();</span><br><span class="line">        &#x2F;&#x2F;创建线程对象</span><br><span class="line">        Thread t1&#x3D;new Thread(f);</span><br><span class="line">        Thread t2&#x3D;new Thread(f);</span><br><span class="line">        &#x2F;&#x2F;给线程设置名字</span><br><span class="line">        t1.setName(&quot;线程1&quot;);</span><br><span class="line">        t2.setName(&quot;线程2&quot;);</span><br><span class="line">        &#x2F;&#x2F;开启线程</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Function.java</span><br><span class="line">public class Function implements Runnable &#123;</span><br><span class="line">    &#x2F;&#x2F;线程要执行的代码</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        &#x2F;&#x2F;获取当前线程的对象</span><br><span class="line">        Thread t&#x3D;Thread.currentThread();</span><br><span class="line">        for (int i&#x3D;0;i&lt;10;i++) &#123;</span><br><span class="line">            System.out.println(t.getName()+&quot;执行&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程2执行</span><br><span class="line">线程1执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程2执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">线程1执行</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Callable接口和Future接口方式实现"><a href="#Callable接口和Future接口方式实现" class="headerlink" title="Callable接口和Future接口方式实现"></a>Callable接口和Future接口方式实现</h3><p><strong>特点</strong>：可获取多线程运行的结果  </p><p><strong>步骤</strong>：</p><ol><li>创建一个类MyCallable类实现Callable接口，其中泛型便是多线程运行的结果类型</li><li>重写Call方法（具有返回值，表示多线程运行的结果）</li><li>创建MyCallable的对象（表示多线程要执行的任务）</li><li>创建FutureTask的对象（作用为管理多线程运行的结果）</li><li>创建Thread对象，并启动（表示线程）</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyCallable.java</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line">public class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;100;i++)&#123;</span><br><span class="line">            sum+&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建一个类MyCallable实现Callable接口</span><br><span class="line">        MyCallable mc&#x3D;new MyCallable();</span><br><span class="line">        &#x2F;&#x2F;创建FutureTask的对象（作用为管理多线程运行的结果）</span><br><span class="line">        FutureTask&lt;Integer&gt; ft&#x3D;new FutureTask&lt;&gt;(mc);</span><br><span class="line">        &#x2F;&#x2F;创建线程的对象</span><br><span class="line">        Thread t&#x3D;new Thread(ft);</span><br><span class="line">        &#x2F;&#x2F;启动线程</span><br><span class="line">        t.start();</span><br><span class="line">        &#x2F;&#x2F;获取多线程运行的结果</span><br><span class="line">        Integer integer &#x3D; ft.get();</span><br><span class="line">        System.out.println(integer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">5050</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h3><ul><li><p>继承Thread类</p><ul><li><strong>优点</strong>：编程比较简单，可直接使用Thread类的方法</li><li><strong>缺点</strong>：可扩展性差，不能再继承其他类</li></ul></li><li><p>实现Runnable接口</p><ul><li><strong>优点</strong>：扩展性强，实现该接口的同时还可以继承其他类</li><li><strong>缺点</strong>：编程相对复杂，不能直接使用Thread类中的方法</li></ul></li><li><p>实现Callable接口</p><ul><li><strong>优点</strong>：扩展性强，实现该接口的同时还可以继承其他类，可获取多线程运行的结果 </li><li><strong>缺点</strong>：编程相对复杂，不能直接使用Thread类中的方法</li></ul></li></ul><h2 id="常见成员方法"><a href="#常见成员方法" class="headerlink" title="常见成员方法"></a>常见成员方法</h2><h3 id="getName"><a href="#getName" class="headerlink" title="getName"></a>getName</h3><p>String getName()  </p><p><strong>说明</strong>：返回此线程的名称，若没有给线程设置名字，线程也是有默认名字的，默认名字格式：Thread-X（X序号，从0开始）</p><h3 id="setName"><a href="#setName" class="headerlink" title="setName"></a>setName</h3><p>void setName(String name)  </p><p><strong>说明</strong>：设置线程名字（构造方法也可以设置名字）</p><h3 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread"></a>currentThread</h3><p>static Thread currentThread()  </p><p><strong>说明</strong>：获取当前线程的对象，当虚拟机启动后，会自动启用多条线程，其中一条叫做main线程，它的作用便是调用main方法，并执行其中代码。</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>static void sleep(long time)  </p><p><strong>说明</strong>：让线程休眠指定的时间，单位为毫秒（1秒等于1000毫秒），哪条线程执行到这个方法，那么哪条线程就会在这里停留对应的时间。</p><h3 id="setPriority"><a href="#setPriority" class="headerlink" title="setPriority"></a>setPriority</h3><p>setPriority(int newPriority)  </p><p><strong>说明</strong>：设置线程的优先级，优先级最高位10，最低为1，默认为5</p><h3 id="getPriority"><a href="#getPriority" class="headerlink" title="getPriority"></a>getPriority</h3><p>final int getPriority()  </p><p><strong>说明</strong>：获取线程的优先级</p><h3 id="setDaemon"><a href="#setDaemon" class="headerlink" title="setDaemon"></a>setDaemon</h3><p>final void setDaemon(boolean on)  </p><p><strong>说明</strong>：设置守护线程，当其他非守护线程执行完毕后，守护线程会陆续结束。</p><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>public static void yield()  </p><p><strong>说明</strong>：出让线程/礼让线程</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>public final void join()  </p><p><strong>说明</strong>：插入线程/插队线程。表示把调用该方法的线程插入到当前线程之前</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">    public MyThread() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyThread(String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(5000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;getName默认</span><br><span class="line">        MyThread mt1&#x3D;new MyThread();</span><br><span class="line">        mt1.start();</span><br><span class="line">        &#x2F;&#x2F;构造方法设置</span><br><span class="line">        MyThread mt2&#x3D;new MyThread(&quot;线程2&quot;);</span><br><span class="line">        mt2.start();</span><br><span class="line">        &#x2F;&#x2F;通过setName设置后的getName</span><br><span class="line">        MyThread mt3&#x3D;new MyThread();</span><br><span class="line">        mt3.setName(&quot;线程3&quot;);</span><br><span class="line">        mt3.start();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;currentThread</span><br><span class="line">        Thread t&#x3D;Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">main</span><br><span class="line">线程2</span><br><span class="line">Thread-0</span><br><span class="line">线程3</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i&#x3D;0;i&lt;10;i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread mt&#x3D;new MyThread();</span><br><span class="line">        Thread t1&#x3D;new Thread(mt,&quot;线程1&quot;);</span><br><span class="line">        Thread t2&#x3D;new Thread(mt,&quot;线程2&quot;);</span><br><span class="line">        System.out.println(&quot;默认&quot;);</span><br><span class="line">        System.out.println(t1.getPriority());</span><br><span class="line">        System.out.println(t2.getPriority());</span><br><span class="line">        System.out.println(&quot;修该后&quot;);</span><br><span class="line">        t1.setPriority(1);</span><br><span class="line">        t2.setPriority(10);</span><br><span class="line">        System.out.println(t1.getPriority());</span><br><span class="line">        System.out.println(t2.getPriority());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">默认</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">修该后</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">线程2:0</span><br><span class="line">线程2:1</span><br><span class="line">线程1:0</span><br><span class="line">线程2:2</span><br><span class="line">线程1:1</span><br><span class="line">线程1:2</span><br><span class="line">线程2:3</span><br><span class="line">线程1:3</span><br><span class="line">线程2:4</span><br><span class="line">线程1:4</span><br><span class="line">线程2:5</span><br><span class="line">线程2:6</span><br><span class="line">线程2:7</span><br><span class="line">线程2:8</span><br><span class="line">线程2:9</span><br><span class="line">线程1:5</span><br><span class="line">线程1:6</span><br><span class="line">线程1:7</span><br><span class="line">线程1:8</span><br><span class="line">线程1:9</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread1 mt1&#x3D;new MyThread1();</span><br><span class="line">        MyThread2 mt2&#x3D;new MyThread2();</span><br><span class="line">        mt1.setName(&quot;守护线程&quot;);</span><br><span class="line">        mt2.setName(&quot;非守护线程&quot;);</span><br><span class="line">        mt1.setDaemon(true);</span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread1.java</span><br><span class="line">public class MyThread1 extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread2.java</span><br><span class="line">public class MyThread2 extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">守护线程0</span><br><span class="line">非守护线程0</span><br><span class="line">非守护线程1</span><br><span class="line">守护线程1</span><br><span class="line">非守护线程2</span><br><span class="line">守护线程2</span><br><span class="line">非守护线程3</span><br><span class="line">非守护线程4</span><br><span class="line">非守护线程5</span><br><span class="line">非守护线程6</span><br><span class="line">非守护线程7</span><br><span class="line">非守护线程8</span><br><span class="line">非守护线程9</span><br><span class="line">守护线程3</span><br><span class="line">守护线程4</span><br><span class="line">守护线程5</span><br><span class="line">守护线程6</span><br><span class="line">守护线程7</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread mt1&#x3D;new MyThread();</span><br><span class="line">        MyThread mt2&#x3D;new MyThread();</span><br><span class="line">        mt1.setName(&quot;线程一&quot;);</span><br><span class="line">        mt2.setName(&quot;线程二&quot;);</span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(getName()+i);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">线程一0</span><br><span class="line">线程二0</span><br><span class="line">线程二1</span><br><span class="line">线程一1</span><br><span class="line">线程一2</span><br><span class="line">线程一3</span><br><span class="line">线程二2</span><br><span class="line">线程一4</span><br><span class="line">线程一5</span><br><span class="line">线程二3</span><br><span class="line">线程二4</span><br><span class="line">线程二5</span><br><span class="line">线程一6</span><br><span class="line">线程二6</span><br><span class="line">线程一7</span><br><span class="line">线程二7</span><br><span class="line">线程一8</span><br><span class="line">线程一9</span><br><span class="line">线程二8</span><br><span class="line">线程二9</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MyThread mt&#x3D;new MyThread();</span><br><span class="line">        mt.setName(&quot;线程一&quot;);</span><br><span class="line">        mt.start();</span><br><span class="line">        mt.join();</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(&quot;main线程&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(getName()+i);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">线程一0</span><br><span class="line">线程一1</span><br><span class="line">线程一2</span><br><span class="line">线程一3</span><br><span class="line">线程一4</span><br><span class="line">线程一5</span><br><span class="line">线程一6</span><br><span class="line">线程一7</span><br><span class="line">线程一8</span><br><span class="line">线程一9</span><br><span class="line">main线程0</span><br><span class="line">main线程1</span><br><span class="line">main线程2</span><br><span class="line">main线程3</span><br><span class="line">main线程4</span><br><span class="line">main线程5</span><br><span class="line">main线程6</span><br><span class="line">main线程7</span><br><span class="line">main线程8</span><br><span class="line">main线程9</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><strong>新建状态NEW</strong>：创建线程对象。调用start方法后变成就绪状态  </p><p><strong>就绪状态RUNNABLE</strong>：有执行资格，没执行权。不停的抢CPU  </p><p><strong>阻塞状态BLOCKED</strong>：无法获得锁对象  </p><p><strong>等待状态WAITING</strong>：wait方法</p><p><strong>计时状态TIMED_WAITING</strong>：sleep方法</p><p><strong>死亡状态TERMINATED</strong>：若run执行完毕，线程死亡，变成垃圾  </p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>把操作共享数据的代码锁起来。  </p><p><strong>特点</strong>：</p><ol><li>锁默认打开，有一个线程进去，缩自动关闭</li><li>里面的代码全部执行完毕，线程出来，缩自动打开</li></ol><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronized(锁)&#123;</span><br><span class="line">操作共享数据的代码</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;锁对象一定要是唯一的，一般写当前类的字节码文件。</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;某电影院目前上映的甲电影，共有10张票，有3个窗口售卖，设计一个程序模拟该电影院买票</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MyThread mt1&#x3D;new MyThread();</span><br><span class="line">        mt1.setName(&quot;窗口1&quot;);</span><br><span class="line"></span><br><span class="line">        MyThread mt2&#x3D;new MyThread();</span><br><span class="line">        mt2.setName(&quot;窗口2&quot;);</span><br><span class="line"></span><br><span class="line">        MyThread mt3&#x3D;new MyThread();</span><br><span class="line">        mt3.setName(&quot;窗口3&quot;);</span><br><span class="line"></span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">        mt3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    static int ticketNum&#x3D;1;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            synchronized (MyThread.class) &#123;</span><br><span class="line">                if (ticketNum &lt;&#x3D;10) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName() + &quot;卖出第&quot; + ticketNum + &quot;张票&quot;);</span><br><span class="line">                    ticketNum++;</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">窗口1卖出第1张票</span><br><span class="line">窗口1卖出第2张票</span><br><span class="line">窗口3卖出第3张票</span><br><span class="line">窗口3卖出第4张票</span><br><span class="line">窗口3卖出第5张票</span><br><span class="line">窗口3卖出第6张票</span><br><span class="line">窗口3卖出第7张票</span><br><span class="line">窗口3卖出第8张票</span><br><span class="line">窗口2卖出第9张票</span><br><span class="line">窗口2卖出第10张票</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>就是把synchronized关键字加到方法上。  </p><p><strong>格式</strong>：  </p><p>修饰符 synchronized 返回值类型 方法名(方法参数){…}  </p><p><strong>特点</strong>：</p><ol><li>同步方法是锁住方法里面所有的代码</li><li>锁对象不能自己指定。<ul><li>非静态方法：this</li><li>静态方法：当前类的字节码文件对象</li></ul></li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;某电影院目前上映的甲电影，共有10张票，有3个窗口售卖，设计一个程序模拟该电影院买票,同步方法实现</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">1public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        MyThread myThread&#x3D;new MyThread();</span><br><span class="line">        Thread t1&#x3D;new Thread(myThread);</span><br><span class="line">        Thread t2&#x3D;new Thread(myThread);</span><br><span class="line">        Thread t3&#x3D;new Thread(myThread);</span><br><span class="line">        t1.setName(&quot;窗口1&quot;);</span><br><span class="line">        t2.setName(&quot;窗口2&quot;);</span><br><span class="line">        t3.setName(&quot;窗口3&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">public class MyThread implements Runnable&#123;</span><br><span class="line">    int ticketNum&#x3D;0;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            if (method())&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private synchronized boolean method()&#123;</span><br><span class="line">        if(ticketNum&#x3D;&#x3D;10)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(10);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticketNum++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ &quot;卖出第&quot; + ticketNum + &quot;张票&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">窗口1卖出第1张票</span><br><span class="line">窗口1卖出第2张票</span><br><span class="line">窗口1卖出第3张票</span><br><span class="line">窗口1卖出第4张票</span><br><span class="line">窗口1卖出第5张票</span><br><span class="line">窗口1卖出第6张票</span><br><span class="line">窗口1卖出第7张票</span><br><span class="line">窗口1卖出第8张票</span><br><span class="line">窗口3卖出第9张票</span><br><span class="line">窗口2卖出第10张票</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h2><p>Lock中提供<strong>获得锁</strong>和<strong>释放锁</strong>的方法。  </p><p>void lock(); 获得锁  </p><p>void unlock(); 释放锁  </p><p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化。  </p><p>ReentrantLock的构造方法：  </p><p>ReentrantLock(); 创建一个ReentrantLock的实例。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;某电影院目前上映的甲电影，共有10张票，有3个窗口售卖，设计一个程序模拟该电影院买票,Lock实现</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MyThread mt1&#x3D;new MyThread();</span><br><span class="line">        mt1.setName(&quot;窗口1&quot;);</span><br><span class="line"></span><br><span class="line">        MyThread mt2&#x3D;new MyThread();</span><br><span class="line">        mt2.setName(&quot;窗口2&quot;);</span><br><span class="line"></span><br><span class="line">        MyThread mt3&#x3D;new MyThread();</span><br><span class="line">        mt3.setName(&quot;窗口3&quot;);</span><br><span class="line"></span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">        mt3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyThread.java</span><br><span class="line">import java.util.concurrent.locks.Lock;</span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    static int ticketNum&#x3D;1;</span><br><span class="line">    static Lock lock&#x3D;new ReentrantLock();</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                if (ticketNum &lt;&#x3D;100) &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                    System.out.println(getName() + &quot;卖出第&quot; + ticketNum + &quot;张票&quot;);</span><br><span class="line">                    ticketNum++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注</strong>：写锁的时候不要让锁嵌套，否则可能会死锁。  </p><h2 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><strong>等待唤醒机制</strong>(生产者消费者模式)是多个线程之间的一种协作机制。  </p><p><strong>思路</strong>:  </p><p>此处将消费者比喻成吃货，生产者比喻成厨师。</p><ul><li><strong>消费者</strong>：消费数据<ol><li>判断桌子上是否有食物</li><li>若无，等待</li><li>若有，开吃</li><li>吃完后，唤醒厨师继续做</li></ol></li><li><strong>生产者</strong>：生产数据<ol><li>判断桌子上是否有食物</li><li>若有，等待</li><li>若无，做饭</li><li>把食物放到桌子上</li><li>唤醒等待的消费者开吃</li></ol></li></ul><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><h5 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h5><p>void wait()  </p><p><strong>说明</strong>：当前线程等待，直到被其他线程唤醒</p><h5 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h5><p>void notify()  </p><p><strong>说明</strong>：随机唤醒单个线程</p><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h5><p>void notifyAll()  </p><p><strong>说明</strong>：唤醒所有线程</p><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Desk.java</span><br><span class="line">public class Desk &#123;</span><br><span class="line">    public static int count&#x3D;10;&#x2F;&#x2F;吃货能吃的饭的数量</span><br><span class="line">    public static Object lock&#x3D;new Object();&#x2F;&#x2F;锁</span><br><span class="line">    public static int state&#x3D;0;&#x2F;&#x2F;桌子的状态，若无食物为0，若有食物为1</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Cookie.java</span><br><span class="line">public class Cookie extends Thread &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    1. 循环</span><br><span class="line">    2.同步代码块</span><br><span class="line">    3.判断共享数据是否到了尽头（到了尽头）</span><br><span class="line">    4.判断共享数据是否到了尽头（没到尽头，执行核心逻辑）</span><br><span class="line">    *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            synchronized (Desk.lock)&#123;</span><br><span class="line">                if(Desk.count&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;else &#123;&#x2F;&#x2F;判断桌子上是否有食物</span><br><span class="line">                    if(Desk.state&#x3D;&#x3D;0)&#123;&#x2F;&#x2F;无食物，厨师做饭</span><br><span class="line">                        System.out.println(&quot;厨师做饭&quot;);</span><br><span class="line">                        &#x2F;&#x2F;桌子上有了食物，状态设为1</span><br><span class="line">                        Desk.state&#x3D;1;</span><br><span class="line">                        &#x2F;&#x2F;唤醒吃货</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;else&#123;&#x2F;&#x2F;若有，则等待</span><br><span class="line">                        try &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Foodie.java</span><br><span class="line">public class Foodie extends Thread&#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    1. 循环</span><br><span class="line">    2.同步代码块</span><br><span class="line">    3.判断共享数据是否到了尽头（到了尽头）</span><br><span class="line">    4.判断共享数据是否到了尽头（没到尽头，执行核心逻辑）</span><br><span class="line">    *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            synchronized (Desk.lock)&#123;</span><br><span class="line">                if (Desk.count&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    &#x2F;&#x2F;判断桌子是否有食物</span><br><span class="line">                    if(Desk.state&#x3D;&#x3D;0)&#123;</span><br><span class="line">                        try &#123;&#x2F;&#x2F;若无，等待</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;else&#123;&#x2F;&#x2F;若有，开吃</span><br><span class="line">                        &#x2F;&#x2F;先将饭量-1</span><br><span class="line">                        Desk.count--;</span><br><span class="line">                        System.out.println(&quot;吃货还能吃&quot;+Desk.count+&quot;顿饭&quot;);</span><br><span class="line">                        &#x2F;&#x2F;吃饭后，桌子上没有事物，状态设为0</span><br><span class="line">                        Desk.state&#x3D;0;</span><br><span class="line">                        &#x2F;&#x2F;唤醒厨师</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Cookie cookie&#x3D;new Cookie();</span><br><span class="line">        Foodie foodie&#x3D;new Foodie();</span><br><span class="line">        cookie.start();</span><br><span class="line">        foodie.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃9顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃8顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃7顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃6顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃5顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃4顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃3顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃2顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃1顿饭</span><br><span class="line">厨师做饭</span><br><span class="line">吃货还能吃0顿饭</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>阻塞队列实现等待唤醒机制。  </p><h4 id="阻塞队列继承结构"><a href="#阻塞队列继承结构" class="headerlink" title="阻塞队列继承结构"></a>阻塞队列继承结构</h4><p>阻塞队列实现Iterable,Collection,Queue,BlockingQueue接口，有两个实现类:</p><ol><li><strong>ArrayBlockingQueue</strong>：底层是数组，有界</li><li><strong>LinkedBlockingQueue</strong>：底层是链表，无界，但不是真的无界，最大为int最大值</li></ol><p><strong>思路</strong>：</p><p>此处将消费者比喻成吃货，生产者比喻成厨师。</p><ul><li>厨师<ol><li>构造方法中接收一个阻塞队列对象</li><li>run方法中循环向阻塞队列添加食物</li><li>打印添加结果</li></ol></li><li>吃货<ol><li>构造方法中接收一个阻塞队列对象</li><li>run方法中循环获取阻塞队列的食物</li><li>打印获取结果</li></ol></li></ul><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><p>put(anObject)  </p><p>将参数放入队列，若放不进去会堵塞。  </p><p>take()  </p><p>取出第一个数据，取不到会堵塞。  </p><p><strong>注</strong>：put，take方法里本身就有锁</p><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; abq&#x3D;new ArrayBlockingQueue&lt;&gt;(1);&#x2F;&#x2F;创建阻塞对象，并设置容量</span><br><span class="line">        Cookie cookie&#x3D;new Cookie(abq);</span><br><span class="line">        Foodie foodie&#x3D;new Foodie(abq);</span><br><span class="line">        cookie.start();</span><br><span class="line">        foodie.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Cookie.java</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line">public class Cookie extends Thread&#123;</span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; abq;</span><br><span class="line">    public Cookie(ArrayBlockingQueue&lt;String&gt; abq)&#123;</span><br><span class="line">        this.abq&#x3D;abq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                abq.put(&quot;食物&quot;);</span><br><span class="line">                System.out.println(&quot;厨师放食物&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Foodie.java</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line">public class Foodie extends Thread&#123;</span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; abq;</span><br><span class="line">    public Foodie(ArrayBlockingQueue&lt;String&gt; abq)&#123;</span><br><span class="line">        this.abq&#x3D;abq;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String s&#x3D;abq.take();</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">假设：100元分成了三个红包（均为整数），有5人去抢</span><br><span class="line">其中红包是共享数据。</span><br><span class="line">5个人5条线程</span><br><span class="line">打印结果如下：</span><br><span class="line">XXX抢到了XX元</span><br><span class="line">XXX抢到了XX元</span><br><span class="line">XXX抢到了XX元</span><br><span class="line">XXX没抢到</span><br><span class="line">XXX没抢到</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        RedPackage rp1&#x3D;new RedPackage();</span><br><span class="line">        RedPackage rp2&#x3D;new RedPackage();</span><br><span class="line">        RedPackage rp3&#x3D;new RedPackage();</span><br><span class="line">        RedPackage rp4&#x3D;new RedPackage();</span><br><span class="line">        RedPackage rp5&#x3D;new RedPackage();</span><br><span class="line"></span><br><span class="line">        rp1.setName(&quot;线程1&quot;);</span><br><span class="line">        rp2.setName(&quot;线程2&quot;);</span><br><span class="line">        rp3.setName(&quot;线程3&quot;);</span><br><span class="line">        rp4.setName(&quot;线程4&quot;);</span><br><span class="line">        rp5.setName(&quot;线程5&quot;);</span><br><span class="line"></span><br><span class="line">        rp1.start();</span><br><span class="line">        rp2.start();</span><br><span class="line">        rp3.start();</span><br><span class="line">        rp4.start();</span><br><span class="line">        rp5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;RedPackage.java</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class RedPackage extends Thread&#123;</span><br><span class="line">    static int sum&#x3D;100;</span><br><span class="line">    static int count&#x3D;3;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        synchronized (RedPackage.class)&#123;</span><br><span class="line">            if(count&#x3D;&#x3D;0)&#123;</span><br><span class="line">                System.out.println(getName()+&quot;没抢到&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(count&#x3D;&#x3D;1)&#123;</span><br><span class="line">                    int money&#x3D;sum;</span><br><span class="line">                    System.out.println(getName()+&quot;抢到了&quot;+money+&quot;元&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    Random r&#x3D;new Random();</span><br><span class="line">                    int money&#x3D;r.nextInt(sum-(count-1))+1;</span><br><span class="line">                    System.out.println(getName()+&quot;抢到了&quot;+money+&quot;元&quot;);</span><br><span class="line">                    sum&#x3D;sum-money;</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">线程1抢到了3元</span><br><span class="line">线程5抢到了40元</span><br><span class="line">线程4抢到了57元</span><br><span class="line">线程3没抢到</span><br><span class="line">线程2没抢到</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">有一个抽奖池，该抽奖池中存放了奖励的金额，该抽奖池中的奖项为10,5,20,50,100,200,500,800,2,80,300,700</span><br><span class="line">创建两个抽奖箱（线程）设置线程名分别为“抽奖箱1”和“抽奖箱2”</span><br><span class="line">随机从抽奖池中获取奖项元素并打印在控制台上，格式如下：</span><br><span class="line">在此次抽奖过程中，抽奖箱2共产生6个奖项</span><br><span class="line">分别为:800,10,80,500,700,2最高奖项为800元，总计额为2092元</span><br><span class="line">在此次抽奖过程中，抽奖箱1共产生6个奖项</span><br><span class="line">分别为:5,100,50,300,20,200最高奖项为300元，总计额为675元</span><br><span class="line">在此次抽奖过程中，抽奖箱2中产生最大奖项，该奖项金额为800元</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Lottery.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line">public class Lottery implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; moneyBox;</span><br><span class="line">    public Lottery(ArrayList&lt;Integer&gt; moneyBox)&#123;</span><br><span class="line">        this.moneyBox&#x3D;moneyBox;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            synchronized (Lottery.class) &#123;</span><br><span class="line">                if (moneyBox.size() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    print(list,Collections.max(list),sum);</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Collections.shuffle(moneyBox);</span><br><span class="line">                    int money &#x3D; moneyBox.remove(0);</span><br><span class="line">                    list.add(money);</span><br><span class="line">                    sum+&#x3D;money;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(10);</span><br><span class="line">        &#125;</span><br><span class="line">        if(list.size()&#x3D;&#x3D;0)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return Collections.max(list);</span><br><span class="line">    &#125;</span><br><span class="line">    private static void print(ArrayList&lt;Integer&gt; list,int max,int sum)&#123;</span><br><span class="line">        System.out.println(&quot;在此次抽奖过程中，&quot;+Thread.currentThread().getName()+&quot;共产生&quot;+list.size()+&quot;个奖项&quot;);</span><br><span class="line">        System.out.print(&quot;分别为:&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.print(list.get(i));</span><br><span class="line">            if(i&lt; list.size()-1)&#123;</span><br><span class="line">                System.out.print(&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;最高奖项为&quot;+max+&quot;元，总计额为&quot;+sum+&quot;元&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; moneyBox&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(moneyBox,10,5,20,50,100,200,500,800,2,80,300,700);</span><br><span class="line">        Lottery lottery&#x3D;new Lottery(moneyBox);</span><br><span class="line">        FutureTask&lt;Integer&gt; ft1&#x3D;new FutureTask&lt;&gt;(lottery);</span><br><span class="line">        FutureTask&lt;Integer&gt; ft2&#x3D;new FutureTask&lt;&gt;(lottery);</span><br><span class="line"></span><br><span class="line">        Thread t1&#x3D;new Thread(ft1);</span><br><span class="line">        Thread t2&#x3D;new Thread(ft2);</span><br><span class="line">        t1.setName(&quot;抽奖箱1&quot;);</span><br><span class="line">        t2.setName(&quot;抽奖箱2&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        int money;</span><br><span class="line">        String name;</span><br><span class="line">        if(ft1.get()&gt;ft2.get())&#123;</span><br><span class="line">            money&#x3D;ft1.get();</span><br><span class="line">            name&#x3D;t1.getName();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            money&#x3D;ft2.get();</span><br><span class="line">            name&#x3D;t2.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;在此次抽奖过程中，&quot;+name+&quot;产生最大值，最大值金额为&quot;+money);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">在此次抽奖过程中，抽奖箱1共产生6个奖项</span><br><span class="line">分别为:80,100,50,5,10,700最高奖项为700元，总计额为945元</span><br><span class="line">在此次抽奖过程中，抽奖箱2共产生6个奖项</span><br><span class="line">分别为:500,200,20,300,2,800最高奖项为800元，总计额为1822元</span><br><span class="line">在此次抽奖过程中，抽奖箱2产生最大值，最大值金额为800</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><ol><li>创建一个池子，池子中是空的</li><li>提交任务时，池子会创建新的线程对象，执行完毕后，线程归还给池子，下次再提交任务时，不需创建新线程，直接复用已有的线程即可</li><li>若提交任务时，池子中没有空闲线程，也无法创建新的线程，任务便会排队等待</li></ol><p><strong>代码实现步骤</strong>：</p><ol><li>创建线程池</li><li>提交任务</li><li>所有的任务全部执行完毕，关闭线程池</li></ol><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p><strong>Executors</strong>：线程池的工具类通过调用方法返回不同类型的线程池对象。</p><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p><strong>格式</strong>：  </p><p>public static ExecutorsService newCachedThreadPool()  </p><p><strong>说明</strong>：创建一个几乎没有上限的线程池</p><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p><strong>格式</strong>：  </p><p>public static ExecutorsService newFixedThreadPool(int nThreads)  </p><p><strong>说明</strong>：创建一个有上限的线程池</p><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    &#x2F;&#x2F;1.获取线程池对象</span><br><span class="line">        ExecutorService pool&#x3D; Executors.newCachedThreadPool();</span><br><span class="line">        &#x2F;&#x2F;2.提交任务</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        &#x2F;&#x2F;3.销毁线程池</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;MyRunnable.java</span><br><span class="line">public class MyRunnable implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-5</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-4</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyRunnable.java</span><br><span class="line">public class MyRunnable implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    &#x2F;&#x2F;1.获取线程池对象</span><br><span class="line">        ExecutorService pool&#x3D; Executors.newFixedThreadPool(3);</span><br><span class="line">        &#x2F;&#x2F;2.提交任务</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        pool.submit(new MyRunnable());</span><br><span class="line">        &#x2F;&#x2F;3.销毁线程池</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="自定义线程"><a href="#自定义线程" class="headerlink" title="自定义线程"></a>自定义线程</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>创建一个空的池子</p></li><li><p>有任务提交时，线程池会创建线程去执行任务，执行完毕归还线程。</p></li></ol><p><strong>注</strong>：不断提交任务，会有以下三个临界点</p><ol><li>当核心线程满时，在提交任务就会排队</li><li>当核心线程满，队满时，会创建临时线程</li><li>当核心线程满，队满时，临时线程满时，会触发任务拒绝策略</li></ol><h4 id="核心元素（参数）"><a href="#核心元素（参数）" class="headerlink" title="核心元素（参数）"></a>核心元素（参数）</h4><ol><li>核心线程数量（不少于0）</li><li>线程池中最大线程数量（最大数量&gt;=核心线程数量）</li><li>空闲时间（值）（不能小于0）</li><li>空闲时间（单位）（用TimeUnit绑定）</li><li>阻塞队列（不能为null）</li><li>创建线程工厂（不能为null）</li><li>要执行的任务过多时的解决方案（不能为null）</li></ol><h4 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ThreadPoolExecutor pool&#x3D;new ThreadPoolExecutor(</span><br><span class="line">                3,&#x2F;&#x2F;核心线程数量（不少于0）</span><br><span class="line">                6,&#x2F;&#x2F;线程池中最大线程数量（最大数量&gt;&#x3D;核心线程数量）</span><br><span class="line">                60,&#x2F;&#x2F;空闲时间（值）（不能小于0）</span><br><span class="line">                TimeUnit.SECONDS,&#x2F;&#x2F;空闲时间（单位）（用TimeUnit绑定）</span><br><span class="line">                new ArrayBlockingQueue&lt;&gt;(3),&#x2F;&#x2F;阻塞队列（不能为null）</span><br><span class="line">                Executors.defaultThreadFactory(),&#x2F;&#x2F;创建线程工厂（不能为null）</span><br><span class="line">                new ThreadPoolExecutor.AbortPolicy()&#x2F;&#x2F;要执行的任务过多时的解决方案（不能为null）</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池多大合适"><a href="#线程池多大合适" class="headerlink" title="线程池多大合适"></a>线程池多大合适</h3><p><strong>最大并行数</strong>：可用Runtime.getRuntime().availableProcessors()返回当前电脑的最大并行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU密集型运算：即项目中CPU计算居多，线程池大小&#x3D;最大并行数+1  </span><br><span class="line"></span><br><span class="line">I&#x2F;O密集型运算：即项目中文件操作居多，线程池大小&#x3D;最大并行数*期望CPU利用率*（总时间（CPU计算时间+等待时间）&#x2F;CPU计算时间）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流（十八）</title>
      <link href="2023/04/04/J18/"/>
      <url>2023/04/04/J18/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流（十八）"><a href="#IO流（十八）" class="headerlink" title="IO流（十八）"></a>IO流（十八）</h1><p><strong>IO流</strong>：存储和读取数据的解决方案。  </p><p><strong>IO流的作用</strong>：用于读写数据（本地文件，网络）  </p><p><strong>按流向分类</strong>：</p><ol><li><strong>输出流</strong>：写出，从程序到文件</li><li><strong>输入流</strong>：读取，从文件到程序</li></ol><p><strong>按操作文件类型分类</strong>：</p><ol><li><strong>字节流</strong>：可操作所有类型的文件</li><li><strong>字符流</strong>：只可操作纯文本文件（用Windows系统自带的记事本打开且能读懂的文件，如：txt,md,xml,lrc）</li></ol><h2 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h2><p>IO流体系</p><ul><li><strong>字节流</strong>：可以拷贝任意类型的文件<ul><li><strong>InputStream</strong>：字节输入流，抽象类<ul><li><strong>基本流</strong>：<strong>FileInputStream</strong>：操作本地文件的字节输入流</li><li><strong>缓冲流</strong>：<strong>BufferedInputStream</strong>：字节缓冲输入流</li><li><strong>反序列化流</strong>：<strong>ObjectInputStream</strong></li><li><strong>解压缩流</strong>：<strong>ZipInputStream</strong></li></ul></li><li><strong>OutputStream</strong>：字节输出流，抽象类<ul><li><strong>基本流</strong>：<strong>FileOutputStream</strong>：操作本地文件的字节输出流</li><li><strong>缓冲流</strong>：<strong>BufferedOutputStream</strong>：字节缓冲输出流</li><li><strong>序列化流</strong>：<strong>ObjectOutputStream</strong></li><li><strong>字节打印流</strong>：<strong>PrintStream</strong></li><li><strong>压缩流</strong>：<strong>ZipOutputStream</strong></li></ul></li></ul></li><li><strong>字符流</strong>：读取纯文本文件中的数据，向纯文本文件写出数据<ul><li><strong>Reader</strong>：字符输入流，抽象类<ul><li><strong>基本流</strong>：<strong>FileReader</strong>：操作本地文件的字符输入流</li><li><strong>缓冲流</strong>：<strong>BufferedReader</strong>：字符缓冲输入流</li><li><strong>转换流</strong>：<strong>InputStreamReader</strong>：转换输入流</li></ul></li><li><strong>Writer</strong>：字符输出流，抽象类<ul><li><strong>基本流</strong>：<strong>FileWriter</strong>：操作本地文件的字符输出流</li><li><strong>缓冲流</strong>：<strong>BufferedWriter</strong>：字符缓冲输出流</li><li><strong>转换流</strong>：<strong>OutputStreamWriter</strong>：转换输出流</li><li><strong>字符打印流</strong>：<strong>PrintWriter</strong></li></ul></li></ul></li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h3><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>操作本地文件的字节输出流，可把程序中的数据写到本地文件。  </p><p><strong>步骤</strong>：</p><ol><li>创建字节输出流对象，就像在两个地点之间修一条公路<ol><li>参数可以是字符串表示的路径或File对象</li><li>若文件不存在，则会创建新文件，但要保证父级路径存在</li><li>若文件存在，则会清空文件</li></ol></li><li>写数据，就像在公路上传输<ol><li>write方法的参数是整数，则会写入整数对应的ASCII字符</li></ol></li><li>释放资源，就像把公路拆掉<ol><li>每次用完流后，均要释放资源</li></ol></li></ol><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">        fos.write(97);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写数据的三种方式"><a href="#写数据的三种方式" class="headerlink" title="写数据的三种方式"></a>写数据的三种方式</h4><p><strong>方式一</strong>：  </p><p>void write(int b)  </p><p><strong>说明</strong>：一次写一个字节数据  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        fos.write(97);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*a.txt的内容</span><br><span class="line">a</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：  </p><p>void write(byte[] b)  </p><p><strong>说明</strong>：一次写一个字节数组数据  </p><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        byte[] arr&#x3D;&#123;97,98,99,100&#125;;</span><br><span class="line">        fos.write(arr);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*a.txt的内容</span><br><span class="line">abcd</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>方式三</strong>：  </p><p>void write(byte[] b,int off,int len)  </p><p><strong>说明</strong>：一次写一个字节数组的部分数据，off表示起始索引，len表示长度  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        byte[] arr&#x3D;&#123;97,98,99,100&#125;;</span><br><span class="line">        fos.write(arr,1,2);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*a.txt的内容</span><br><span class="line">bc</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="换行和续写"><a href="#换行和续写" class="headerlink" title="换行和续写"></a>换行和续写</h4><p><strong>换行</strong>：再次写出换行符即可。  </p><p>不同系统下的换行符不同：window是\r\n,linux是\n,Mac是\r。  </p><p>在Windows操作系统中，java对回车换行进行优化，虽然完整的是\r\n，但写其中一个\n或\r，java在底层便会自动补全，也可实现换行，不过还是建议不要省略，直接写全。  </p><p><strong>续写</strong>：</p><p>若不想清空文件，想续写，打开续写开关即可，开关位置在创建对象的第二个参数，默认为false，手动传递true便会打开续写。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;换行</span><br><span class="line">        FileOutputStream fos1&#x3D;new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        String string&#x3D;&quot;ljsblog&quot;;</span><br><span class="line">        byte[] bytes&#x3D;string.getBytes();</span><br><span class="line">        fos1.write(bytes);</span><br><span class="line">        String strLine&#x3D;&quot;\r\n&quot;;</span><br><span class="line">        byte[] line&#x3D;strLine.getBytes();</span><br><span class="line">        fos1.write(line);</span><br><span class="line">        fos1.write(bytes);</span><br><span class="line">        fos1.close();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;续写</span><br><span class="line">        FileOutputStream fos2&#x3D;new FileOutputStream(&quot;a.txt&quot;,true);</span><br><span class="line">        String str&#x3D;&quot;666&quot;;</span><br><span class="line">        byte[] bytes1&#x3D;str.getBytes();</span><br><span class="line">        fos2.write(bytes1);</span><br><span class="line">        fos2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*a.txt内容</span><br><span class="line">ljsblog</span><br><span class="line">ljsblog666</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="字节输入流InputStream"><a href="#字节输入流InputStream" class="headerlink" title="字节输入流InputStream"></a>字节输入流InputStream</h3><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p>操作本地文件的字节输入流，可把本地文件中的数据读取到程序中来。  </p><p><strong>步骤</strong>：</p><ol><li>创建对象<ol><li>若文件不存在，则直接报错</li></ol></li><li>读取数据<ol><li>一次读一个字节，读出来的是数据在ASCII上对应的数字</li><li>若读到问价末尾，read方法返回-1</li></ol></li><li>释放资源<ol><li>每次使用完流必须要释放资源</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*a.txt的内容</span><br><span class="line">ab</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        int c1&#x3D;fis.read();</span><br><span class="line">        int c2&#x3D;fis.read();</span><br><span class="line">        int c3&#x3D;fis.read();</span><br><span class="line">        System.out.println(c1+&quot; &quot;+c2+&quot; &quot;+c3);</span><br><span class="line">        System.out.println(&quot;&quot;+(char)c1+(char)c2+(char)c3);</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">97 98 -1</span><br><span class="line">ab￿</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="循环读取"><a href="#循环读取" class="headerlink" title="循环读取"></a>循环读取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*a.txt内容</span><br><span class="line">absafsaf</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        int c;</span><br><span class="line">        while((c&#x3D;fis.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)c);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">absafsaf</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="一次读多个字节"><a href="#一次读多个字节" class="headerlink" title="一次读多个字节"></a>一次读多个字节</h4><p><strong>格式</strong>：  </p><p>public int read()  </p><p><strong>说明</strong>：一次读一个字节数据。  </p><p><strong>格式</strong>：  </p><p>public int read(byte[] buffer)  </p><p><strong>说明</strong>：一次读一个字节数组数据，每次读取的数量和字节数组长度有关，读取的内容会存入字节数组，返回值是本次读出数据的字节长度，字节数组长度尽量是1024的倍数。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*a.txt内容</span><br><span class="line">abcde</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        byte[] bytes&#x3D;new byte[2];</span><br><span class="line">        int len1&#x3D;fis.read(bytes);</span><br><span class="line">        System.out.println(len1);</span><br><span class="line">        System.out.println(new String(bytes,0,len1));</span><br><span class="line">        int len2&#x3D;fis.read(bytes);</span><br><span class="line">        System.out.println(len2);</span><br><span class="line">        System.out.println(new String(bytes,0,len2));</span><br><span class="line">        int len3&#x3D;fis.read(bytes);</span><br><span class="line">        System.out.println(len3);</span><br><span class="line">        System.out.println(new String(bytes,0,len3));</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">2</span><br><span class="line">ab</span><br><span class="line">2</span><br><span class="line">cd</span><br><span class="line">1</span><br><span class="line">e</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将source.mp4拷贝，拷贝文件名copy.mp4</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(&quot;source.mp4&quot;);</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;copy.mp4&quot;);</span><br><span class="line">        byte[] bytes&#x3D;new byte[1024*1024*10];&#x2F;&#x2F;10M</span><br><span class="line">        int len&#x3D;0;</span><br><span class="line">        while((len&#x3D; fis.read(bytes))!&#x3D;-1)&#123;</span><br><span class="line">            fos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="AutoCloseable"><a href="#AutoCloseable" class="headerlink" title="AutoCloseable"></a>AutoCloseable</h5><p><strong>AutoCloseable</strong>是接口。  </p><p><strong>特点</strong>：特定情况下，可自动释放资源</p><h5 id="基本做法"><a href="#基本做法" class="headerlink" title="基本做法"></a>基本做法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;手动释放资源</span><br><span class="line">try&#123;</span><br><span class="line">可能出现问题的代码</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">执行所有资源释放操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JDK7方案"><a href="#JDK7方案" class="headerlink" title="JDK7方案"></a>JDK7方案</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;资源用完最终自动释放</span><br><span class="line">try(创建流对象1;创建流对象2)&#123;&#x2F;&#x2F;只有实现AutoCloseable接口的类才能在在此创建对象</span><br><span class="line">可能出现问题的代码</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JDK9方案"><a href="#JDK9方案" class="headerlink" title="JDK9方案"></a>JDK9方案</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;资源用完最终自动释放</span><br><span class="line">创建流对象1;</span><br><span class="line">创建流对象2;</span><br><span class="line">try(流1;流2)&#123;&#x2F;&#x2F;只有实现AutoCloseable接口的类才能在在此创建对象</span><br><span class="line">可能出现问题的代码</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>一个英文占一个字符。  </p><p><strong>ASCII编码规则</strong>：前面补0，补全8位。  </p><p><strong>ASCII解码规则</strong>：直接转换成十进制。  </p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>简体中文版Windows，默认使用<strong>GBK</strong>字符集。  </p><p><strong>GBK字符集</strong>完全兼容<strong>ASCII字符集</strong>。  </p><p>一个英文占一个字节，二进制第一位是0。  </p><p>一个中文占两个字节，二进制高位字节的第一位是1。  </p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p><strong>Unicode</strong>万国码。  </p><p><strong>Unicode</strong>字符集的UTF-8编码格式：  </p><ul><li>一个英文占一个字节，二进制第一位是0，转成十进制是正数</li><li>一个中文占三个字节，二进制第一位是1，装成十进制数是负数</li></ul><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p><strong>产生乱码的原因</strong>：</p><ol><li>读取数据时未读完整个汉字</li><li>编码和解码时的方式不统一</li></ol><p><strong>如何不产生乱码</strong>：</p><ol><li>不要用字节流读取文本文件</li><li>编码解码时，使用同一个码表，同一个编码方式</li></ol><h3 id="编码和解码方法"><a href="#编码和解码方法" class="headerlink" title="编码和解码方法"></a>编码和解码方法</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p><strong>格式1</strong>：  </p><p>public byte[] getBytes()  </p><p><strong>说明</strong>：使用默认方式编码，IDEA为UTF-8。  </p><p><strong>格式2</strong>：  </p><p>public byte[] getBytes(String charsetName)  </p><p><strong>说明</strong>：使用指定方式编码。  </p><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><p><strong>格式1</strong>：  </p><p>String(byte[] bytes)  </p><p><strong>说明</strong>：使用默认方式解码。  </p><p><strong>格式2</strong>：  </p><p>String(byte[] bytes,String charsetName)  </p><p><strong>说明</strong>：使用指定方式解码。  </p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws UnsupportedEncodingException &#123;</span><br><span class="line">        String str1&#x3D;&quot;ni是憨批&quot;;</span><br><span class="line">        &#x2F;&#x2F;默认utf-8</span><br><span class="line">        byte[] bytes1&#x3D;str1.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes1));</span><br><span class="line">        &#x2F;&#x2F;指定GBK</span><br><span class="line">        byte[] bytes2&#x3D;str1.getBytes(&quot;GBK&quot;);</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;bytes1编码方式为utf-8</span><br><span class="line">        &#x2F;&#x2F;以utf-8方式解码bytes1</span><br><span class="line">        String strUtf1&#x3D;new String(bytes1);</span><br><span class="line">        System.out.println(strUtf1);</span><br><span class="line">        &#x2F;&#x2F;以gbk方式解码bytes1，结果为乱码</span><br><span class="line">        String strGbk1&#x3D;new String(bytes1,&quot;GBK&quot;);</span><br><span class="line">        System.out.println(strGbk1);</span><br><span class="line">        &#x2F;&#x2F;bytes2编码方式为GBK</span><br><span class="line">        &#x2F;&#x2F;以utf-8方式解码bytes2,结果为乱码</span><br><span class="line">        String strUtf2&#x3D;new String(bytes2);</span><br><span class="line">        System.out.println(strUtf2);</span><br><span class="line">        &#x2F;&#x2F;以gbk方式解码bytes2</span><br><span class="line">        String strGbk2&#x3D;new String(bytes2,&quot;GBK&quot;);</span><br><span class="line">        System.out.println(strGbk2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[110, 105, -26, -104, -81, -26, -122, -88, -26, -119, -71]</span><br><span class="line">[110, 105, -54, -57, -70, -87, -59, -6]</span><br><span class="line">ni是憨批</span><br><span class="line">ni鏄啫鎵�</span><br><span class="line">ni�Ǻ���</span><br><span class="line">ni是憨批</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流底层就是字节流，适用于对纯文本文件进行操作。  </p><p>字符流=字节流+字符集。  </p><p><strong>输入流</strong>：一次读一个字节，遇到中文，一次读取多个字节。  </p><p><strong>输出流</strong>：底层会将数据按照指定的编码方式进行编码，变成字节再写到文件中。</p><h3 id="字符输入流Reader"><a href="#字符输入流Reader" class="headerlink" title="字符输入流Reader"></a>字符输入流Reader</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><p><strong>步骤</strong>:</p><ol><li>创建字符输入流对象，若文件不存在会报错<ol><li><strong>构造方法</strong>：FileReader(File file)<ul><li>创建字符输入流并关联本地文件</li></ul></li><li><strong>构造方法</strong>：FileReader(String pathname)<ul><li>创建字符输入流关联本地文件</li></ul></li></ol></li><li>读取数据：按字节进行读取，遇到中文，一次读取多个字节，读取后编码，返回一个整数<ol><li><strong>方法</strong>：public int read()<ul><li>读取数据，读到末尾返回-1</li><li>默认是一个字节一个字节读取，若遇到中文，会一次读取多个</li><li>读取之后，方法的底层还会进行解码，并转换为十进制，并将该十进制作为返回值</li></ul></li><li><strong>方法</strong>：public int read(char[] buffer)<ul><li>读取多个数据，读到末尾返回-1</li><li>返回数组长度</li><li>空参的read+强制类型转换，无需再手动转换</li></ul></li></ol></li><li>释放资源<ul><li><strong>成员方法</strong>：public int close()</li><li><strong>说明</strong>：释放资源/关闭</li></ul></li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;read()</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileReader fr&#x3D;new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        int c;</span><br><span class="line">        while((c&#x3D;fr.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)c);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;read(char[] buffer)</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileReader fr&#x3D;new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        char[] chars&#x3D;new char[5];</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;fr.read(chars))!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print(new String(chars,0,len));</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><p><strong>步骤</strong>：</p><ol><li>创建字符输出流对象<ol><li>参数可以是字符串表示的路径或File对象</li><li>若文件不存在则会创建新文件，但要保证父级路径存在</li><li>若文件已经存在则会清空文件，不想清空可以打开续写开关，即第二个参数写true</li><li><strong>构造方法</strong><ul><li>public FileWriter(File file) 创建字符输出流并关联本地文件</li><li>public FileWriter(String pathname) 创建字符输出流并关联本地文件</li><li>public FileWriter(File file,boolean append) 创建字符输出流并关联本地文件，续写</li><li>public FileWriter(String pathname,boolean append) 创建字符输出流并关联本地文件，续写</li></ul></li></ol></li><li>写数据：若write方法是整数，写到本地文件的是整数在字符集上对应的字符<ul><li><strong>成员方法</strong><ul><li>void write(int c) 写出一个字符</li><li>void write(String str) 写出一个字符串</li><li>void write(String str,int off,int len) 写出一个字符串的一部分</li><li>void write(char[] cbuf) 写出一个字符数组</li><li>void write(char[] cbuf,int off,int len) 写出字符数组的一部分</li></ul></li></ul></li><li>释放资源：每次用完流后都要释放资源</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileWriter fw1&#x3D;new FileWriter(&quot;a.txt&quot;);</span><br><span class="line">        fw1.write(25105);</span><br><span class="line">        FileWriter fw2&#x3D;new FileWriter(&quot;a.txt&quot;,true);</span><br><span class="line">        fw1.write(&quot;是博主&quot;);</span><br><span class="line">        fw1.write(&quot;abcde&quot;,0,2);</span><br><span class="line">        char[] chars&#x3D;&#123;&#39;你&#39;,&#39;是&#39;,&#39;观&#39;,&#39;众&#39;&#125;;</span><br><span class="line">        fw1.write(chars);</span><br><span class="line">        fw1.write(chars,0,2);</span><br><span class="line">        fw1.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*a.txt</span><br><span class="line">我是博主ab你是观众你是</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="字符输入流底层原理"><a href="#字符输入流底层原理" class="headerlink" title="字符输入流底层原理"></a>字符输入流底层原理</h4><ol><li>创建字符输入流对象，底层关联文件，并创建缓冲区（长度为8192的字节数组）</li><li>读取数据，<ol><li>判断缓冲区中是否有数据可以读取</li><li>缓冲区没有数据：从文件获取数据，装到缓冲区，每次尽可能填满缓冲区，若文件也没有数据，返回-1</li><li>缓冲区有数据：从缓冲区读取数据<ul><li>空参的read方法，一次读取一个字节，遇到中文一次读多个字节，把字节解码并转成十进制返回</li><li>有参的read方法，把读取字节，解码，强转三步合并，强转之后的字符放到数组中。</li></ul></li></ol></li></ol><h4 id="字符输出流底层原理"><a href="#字符输出流底层原理" class="headerlink" title="字符输出流底层原理"></a>字符输出流底层原理</h4><ol><li>创建字符输出流对象，底层关联文件，并创建缓冲区（长度为8192的字节数组）</li><li>当数据缓冲区，手动刷新（flush）或关流（close）时，会将缓冲区中的数据存储到文件中。  <ul><li>flush刷新：刷新之后，依旧可向文件写出数据</li><li>close关流：断开通道，不可忘文件写出数据。</li></ul></li></ol><h2 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求：拷贝一个文件夹，考虑子文件夹</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        File src&#x3D;new File(&quot;d:\\javafiletest\\a&quot;);</span><br><span class="line">        File det&#x3D;new File(&quot;d:\\javafiletest\\copy&quot;);</span><br><span class="line">        copyFile(src,det);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void copyFile(File src,File det) throws IOException &#123;</span><br><span class="line">        det.mkdirs();</span><br><span class="line">        File[] files&#x3D;src.listFiles();</span><br><span class="line">        for(File file:files) &#123;</span><br><span class="line">            if (file.isFile()) &#123;</span><br><span class="line">                FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">                FileOutputStream fos &#x3D; new FileOutputStream(new File(det, file.getName()));</span><br><span class="line">                byte[] bytes &#x3D; new byte[1024 * 5];</span><br><span class="line">                int len;</span><br><span class="line">                while ((len &#x3D; fis.read(bytes)) !&#x3D; -1) &#123;</span><br><span class="line">                    fos.write(bytes, 0, len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                copyFile(file,new File(det,file.getName()) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">为保证文件的安全性，需对原始文件进行加密存储，在使用时进行解密</span><br><span class="line">加密原理：</span><br><span class="line">对原始文件的每个字节进行更改，将更改的数据存到新文件中</span><br><span class="line">解密原理：</span><br><span class="line">读取加密后的文件，按加密规则反向操作，变成原始文件</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis1&#x3D;new FileInputStream(&quot;src.PNG&quot;);</span><br><span class="line">        FileOutputStream fos1&#x3D;new FileOutputStream(&quot;jiami.PNG&quot;);</span><br><span class="line"></span><br><span class="line">        int c;</span><br><span class="line">        while ((c&#x3D;fis1.read())!&#x3D;-1)&#123;</span><br><span class="line">            fos1.write(c^100);</span><br><span class="line">        &#125;</span><br><span class="line">        fos1.close();</span><br><span class="line">        fis1.close();</span><br><span class="line">        &#x2F;&#x2F;一个数字异或另一个数字两次，得到的结果还是数字本身</span><br><span class="line">        FileInputStream fis2&#x3D;new FileInputStream(&quot;jiami.PNG&quot;);</span><br><span class="line">        FileOutputStream fos2&#x3D;new FileOutputStream(&quot;jiemi.PNG&quot;);</span><br><span class="line">        while((c&#x3D;fis2.read())!&#x3D;-1)&#123;</span><br><span class="line">            fos2.write(c^100);</span><br><span class="line">        &#125;</span><br><span class="line">        fos2.close();</span><br><span class="line">        fis2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">文本文件中有以下的数据：</span><br><span class="line">6-8-4-2-1</span><br><span class="line">将文件中的数据进行排序，变成以下数据</span><br><span class="line">1-2-4-6-8</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;方式1</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(&quot;src.txt&quot;);</span><br><span class="line">        StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">        int c;</span><br><span class="line">        while((c&#x3D;fis.read())!&#x3D;-1)&#123;</span><br><span class="line">            sb.append((char)c);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] s&#x3D;sb.toString().split(&quot;-&quot;);</span><br><span class="line">        int[] arr&#x3D;new int[s.length];</span><br><span class="line">        for (int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            arr[i]&#x3D;Integer.parseInt(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        StringJoiner sj&#x3D;new StringJoiner(&quot;-&quot;);</span><br><span class="line">        for(int a:arr)&#123;</span><br><span class="line">            sj.add(&quot;&quot;+a);</span><br><span class="line">        &#125;</span><br><span class="line">        FileOutputStream fos&#x3D;new FileOutputStream(&quot;src.txt&quot;);</span><br><span class="line">        byte[] bytes&#x3D;sj.toString().getBytes();</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileReader fis&#x3D;new FileReader(&quot;src.txt&quot;);</span><br><span class="line">        StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">        int c;</span><br><span class="line">        while((c&#x3D;fis.read())!&#x3D;-1)&#123;</span><br><span class="line">            sb.append((char)c);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] sarr&#x3D;sb.toString().split(&quot;-&quot;);</span><br><span class="line">        Integer[] iarr&#x3D;Arrays.stream(sarr).</span><br><span class="line">                map(Integer::parseInt).</span><br><span class="line">                sorted().</span><br><span class="line">                toArray(Integer[]::new);</span><br><span class="line">        System.out.println(Arrays.toString(iarr));</span><br><span class="line">        String s&#x3D;Arrays.toString(iarr).</span><br><span class="line">                replace(&quot;, &quot;,&quot;-&quot;);</span><br><span class="line">        String str&#x3D;s.substring(1,s.length()-1);</span><br><span class="line">        FileWriter fos&#x3D;new FileWriter(&quot;src.txt&quot;);</span><br><span class="line">        fos.write(str);</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p><strong>原理</strong>：底层自带长度为8192的缓冲区提高性能，字节缓冲流8192个byte，字符缓冲流8192个char。  </p><ul><li>字节缓冲流，字节流本身并无缓冲区，但可加入缓冲流加快效率，即字节缓冲流<ul><li><strong>BufferedInputStream</strong>：字节缓冲输入流</li><li><strong>BufferedOutputStream</strong>：字节缓冲输出流</li></ul></li><li>字符缓冲流，字符缓冲流对效率提升不大，但字符缓冲流中特有方法比较重要<ul><li><strong>BufferedReader</strong>：字符缓冲输入流</li><li><strong>BufferedWriter</strong>：字符缓冲输出流</li></ul></li></ul><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h5><p><strong>格式</strong>：  </p><p>public BufferedInputStream(InputStream is)  </p><p><strong>说明</strong>：把基本流包装成高级流，提高读取数据的性能  </p><h5 id="BufferedOutputSream"><a href="#BufferedOutputSream" class="headerlink" title="BufferedOutputSream"></a>BufferedOutputSream</h5><p><strong>格式</strong>：  </p><p>public BufferedOutputStream(OutputStream os)  </p><p><strong>说明</strong>：把基本流包装成高级流，提高写出数据的性能</p><h5 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：</span><br><span class="line">利用字节缓冲流拷贝文件</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        BufferedInputStream bis&#x3D;new BufferedInputStream(new FileInputStream(&quot;src.txt&quot;));</span><br><span class="line">        BufferedOutputStream bos&#x3D;new BufferedOutputStream(new FileOutputStream(&quot;copy.txt&quot;));</span><br><span class="line">        byte[] bytes&#x3D;new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;bis.read(bytes))!&#x3D;-1)&#123;</span><br><span class="line">            bos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h5><p><strong>格式</strong>：  </p><p>public BufferedReader(Reader r)  </p><p><strong>说明</strong>：把基本流变成高级流</p><h5 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h5><p><strong>格式</strong>：  </p><p>public BufferedWriter(Writer r)  </p><p><strong>说明</strong>：把基本流变成高级流</p><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><h5 id="readLine"><a href="#readLine" class="headerlink" title="readLine"></a>readLine</h5><p><strong>格式</strong>：  </p><p>public String readLine()  </p><p><strong>说明</strong>：读取一行数据，遇到回车换行结束，读取的数据不包括回车换行，若没有数据可读，返回null</p><h5 id="newline"><a href="#newline" class="headerlink" title="newline"></a>newline</h5><p><strong>格式</strong>：  </p><p>public void newLine()  </p><p><strong>说明</strong>：跨平台的换行</p><h5 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*src.txt内容</span><br><span class="line">君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">天生我材必有用，千金散尽还复来。</span><br><span class="line">烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">与君歌一曲，请君为我倾耳听。</span><br><span class="line">钟鼓馔玉不足贵，但愿长醉不复醒。</span><br><span class="line">古来圣贤皆寂寞，惟有饮者留其名。</span><br><span class="line">陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new FileReader(&quot;src.txt&quot;));</span><br><span class="line">        BufferedWriter bw&#x3D;new BufferedWriter(new FileWriter(&quot;src.txt&quot;,true));</span><br><span class="line">        String s;</span><br><span class="line">        while((s&#x3D;br.readLine())!&#x3D;null)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(&quot;主人何为言少钱，径须沽取对君酌。&quot;);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(&quot;五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。&quot;);</span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印</span><br><span class="line">君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">天生我材必有用，千金散尽还复来。</span><br><span class="line">烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">与君歌一曲，请君为我倾耳听。</span><br><span class="line">钟鼓馔玉不足贵，但愿长醉不复醒。</span><br><span class="line">古来圣贤皆寂寞，惟有饮者留其名。</span><br><span class="line">陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*src.txt内容</span><br><span class="line">君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">天生我材必有用，千金散尽还复来。</span><br><span class="line">烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">与君歌一曲，请君为我倾耳听。</span><br><span class="line">钟鼓馔玉不足贵，但愿长醉不复醒。</span><br><span class="line">古来圣贤皆寂寞，惟有饮者留其名。</span><br><span class="line">陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">主人何为言少钱，径须沽取对君酌。</span><br><span class="line">五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><h4 id="例1-1"><a href="#例1-1" class="headerlink" title="例1"></a>例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;四种方式拷贝文件，并统计各自用时</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        method1();</span><br><span class="line">        method2();</span><br><span class="line">        method3();</span><br><span class="line">        method4();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method1() throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;方式1：字节流的基本流：一次读写一个字节&quot;);</span><br><span class="line">        FileInputStream fis1&#x3D;new FileInputStream(&quot;a.mp4&quot;);</span><br><span class="line">        FileOutputStream fos1&#x3D;new FileOutputStream(&quot;copy1.mp4&quot;);</span><br><span class="line">        int c;</span><br><span class="line">        long start&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;start:&quot;+start);</span><br><span class="line">        while((c&#x3D;fis1.read())!&#x3D;-1)&#123;</span><br><span class="line">            fos1.write(c);</span><br><span class="line">        &#125;</span><br><span class="line">        long end&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;end:&quot;+end);</span><br><span class="line">        fos1.close();</span><br><span class="line">        fis1.close();</span><br><span class="line">        System.out.println((end-start)&#x2F;1000.0+&quot;秒&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method2() throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;方式2：字节流的基本流，一次读写一个字节数组&quot;);</span><br><span class="line">        FileInputStream fis2&#x3D;new FileInputStream(&quot;a.mp4&quot;);</span><br><span class="line">        FileOutputStream fos2&#x3D;new FileOutputStream(&quot;copy2.mp4&quot;);</span><br><span class="line">        byte[] bytes2&#x3D;new byte[1024*1024*10];</span><br><span class="line">        long start&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;start:&quot;+start);</span><br><span class="line">        int len;</span><br><span class="line">        while((len&#x3D;fis2.read(bytes2))!&#x3D;-1)&#123;</span><br><span class="line">            fos2.write(bytes2,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        long end&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;end:&quot;+end);</span><br><span class="line">        fos2.close();</span><br><span class="line">        fis2.close();</span><br><span class="line">        System.out.println((end-start)&#x2F;1000.0+&quot;秒&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method3() throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;方式3：字节缓冲流：一次读写一个字节&quot;);</span><br><span class="line">        BufferedInputStream bis1&#x3D;new BufferedInputStream(new FileInputStream(&quot;a.mp4&quot;));</span><br><span class="line">        BufferedOutputStream bos1&#x3D;new BufferedOutputStream(new FileOutputStream(&quot;copy3.mp4&quot;));</span><br><span class="line">        int bc;</span><br><span class="line">        long start&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;start:&quot;+start);</span><br><span class="line">        while((bc&#x3D;bis1.read())!&#x3D;-1)&#123;</span><br><span class="line">            bos1.write(bc);</span><br><span class="line">        &#125;</span><br><span class="line">        long end&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;end:&quot;+end);</span><br><span class="line">        bos1.close();</span><br><span class="line">        bis1.close();</span><br><span class="line">        System.out.println((end-start)&#x2F;1000.0+&quot;秒&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method4() throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;方式4：字节缓冲流，一次读写一个字节数组&quot;);</span><br><span class="line">        BufferedInputStream bis2&#x3D;new BufferedInputStream(new FileInputStream(&quot;a.mp4&quot;));</span><br><span class="line">        BufferedOutputStream bos2&#x3D;new BufferedOutputStream(new FileOutputStream(&quot;copy4.mp4&quot;));</span><br><span class="line">        int blen;</span><br><span class="line">        byte[] bbytes&#x3D;new byte[1024*1024*10];</span><br><span class="line">        long start&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;start:&quot;+start);</span><br><span class="line">        while((blen&#x3D;bis2.read(bbytes))!&#x3D;-1)&#123;</span><br><span class="line">            bos2.write(bbytes,0,blen);</span><br><span class="line">        &#125;</span><br><span class="line">        long end&#x3D;System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;end:&quot;+end);</span><br><span class="line">        bos2.close();</span><br><span class="line">        bis2.close();</span><br><span class="line">        System.out.println((end-start)&#x2F;1000.0+&quot;秒&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">方式1：字节流的基本流：一次读写一个字节</span><br><span class="line">start:1680080313285</span><br><span class="line">end:1680081118655</span><br><span class="line">805.37秒</span><br><span class="line">方式2：字节流的基本流，一次读写一个字节数组</span><br><span class="line">start:1680081118661</span><br><span class="line">end:1680081118804</span><br><span class="line">0.143秒</span><br><span class="line">方式3：字节缓冲流：一次读写一个字节</span><br><span class="line">start:1680081118806</span><br><span class="line">end:1680081119696</span><br><span class="line">0.89秒</span><br><span class="line">方式4：字节缓冲流，一次读写一个字节数组</span><br><span class="line">start:1680081119701</span><br><span class="line">end:1680081119846</span><br><span class="line">0.145秒</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;给《将进酒》的文章顺序进行恢复到一个新文件夹中</span><br><span class="line">&#x2F;*src.txt</span><br><span class="line">2.君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">3.人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">1.君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">12.五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</span><br><span class="line">4.天生我材必有用，千金散尽还复来。</span><br><span class="line">5.烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">7.与君歌一曲，请君为我倾耳听。</span><br><span class="line">10.陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">11.主人何为言少钱，径须沽取对君酌。</span><br><span class="line">9.古来圣贤皆寂寞，惟有饮者留其名。</span><br><span class="line">6.岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">8.钟鼓馔玉不足贵，但愿长醉不复醒。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        BufferedReader bis&#x3D;new BufferedReader(new FileReader(&quot;src.txt&quot;));</span><br><span class="line">        BufferedWriter bos&#x3D;new BufferedWriter(new FileWriter(&quot;det.txt&quot;));</span><br><span class="line">        TreeSet&lt;String&gt; ts&#x3D;new TreeSet&lt;&gt;((o1,o2) -&gt;Integer.parseInt(o1.split(&quot;\\.&quot;)[0])-Integer.parseInt(o2.split(&quot;\\.&quot;)[0]));</span><br><span class="line">        String s;</span><br><span class="line">        while((s&#x3D;bis.readLine())!&#x3D;null)&#123;</span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        for(String str:ts)&#123;</span><br><span class="line">            bos.write(str);</span><br><span class="line">            bos.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*det文件</span><br><span class="line">1.君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">2.君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">3.人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">4.天生我材必有用，千金散尽还复来。</span><br><span class="line">5.烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">6.岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">7.与君歌一曲，请君为我倾耳听。</span><br><span class="line">8.钟鼓馔玉不足贵，但愿长醉不复醒。</span><br><span class="line">9.古来圣贤皆寂寞，惟有饮者留其名。</span><br><span class="line">10.陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">11.主人何为言少钱，径须沽取对君酌。</span><br><span class="line">12.五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="例3-1"><a href="#例3-1" class="headerlink" title="例3"></a>例3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*实现一个验证程序运行次数的小程序，要求如下：</span><br><span class="line">1.当程序运行次数超过3次，给出提示：运行次数超过3次，请充值会员后使用</span><br><span class="line">2.程序运行演示如下：</span><br><span class="line">第一次：第1次运行此文件</span><br><span class="line">第二次：第2次运行此文件</span><br><span class="line">第三次：第3次运行此文件</span><br><span class="line">第四次及以后：运行次数超过3次，请充值会员后使用</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new FileReader(&quot;src.txt&quot;));</span><br><span class="line">        int c&#x3D;Integer.parseInt(br.readLine());</span><br><span class="line">        c++;</span><br><span class="line">        if(c&lt;&#x3D;3)&#123;</span><br><span class="line">            System.out.println(&quot;第&quot;+c+&quot;次运行此文件&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;运行次数超过3次，请充值会员后使用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedWriter bw&#x3D;new BufferedWriter(new FileWriter(&quot;src.txt&quot;));</span><br><span class="line">        bw.write(c+&quot;&quot;);</span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p><strong>转换流</strong>是字符流和字节流之间的桥梁。  </p><p>作用：</p><ol><li>指定字符集读写（在jdk11被淘汰）</li><li>字节流想要使用字符流中的方法</li></ol><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p>将<strong>字节流</strong>转换成<strong>字符流</strong>，可以根据字符集一次读取多个字节，读取数据不会乱码</p><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><p>将<strong>字符流</strong>转换成<strong>字节流</strong>。</p><h3 id="范例-5"><a href="#范例-5" class="headerlink" title="范例"></a>范例</h3><h4 id="例1-2"><a href="#例1-2" class="headerlink" title="例1"></a>例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;利用转换流按照指定字符编码读取</span><br><span class="line">&#x2F;&#x2F;jdk8</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        InputStreamReader isr&#x3D;new InputStreamReader(new FileInputStream(&quot;src.txt&quot;),&quot;GBK&quot;);</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;isr.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;jdk11</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileReader fr&#x3D;new FileReader(&quot;src.txt&quot;,Charset.forName(&quot;GBK&quot;));</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;fr.read())!&#x3D;-1)&#123;</span><br><span class="line">            System.out.print((char)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例2-2"><a href="#例2-2" class="headerlink" title="例2"></a>例2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;利用转换流按照指定字符编码写出</span><br><span class="line">&#x2F;&#x2F;jdk8</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        OutputStreamWriter osr&#x3D;new OutputStreamWriter(new FileOutputStream(&quot;src.txt&quot;),&quot;GBK&quot;);</span><br><span class="line">        osr.write(&quot;你好！&quot;);</span><br><span class="line">        osr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;jdk11</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileWriter fw&#x3D;new FileWriter(&quot;src.txt&quot;, Charset.forName(&quot;GBK&quot;));</span><br><span class="line">        fw.write(&quot;你好啊&quot;);</span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例3-2"><a href="#例3-2" class="headerlink" title="例3"></a>例3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将本地文件的GBK文件，转成UTF-8文件</span><br><span class="line">&#x2F;&#x2F;jdk8</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        InputStreamReader isr&#x3D;new InputStreamReader(new FileInputStream(&quot;src.txt&quot;),&quot;GBK&quot;);</span><br><span class="line">        OutputStreamWriter osw&#x3D;new OutputStreamWriter(new FileOutputStream(&quot;det.txt&quot;),&quot;UTF-8&quot;);</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;isr.read())!&#x3D;-1)&#123;</span><br><span class="line">            osw.write(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;jdk11</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileReader fr&#x3D;new FileReader(&quot;src.txt&quot;, Charset.forName(&quot;GBK&quot;));</span><br><span class="line">        FileWriter fw&#x3D;new FileWriter(&quot;det.txt&quot;,Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        int ch;</span><br><span class="line">        while((ch&#x3D;fr.read())!&#x3D;-1)&#123;</span><br><span class="line">            fw.write(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;利用字节流读取文件中的数据，每次读一整行，而且不能出现乱码</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        InputStreamReader isr&#x3D;new InputStreamReader(new FileInputStream(&quot;src.txt&quot;),&quot;GBK&quot;);</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(isr);</span><br><span class="line">        String s;</span><br><span class="line">        while((s&#x3D;br.readLine())!&#x3D;null)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化流和反序列化流"><a href="#序列化流和反序列化流" class="headerlink" title="序列化流和反序列化流"></a>序列化流和反序列化流</h2><p><strong>细节</strong>：</p><ol><li>使用序列化流将对象写到文件时，需使javabean类实现<strong>Serializable</strong>接口，否则就会出现NotSerializableException异常</li><li>序列化流写到文件中的数据不可修改，一旦修改就无法再读回来</li><li>序列化对象后，修改Javabean类，再次序列化，便会抛出InvalidClassException异常<ul><li><strong>解决方案</strong>：可以通过给javabean类添加serialVersionUID(版本号，序列号)</li></ul></li><li>若对象中的某成员变量不想被序列化，则给该变量添加transient关键字修饰，该关键字表示的成员变量不参与序列化过程。</li></ol><h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><p>又称<strong>对象操作输出流</strong>，可以把java中的对象写到本地文件中。  </p><p>对象需要实现<strong>Serializable</strong>接口，写到文件中的内容是看不懂的。  </p><p><strong>Serializable</strong>接口里面没有抽象方法，标记性接口。  </p><p>实现了该接口，就表示当前的类可以被序列化。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><p>public ObjectOutputStream(OutputStream out)  </p><p><strong>说明</strong>：把基本流包装成高级流</p><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>public final void writeObject(Object obj)  </p><p><strong>说明</strong>：把对象序列化（写出）到文件夹中去</p><h4 id="范例-6"><a href="#范例-6" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(int age, String name) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;age &#x3D; &quot; + age + &quot;, name &#x3D; &quot; + name + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Student student&#x3D;new Student(19,&quot;张三&quot;);</span><br><span class="line">        ObjectOutputStream oos&#x3D;new ObjectOutputStream(new FileOutputStream(&quot;src.txt&quot;));</span><br><span class="line">        oos.writeObject(student);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反序列流"><a href="#反序列流" class="headerlink" title="反序列流"></a>反序列流</h3><p>又称<strong>对象操作输入流</strong>，可以把序列化到本地文件中的对象，读取到程序中来。  </p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><p>public ObjectInputStream(OutputStream out)  </p><p><strong>说明</strong>：把基本流包装成高级流</p><h4 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h4><p>public final Object readObject()  </p><p><strong>说明</strong>：把序列化到本地文件中的对象，读取到程序中来。  </p><h4 id="范例-7"><a href="#范例-7" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(int age, String name) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;age &#x3D; &quot; + age + &quot;, name &#x3D; &quot; + name + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream oim&#x3D;new ObjectInputStream(new FileInputStream(&quot;src.txt&quot;));</span><br><span class="line">        Student student&#x3D;(Student)oim.readObject();</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范例-8"><a href="#范例-8" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将多个自定义对象序列化到文件中，由于对象个数不确定，反序列化该如何读取？</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Student implements Serializable&#123;</span><br><span class="line">    private static final long serialVersionUID &#x3D; -4683704568207367494L;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(int age, String name) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;age &#x3D; &quot; + age + &quot;, name &#x3D; &quot; + name + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Student s1&#x3D;new Student(19,&quot;张三&quot;);</span><br><span class="line">        Student s2&#x3D;new Student(18,&quot;李四&quot;);</span><br><span class="line">        Student s3&#x3D;new Student(20,&quot;王五&quot;);</span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        ObjectOutputStream oos&#x3D;new ObjectOutputStream(new FileOutputStream(&quot;src.txt&quot;));</span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test1.java</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream ois&#x3D;new ObjectInputStream(new FileInputStream(&quot;src.txt&quot;));</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;(ArrayList&lt;Student&gt;) ois.readObject();</span><br><span class="line">        for (Student student:list)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Student&#123;age &#x3D; 19, name &#x3D; 张三&#125;</span><br><span class="line">Student&#123;age &#x3D; 18, name &#x3D; 李四&#125;</span><br><span class="line">Student&#123;age &#x3D; 20, name &#x3D; 王五&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p><strong>打印流</strong>一般是指：PrintStream，PrintWriter两个类。  </p><p><strong>特点</strong>：</p><ol><li>打印流只操作文件目的地，不操作数据源</li><li>特有的写出方法可以实现，数据原样打出</li><li>特有的写出方法。可以实现自动刷新。自动换行，打印一次数据=写出+换行+刷新</li></ol><p><strong>注</strong>：字节流底层没有缓冲区，开不开自动刷新都一样</p><h3 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><p><strong>格式1</strong>：  </p><p>public PrintStream(OutputStream/File/String)  </p><p><strong>说明</strong>：关联字节输出流/文件/文件路径  </p><p><strong>格式2</strong>：  </p><p>public PrintStream(String fileName,Charset charset)  </p><p><strong>说明</strong>：指定字节编码  </p><p><strong>格式3</strong>：  </p><p>public PrintStream(OutputStream out,boolean autoFlush)  </p><p><strong>说明</strong>：自动刷新  </p><p><strong>格式4</strong>：  </p><p>public PrintStream(OutputStream out,boolean autoFlush,String encoding)  </p><p><strong>说明</strong>：指定字符编码且自动刷新</p><h4 id="成员方法-2"><a href="#成员方法-2" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="write"><a href="#write" class="headerlink" title="write"></a>write</h5><p><strong>格式</strong>：  </p><p>public void write(int b)  </p><p><strong>说明</strong>：常规方法，规则跟之前一样，将指定的字节写出。</p><h5 id="println"><a href="#println" class="headerlink" title="println"></a>println</h5><p><strong>格式</strong>：  </p><p>public void println(Xxx xx)  </p><p><strong>说明</strong>：特有方法，打印任意数据，自动刷新，自动换行，数据原样写出</p><h5 id="print"><a href="#print" class="headerlink" title="print"></a>print</h5><p><strong>格式</strong>：  </p><p>public void print(Xxx xx)  </p><p><strong>说明</strong>：特有方法，打印任意数据，不换行，数据原样写出</p><h5 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h5><p><strong>格式</strong>：  </p><p>public void printf(String format,Object…args)  </p><p><strong>说明</strong>：特有方法，带有占位符的打印语句，不换行，数据原样写出</p><h4 id="范例-9"><a href="#范例-9" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException &#123;</span><br><span class="line">        PrintStream ps&#x3D;new PrintStream(new FileOutputStream(&quot;src.txt&quot;),true,&quot;GBK&quot;);</span><br><span class="line">        ps.println(97);</span><br><span class="line">        ps.print(true);</span><br><span class="line">        ps.println();</span><br><span class="line">        ps.printf(&quot;学生姓名：%s，年龄%d&quot;,&quot;张三&quot;,18);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*src.txt内容</span><br><span class="line">97</span><br><span class="line">true</span><br><span class="line">学生姓名：张三，年龄18</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h3><p>字符流底层有缓冲区，要自动刷新需要开启。  </p><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><p><strong>格式1</strong>：  </p><p>public PrintWriter(Write/File/String)  </p><p><strong>说明</strong>：关联字符输出流/文件/文件路径  </p><p><strong>格式2</strong>：  </p><p>public PrintWriter(String fileName,Charset charset)  </p><p><strong>说明</strong>：指定字符编码  </p><p><strong>格式3</strong>：  </p><p>public PrintWriter(Write out,boolean autoFlush)  </p><p><strong>说明</strong>：自动刷新  </p><p><strong>格式4</strong>：  </p><p>public PrintWriter(OutputStream,boolean autoFlush,String encoding)  </p><p><strong>说明</strong>：指定字符编码且自动刷新</p><h4 id="成员方法-3"><a href="#成员方法-3" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="write-1"><a href="#write-1" class="headerlink" title="write"></a>write</h5><p><strong>格式</strong>：  </p><p>public void write(int b)  </p><p><strong>说明</strong>：常规方法，规则跟之前一样，写出字节或字符串。</p><h5 id="println-1"><a href="#println-1" class="headerlink" title="println"></a>println</h5><p><strong>格式</strong>：  </p><p>public void println(Xxx xx)  </p><p><strong>说明</strong>：特有方法，打印任意数据且换行，数据原样写出</p><h5 id="print-1"><a href="#print-1" class="headerlink" title="print"></a>print</h5><p><strong>格式</strong>：  </p><p>public void print(Xxx xx)  </p><p><strong>说明</strong>：特有方法，打印任意数据，不换行，数据原样写出</p><h5 id="printf-1"><a href="#printf-1" class="headerlink" title="printf"></a>printf</h5><p><strong>格式</strong>：  </p><p>public void printf(String format,Object…args)  </p><p><strong>说明</strong>：特有方法，带有占位符的打印语句，不换行，数据原样写出</p><h4 id="范例-10"><a href="#范例-10" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        PrintWriter pw&#x3D;new PrintWriter(new FileWriter(&quot;src.txt&quot;),true);</span><br><span class="line">        pw.println(97);</span><br><span class="line">        pw.print(true);</span><br><span class="line">        pw.println();</span><br><span class="line">        pw.printf(&quot;学生姓名：%s，年龄%d&quot;,&quot;张三&quot;,18);</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><p>压缩包里的每一个文件。在Java中都是一个ZipEntry对象。  </p><p>在java中只能识别zip格式的压缩包</p><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p><strong>解压本质</strong>：把每一个ZipEntry按照层级拷贝到本地另一个文件夹中。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.zip.ZipEntry;</span><br><span class="line">import java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建一个File表示要解压的文件</span><br><span class="line">        File src&#x3D;new File(&quot;d:\\javafiletest.zip&quot;);</span><br><span class="line">        &#x2F;&#x2F;创建一个File表示解压的目的地</span><br><span class="line">        File det&#x3D;new File(&quot;d:\\&quot;);</span><br><span class="line">        unzip(src,det);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void unzip(File src,File det) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建一个解压缩流用来读取压缩包中的数据</span><br><span class="line">        ZipInputStream zip&#x3D;new ZipInputStream(new FileInputStream(src));</span><br><span class="line">        &#x2F;&#x2F;要先获取到压缩包里的每个zipEntry对象</span><br><span class="line">        &#x2F;&#x2F;表示当前在压缩包中获取到的文件或文件夹</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        while((entry&#x3D;zip.getNextEntry())!&#x3D;null)&#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            if(entry.isDirectory())&#123;</span><br><span class="line">                &#x2F;&#x2F;若entry是文件夹，则创建对应的文件夹</span><br><span class="line">                File file&#x3D;new File(det,entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;entry是文件，读取该文件，并将其放到指定位置</span><br><span class="line">                FileOutputStream fos&#x3D;new FileOutputStream(new File(det,entry.toString()));</span><br><span class="line">                int ch;</span><br><span class="line">                while ((ch&#x3D;zip.read())!&#x3D;-1)&#123;</span><br><span class="line">                    &#x2F;&#x2F;写到目的地</span><br><span class="line">                    fos.write((char)ch);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                &#x2F;&#x2F;表示在压缩包中一个文件处理完毕</span><br><span class="line">                zip.closeEntry();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        zip.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><strong>压缩本质</strong>：把每一个（文件/文件夹）看成ZipEntry对象放到压缩包中。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;压缩单个文件</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.zip.ZipEntry;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建一个File表示要压缩的文件</span><br><span class="line">        File src&#x3D;new File(&quot;d:\\javafiletest\\b.txt&quot;);</span><br><span class="line">        &#x2F;&#x2F;创建一个File表示压缩包的位置</span><br><span class="line">        File det&#x3D;new File(&quot;d:\\javafiletest\\b.zip&quot;);</span><br><span class="line">        zip(src,det);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void zip(File src,File det) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建关联压缩包</span><br><span class="line">        ZipOutputStream zos&#x3D;new ZipOutputStream(new FileOutputStream(det));</span><br><span class="line">        &#x2F;&#x2F;创建ZipEntry对象，表示压缩包里面的每个文件和文件夹</span><br><span class="line">        ZipEntry zipEntry&#x3D;new ZipEntry(&quot;b.txt&quot;);</span><br><span class="line">        &#x2F;&#x2F;把ZipEntry对象放到压缩包中</span><br><span class="line">        zos.putNextEntry(zipEntry);</span><br><span class="line">        &#x2F;&#x2F;把src文件的数据写到压缩包中</span><br><span class="line">        FileInputStream fis&#x3D;new FileInputStream(src);</span><br><span class="line">        int c;</span><br><span class="line">        while((c&#x3D;fis.read())!&#x3D;-1)&#123;</span><br><span class="line">            zos.write(c);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        zos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;压缩文件夹</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.zip.ZipEntry;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        File src&#x3D;new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        File destParent&#x3D;src.getParentFile();</span><br><span class="line">        File det&#x3D;new File(destParent,src.getName()+&quot;.zip&quot;);</span><br><span class="line">        ZipOutputStream zos&#x3D;new ZipOutputStream(new FileOutputStream(det));</span><br><span class="line">        directoryZip(src,zos,src.getName());</span><br><span class="line">        zos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void directoryZip(File src,ZipOutputStream zos,String name) throws IOException &#123;</span><br><span class="line">        File[] files&#x3D;src.listFiles();</span><br><span class="line">        for(File file:files)&#123;</span><br><span class="line">            if(file.isFile())&#123;</span><br><span class="line">                ZipEntry zipEntry&#x3D;new ZipEntry(name+&quot;\\&quot;+file.getName());</span><br><span class="line">                zos.putNextEntry(zipEntry);</span><br><span class="line">                FileInputStream fis&#x3D;new FileInputStream(file);</span><br><span class="line">                int c;</span><br><span class="line">                while ((c&#x3D;fis.read())!&#x3D;-1)&#123;</span><br><span class="line">                    zos.write(c);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                directoryZip(file,zos,name+&quot;\\&quot;+file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Common-io"><a href="#Common-io" class="headerlink" title="Common-io"></a>Common-io</h2><p>Common-io是apache开源基金组织提供的一组有关IO操作的开源工具包。  </p><p><strong>作用</strong>：提高IO流的开发效率  </p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>IDEA下的使用步骤：</p><ol><li>在项目中创建文件lib</li><li>将jar包复制粘贴到lib文件夹</li><li>右键点击jar包，选择Add as Library-&gt;点击OK</li><li>在类中导包使用</li></ol><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><h4 id="FileUtils类"><a href="#FileUtils类" class="headerlink" title="FileUtils类"></a>FileUtils类</h4><p>FileUtils类，文件/文件夹相关。</p><h5 id="copyFile"><a href="#copyFile" class="headerlink" title="copyFile"></a>copyFile</h5><p>static void copyFile(File srcFile,File destFile)  </p><p><strong>说明</strong>：复制文件</p><h5 id="copyDirectory"><a href="#copyDirectory" class="headerlink" title="copyDirectory"></a>copyDirectory</h5><p>static void copyDirectory(File srcDir,File destDir)  </p><p><strong>说明</strong>：复制文件夹</p><h5 id="copDirectoryToDirectory"><a href="#copDirectoryToDirectory" class="headerlink" title="copDirectoryToDirectory"></a>copDirectoryToDirectory</h5><p>static void copDirectoryToDirectory(File srcDir,File destDir)  </p><p><strong>说明</strong>：复制文件夹，包括最顶层的文件夹</p><h5 id="deleteDirectory"><a href="#deleteDirectory" class="headerlink" title="deleteDirectory"></a>deleteDirectory</h5><p>static void deleteDirectory(File Directory)  </p><p><strong>说明</strong>：删除文件夹</p><h5 id="clearDirectory"><a href="#clearDirectory" class="headerlink" title="clearDirectory"></a>clearDirectory</h5><p>static void clearDirectory()  </p><p><strong>说明</strong>：清空文件夹</p><h4 id="IOUtils类"><a href="#IOUtils类" class="headerlink" title="IOUtils类"></a>IOUtils类</h4><p>IOUtils类（流相关相关）</p><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><p>public static int copy(InputStream input,OutStream output)  </p><p><strong>说明</strong>：复制文件</p><h5 id="copyLarge"><a href="#copyLarge" class="headerlink" title="copyLarge"></a>copyLarge</h5><p>public static int copyLarge(Reader input,Writer output)  </p><p><strong>说明</strong>：复制大文件</p><h5 id="readlines"><a href="#readlines" class="headerlink" title="readlines"></a>readlines</h5><p>public static String readlines(Reader input)  </p><p><strong>说明</strong>：读取数据</p><h5 id="write-2"><a href="#write-2" class="headerlink" title="write"></a>write</h5><p>public static void write(String data,OutputStream output)  </p><p><strong>说明</strong>：写出数据</p><h2 id="hutool"><a href="#hutool" class="headerlink" title="hutool"></a>hutool</h2><h3 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h3><h4 id="FileUtil类"><a href="#FileUtil类" class="headerlink" title="FileUtil类"></a>FileUtil类</h4><h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><p><strong>说明</strong>：根据参数创建一个File对象，参数可以是多个字符串</p><h5 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h5><p><strong>说明</strong>：根据参数创建对象，若父级路径不存在，则会自动创建父级路径</p><h5 id="writeLines"><a href="#writeLines" class="headerlink" title="writeLines"></a>writeLines</h5><p><strong>说明</strong>：把集合中的数据写出到文件中，覆盖模式</p><h5 id="appendLines"><a href="#appendLines" class="headerlink" title="appendLines"></a>appendLines</h5><p><strong>说明</strong>：把集合中的数据写出到文件中，续写模式</p><h5 id="readLines"><a href="#readLines" class="headerlink" title="readLines"></a>readLines</h5><p><strong>说明</strong>：指定字符编码，把文件中的数据，读到集合中</p><h5 id="readUtf8Lines"><a href="#readUtf8Lines" class="headerlink" title="readUtf8Lines"></a>readUtf8Lines</h5><p><strong>说明</strong>：按照Utf-8的形式，把文件中的数据，读到集合中</p><h5 id="copy-1"><a href="#copy-1" class="headerlink" title="copy"></a>copy</h5><p><strong>说明</strong>：拷贝文件或文件夹</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File（十七）</title>
      <link href="2023/03/26/J17/"/>
      <url>2023/03/26/J17/</url>
      
        <content type="html"><![CDATA[<h1 id="File（十七）"><a href="#File（十七）" class="headerlink" title="File（十七）"></a>File（十七）</h1><p><strong>File对象</strong>表示路径，可以是文件，可以是文件夹，该路径可存在，可不存在。  </p><p><strong>绝对路径</strong>：绝对路径是带盘符的。  </p><p><strong>相对路径</strong>：相对路径不带盘符，默认到当前项目下去找。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;格式1</span><br><span class="line">public File(String pathname)</span><br><span class="line">把字符串表示的路径变成File对象</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;格式2</span><br><span class="line">public File(String parent,String child)</span><br><span class="line">把父级路径和子级路径进行拼接</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;格式3</span><br><span class="line">public File(File parent,String child)</span><br><span class="line">&#x2F;&#x2F;把父级路径对应文件对象和子级路径进行拼接</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;public File(String pathname)</span><br><span class="line">        String pathname&#x3D;&quot;d:\\javafiletest\\a.txt&quot;;</span><br><span class="line">        File file1&#x3D;new File(pathname);</span><br><span class="line">        System.out.println(file1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public File(String parent,String child)</span><br><span class="line">        String parent1&#x3D;&quot;d:\\javafiletest&quot;;</span><br><span class="line">        String child1&#x3D;&quot;a.txt&quot;;</span><br><span class="line">        File file2&#x3D;new File(parent1,child1);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public File(File parent,String child)</span><br><span class="line">        File file3&#x3D;new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        String child2&#x3D;&quot;a.txt&quot;;</span><br><span class="line">        File file4&#x3D;new File(file3,child2);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">d:\javafiletest\a.txt</span><br><span class="line">d:\javafiletest\a.txt</span><br><span class="line">d:\javafiletest\a.txt</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="常用成员方法"><a href="#常用成员方法" class="headerlink" title="常用成员方法"></a>常用成员方法</h2><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h4><p><strong>格式</strong>：  </p><p>public boolean isDirectory()  </p><p><strong>说明</strong>：判断此路径名表示的File是否为文件夹</p><h4 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h4><p><strong>格式</strong>：  </p><p>public boolean isFile()  </p><p><strong>说明</strong>：判断此路径名表示的File是否为文件</p><h4 id="exits"><a href="#exits" class="headerlink" title="exits"></a>exits</h4><p><strong>格式</strong>：  </p><p>public boolean exits()  </p><p><strong>说明</strong>：判断此路径名表示的File是否存在</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file&#x3D;new File(&quot;d:\\javafiletest\\a.txt&quot;);</span><br><span class="line">        System.out.println(&quot;isDirectory：&quot;+file.isDirectory());&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;isFile：&quot;+file.isFile());&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;exists：&quot;+file.exists());&#x2F;&#x2F;true</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file1&#x3D;new File(&quot;d:\\javafiletest\\b&quot;);</span><br><span class="line">        System.out.println(&quot;isDirectory：&quot;+file1.isDirectory());&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;isFile：&quot;+file1.isFile());&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;exists：&quot;+file1.exists());&#x2F;&#x2F;true</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file2&#x3D;new File(&quot;d:\\javafiletest\\c&quot;);</span><br><span class="line">        System.out.println(&quot;isDirectory：&quot;+file2.isDirectory());&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;isFile：&quot;+file2.isFile());&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;exists：&quot;+file2.exists());&#x2F;&#x2F;false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">isDirectory：false</span><br><span class="line">isFile：true</span><br><span class="line">exists：true</span><br><span class="line"></span><br><span class="line">isDirectory：true</span><br><span class="line">isFile：false</span><br><span class="line">exists：true</span><br><span class="line"></span><br><span class="line">isDirectory：false</span><br><span class="line">isFile：false</span><br><span class="line">exists：false</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p><strong>格式</strong>：  </p><p>public long length()  </p><p><strong>说明</strong>：返回文件的大小（单位字节），无法获得文件夹的大小，若使用该方法返回文件夹大小，会返回错误值</p><h4 id="getAbsolutePath"><a href="#getAbsolutePath" class="headerlink" title="getAbsolutePath"></a>getAbsolutePath</h4><p><strong>格式</strong>：  </p><p>public String getAbsolutePath()  </p><p><strong>说明</strong>：返回文件的绝对路径</p><h4 id="getPath"><a href="#getPath" class="headerlink" title="getPath"></a>getPath</h4><p><strong>格式</strong>：  </p><p>public String getPath()  </p><p><strong>说明</strong>：返回定义文件时使用的路径</p><h4 id="getName"><a href="#getName" class="headerlink" title="getName"></a>getName</h4><p><strong>格式</strong>：  </p><p>public String getName()  </p><p><strong>说明</strong>：返回文件的名称，带后缀，若返回文件夹，则不带后缀，就是文件夹的名字</p><h4 id="lastModified"><a href="#lastModified" class="headerlink" title="lastModified"></a>lastModified</h4><p><strong>格式</strong>：  </p><p>public long lastModified()  </p><p><strong>说明</strong>：返回文件的最后修改时间</p><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file&#x3D;new File(&quot;D:\\javafiletest\\a.txt&quot;);</span><br><span class="line">        File directory&#x3D;new File(&quot;D:\\javafiletest\\b&quot;);</span><br><span class="line">        System.out.println(&quot;length方法&quot;);</span><br><span class="line">        System.out.println(file.length()+&quot;字节&quot;);</span><br><span class="line">        System.out.println(directory.length()+&quot;字节&quot;);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;getAbsolutePath方法&quot;);</span><br><span class="line">        File file1&#x3D;new File(&quot;practice\\b.txt&quot;);</span><br><span class="line">        System.out.println(file.getAbsoluteFile());</span><br><span class="line">        System.out.println(file1.getAbsoluteFile());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;getPath方法&quot;);</span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;getName方法&quot;);</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">        System.out.println(directory.getName());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;lastModified方法&quot;);</span><br><span class="line">        int l&#x3D;(int)file.lastModified();</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">length方法</span><br><span class="line">7字节</span><br><span class="line">0字节</span><br><span class="line"></span><br><span class="line">getAbsolutePath方法</span><br><span class="line">D:\javafiletest\a.txt</span><br><span class="line">D:\Javacode\practice\practice\b.txt</span><br><span class="line"></span><br><span class="line">getPath方法</span><br><span class="line">D:\javafiletest\a.txt</span><br><span class="line">practice\b.txt</span><br><span class="line"></span><br><span class="line">getName方法</span><br><span class="line">a.txt</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">lastModified方法</span><br><span class="line">389686339</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="createNewFile"><a href="#createNewFile" class="headerlink" title="createNewFile"></a>createNewFile</h4><p><strong>格式</strong>：  </p><p>public boolean createNewFile()  </p><p><strong>说明</strong>：创建一个新的空的文件  </p><p><strong>细节</strong>:</p><ol><li>若当前路径表示的文件是不存在的，则创建成功，方法返回true</li><li>若当前路径表示的文件是存在的，则创建失败，方法返回false</li><li>若父级路径是不存在的，那么方法会有异常IOException</li><li>createNewfFile方法创建的一定是文件，若路径中不包含后缀名，则创建一个没有后缀的文件</li></ol><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p><strong>格式</strong>：  </p><p>public boolean mkdir()  </p><p><strong>说明</strong>：创建单级文件夹  </p><p><strong>细节</strong>：</p><ol><li>Windows当中路径是唯一的，若当前路径已存在，则创建失败，返回false</li><li>mkdir方法只能创建单级文件夹，无法创建多级文件夹</li></ol><h4 id="mkdirs"><a href="#mkdirs" class="headerlink" title="mkdirs"></a>mkdirs</h4><p><strong>格式</strong>：  </p><p>public boolean mkdirs()  </p><p><strong>说明</strong>：创建多级文件夹</p><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;d:\javafiletest文件夹初始为空</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;createNewFile方法&quot;);</span><br><span class="line">        File file1&#x3D;new File(&quot;D:\\javafiletest\\a.txt&quot;);</span><br><span class="line">        boolean flag1&#x3D;file1.createNewFile();</span><br><span class="line">        System.out.println(flag1);</span><br><span class="line"></span><br><span class="line">        File file2&#x3D;new File(&quot;D:\\javafiletest\\a.txt&quot;);</span><br><span class="line">        boolean flag2&#x3D;file2.createNewFile();</span><br><span class="line">        System.out.println(flag2);</span><br><span class="line"></span><br><span class="line">        File file3&#x3D;new File(&quot;D:\\javafiletest\\a&quot;);</span><br><span class="line">        boolean flag3&#x3D;file3.createNewFile();</span><br><span class="line">        System.out.println(flag3);</span><br><span class="line"></span><br><span class="line">        File file4&#x3D;new File(&quot;D:\\aaa\\a.txt&quot;);</span><br><span class="line">        boolean flag4&#x3D;file4.createNewFile();</span><br><span class="line">        System.out.println(flag4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">createNewFile方法</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">Exception in thread &quot;main&quot; java.io.IOException: 系统找不到指定的路径。</span><br><span class="line">at java.io.WinNTFileSystem.createFileExclusively(Native Method)</span><br><span class="line">at java.io.File.createNewFile(File.java:1012)</span><br><span class="line">at Test.main(Test.java:20)</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;d:\javafiletest文件夹初始为空</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;mkdir方法&quot;);</span><br><span class="line">        File file5&#x3D;new File(&quot;D:\\javafiletest\\a&quot;);</span><br><span class="line">        System.out.println(file5.mkdir());</span><br><span class="line"></span><br><span class="line">        File file6&#x3D;new File(&quot;D:\\javafiletest\\b\\a&quot;);</span><br><span class="line">        System.out.println(file6.mkdir());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;mkdirs方法&quot;);</span><br><span class="line">        File file7&#x3D;new File(&quot;D:\\javafiletest\\b\\a&quot;);</span><br><span class="line">        System.out.println(file7.mkdirs());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">mkdir方法</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">mkdirs方法</span><br><span class="line">true</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p><strong>格式</strong>：  </p><p>public boolean delete()  </p><p><strong>说明</strong>：删除文件、空文件夹  </p><p><strong>细节</strong>：</p><ol><li>若删除的是文件，则直接删除，不走回收站</li><li>若删除的是空文件夹，则直接删除，不走回收站</li><li>若删除的是有内容的文件夹，则删除失败</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">d:\\javafiletest文件下有三条路径</span><br><span class="line">‪D:\javafiletest\a</span><br><span class="line">‪D:\javafiletest\b\b.txt</span><br><span class="line">‪D:\javafiletest\c.txt</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.File;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;delete方法&quot;);</span><br><span class="line">        File file1&#x3D;new File(&quot;D:\\javafiletest\\a&quot;);</span><br><span class="line">        System.out.println(file1.delete());</span><br><span class="line"></span><br><span class="line">        File file2&#x3D;new File(&quot;D:\\javafiletest\\c.txt&quot;);</span><br><span class="line">        System.out.println(file2.delete());</span><br><span class="line"></span><br><span class="line">        File file3&#x3D;new File(&quot;D:\\javafiletest\\b&quot;);</span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">delete方法</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="获取并遍历"><a href="#获取并遍历" class="headerlink" title="获取并遍历"></a>获取并遍历</h3><h4 id="listFiles"><a href="#listFiles" class="headerlink" title="listFiles"></a>listFiles</h4><p><strong>格式</strong>：  </p><p>public File[] listFiles()  </p><p><strong>说明</strong>：获取当前该路径下所有内容  </p><p><strong>细节</strong>：</p><ul><li>当调用者File表示的路径不存在时，返回null</li><li>当调用者File表示的路径是文件时，返回null</li><li>当调用者File表示的路径是一个空文件夹时，返回一个长度为0的数组</li><li>当调用者File表示的路径是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回</li><li>当调用者File表示的路径是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包含隐藏文件</li><li>当调用者File表示的路径是需要权限才能访问的文件夹时，返回null</li></ul><h4 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;listFiles方法&quot;);</span><br><span class="line">        File file&#x3D;new File(&quot;D:\\javafiletest&quot;);</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        for (File file1:files)&#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">listFiles方法</span><br><span class="line">D:\javafiletest\a</span><br><span class="line">D:\javafiletest\b</span><br><span class="line">D:\javafiletest\c.txt</span><br><span class="line">D:\javafiletest\d.txt</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">*&#x2F;&#x2F;&#x2F;需求：在当前模块下的aaa文件夹中创建一个a.txt文件</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        File file&#x3D;new File(&quot;aaa&quot;);</span><br><span class="line">        System.out.println(file.mkdirs());</span><br><span class="line">        File file1&#x3D;new File(file,&quot;a.txt&quot;);</span><br><span class="line">        boolean flag&#x3D;file1.createNewFile();</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            System.out.println(&quot;创建成功&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            System.out.println(&quot;创建失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">创建成功</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求：定义一个方法寻找d:\\javafiletest文件夹中，是否存在以.txt为结尾的文件（不考虑子文件夹）</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D; new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        if(findtxt(file))&#123;</span><br><span class="line">            System.out.println(&quot;存在&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            System.out.println(&quot;不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean findtxt(File file)&#123;</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        for (File f:files)&#123;</span><br><span class="line">            if(f.isFile()&amp;&amp;f.getName().endsWith(&quot;.txt&quot;))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求：找到d:\\javafiletest文件夹中所有以.txt结尾的文件</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D; new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        findtxt(file);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void findtxt(File file)&#123;</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        for (File f:files)&#123;</span><br><span class="line">            if(f.isDirectory())&#123;</span><br><span class="line">                findtxt(f);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(f.getName().endsWith(&quot;.txt&quot;))&#123;</span><br><span class="line">                    System.out.println(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求：删除一个多级文件夹</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D; new File(&quot;d:\\javafiletest\\test&quot;);</span><br><span class="line">        delete(file);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void delete(File file)&#123;</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        for (File f:files)&#123;</span><br><span class="line">            if(f.isFile())&#123;</span><br><span class="line">                f.delete();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                delete(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;计算文件总大小</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D; new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        System.out.println(statistic(file));</span><br><span class="line">    &#125;</span><br><span class="line">    public static long statistic(File file)&#123;</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        long sum&#x3D;0;</span><br><span class="line">        for(File f:files)&#123;</span><br><span class="line">            if(f.isFile())&#123;</span><br><span class="line">                sum+&#x3D;f.length();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                sum+&#x3D;statistic(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;36987</span><br></pre></td></tr></table></figure><h3 id="例6"><a href="#例6" class="headerlink" title="例6"></a>例6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：统计一个文件夹中每种文件的个数并打印。（考虑子文件夹）</span><br><span class="line">打印格式：</span><br><span class="line">txt:3个</span><br><span class="line">md:4个</span><br><span class="line">doc:5个</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        File file &#x3D; new File(&quot;d:\\javafiletest&quot;);</span><br><span class="line">        HashMap&lt;String,Integer&gt; hm&#x3D;getCount(file);</span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entries&#x3D;hm.entrySet();</span><br><span class="line">        for (Map.Entry&lt;String,Integer&gt; entry:entries)&#123;</span><br><span class="line">            System.out.println(entry.getKey()+&quot;:&quot;+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static HashMap&lt;String,Integer&gt; getCount(File file)&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; hm&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        File[] files&#x3D;file.listFiles();</span><br><span class="line">        for (File f:files) &#123;</span><br><span class="line">            &#x2F;&#x2F;文件</span><br><span class="line">            if(f.isFile())&#123;</span><br><span class="line">                String[] splits&#x3D;f.getName().split(&quot;\\.&quot;);</span><br><span class="line">                int length&#x3D;splits.length;</span><br><span class="line">                if(length!&#x3D;1)&#123;</span><br><span class="line">                    String s&#x3D;splits[splits.length-1];</span><br><span class="line">                    if(hm.containsKey(s))&#123;</span><br><span class="line">                        int count&#x3D;hm.get(s);</span><br><span class="line">                        count++;</span><br><span class="line">                        hm.put(s,count);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        hm.put(s,1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;文件夹</span><br><span class="line">            else &#123;</span><br><span class="line">                HashMap&lt;String,Integer&gt; hmSon&#x3D;getCount(f);</span><br><span class="line">                Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entries&#x3D;hmSon.entrySet();</span><br><span class="line">                for (Map.Entry&lt;String,Integer&gt; entry:entries)&#123;</span><br><span class="line">                    String key&#x3D;entry.getKey();</span><br><span class="line">                    int value&#x3D;entry.getValue();</span><br><span class="line">                    if(hm.containsKey(key))&#123;</span><br><span class="line">                        int i&#x3D;hm.get(key);</span><br><span class="line">                        i&#x3D;i+value</span><br><span class="line">                        hm.put(key,i);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        hm.put(key,value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return hm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">txt:7</span><br><span class="line">xlsx:3</span><br><span class="line">md:2</span><br><span class="line">doc:2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常（十六）</title>
      <link href="2023/03/25/J16/"/>
      <url>2023/03/25/J16/</url>
      
        <content type="html"><![CDATA[<h1 id="异常（十六）"><a href="#异常（十六）" class="headerlink" title="异常（十六）"></a>异常（十六）</h1><p><strong>异常</strong>就是代表程序出现的问题。  </p><p><strong>作用</strong>：</p><ol><li>异常是用来查询bug的关键参考信息</li><li>异常可以作为方法内部的一种特殊返回值，通知调用者底层的执行情况</li></ol><h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><p>java.lang.Throwable</p><ul><li><strong>Error</strong>：代表的系统级别错误（属于严重问题），开发人员不用去管</li><li><strong>Exception</strong>：就是常说的异常，代表程序可能会出现的问题，通常用Exception以及他的子类来封装程序出现的问题<ul><li><strong>编译时异常</strong>：并未继承RuntimeException的异常，直接继承于Exception，编译阶段就会出现错误提示</li><li><strong>运行时异常</strong>：RuntimeException及其子类，编译阶段不会出现异常提醒，而是运行时出现的异常。</li></ul></li></ul><h2 id="运行时异常和编译时异常"><a href="#运行时异常和编译时异常" class="headerlink" title="运行时异常和编译时异常"></a>运行时异常和编译时异常</h2><ul><li><strong>java文件</strong>通过<strong>javac</strong>命令进行编译，编译成<strong>字节码文件</strong>，该过程称为<strong>编译阶段</strong>，编译阶段就要进行处理的异常就是<strong>编译时异常</strong><ul><li><strong>编译阶段</strong>：java不会运行代码，只会检查语法是否错误，或者做一些性能的优化，更多是在提醒程序员检查本地信息</li></ul></li><li><strong>字节码文件</strong>通过<strong>java命令</strong>运行代码，在运行时出现的异常就是<strong>运行时异常</strong><ul><li>代码出错而导致程序出现问题</li></ul></li></ul><h2 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h2><ol><li>JVM默认的处理方式</li><li>自己处理（捕获异常）</li><li>抛出异常</li></ol><h3 id="JVM默认的处理方式"><a href="#JVM默认的处理方式" class="headerlink" title="JVM默认的处理方式"></a>JVM默认的处理方式</h3><p>把异常的名称，异常原因及异常出现的位置等信息输出在控制台，程序停止执行，下面的代码不会再执行。</p><h3 id="自己处理（捕获异常）"><a href="#自己处理（捕获异常）" class="headerlink" title="自己处理（捕获异常）"></a>自己处理（捕获异常）</h3><p><strong>格式1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;可能会出现异常的代码</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">&#x2F;&#x2F;异常的处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目的</strong>：当代码出现异常时，可让程序继续往下执行。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;可能出现异常的代码</span><br><span class="line">            System.out.println(arr[10]);</span><br><span class="line">            &#x2F;&#x2F;此处出现异常</span><br><span class="line">            &#x2F;&#x2F;程序就会创建ArrayIndexOutOfBoundsException的对象</span><br><span class="line">            &#x2F;&#x2F;new ArrayIndexOutOfBoundsException</span><br><span class="line">            &#x2F;&#x2F;用该对象和catch括号中变量进行对比，测试变量是否能接收该对象</span><br><span class="line">            &#x2F;&#x2F;若不可被接收，报错并停止运行程序</span><br><span class="line">            &#x2F;&#x2F;若可被接收，表示该异常被捕获（抓住），执行catch对应的代码</span><br><span class="line">            &#x2F;&#x2F;当catch里的所有代码执行完毕，继续继续try...catch体系下的其他代码</span><br><span class="line">        &#125;catch (ArrayIndexOutOfBoundsException a)&#123;</span><br><span class="line">            System.out.println(&quot;索引越界&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;测试是否执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">索引越界</span><br><span class="line">测试是否执行</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>若try中代码并未遇到问题，会将try中所有代码执行完毕，不会执行catch中的代码</li><li>若try中可能会出现多个问题，就要写多个catch与之对应<ul><li>注：若要捕捉多个异常，多个异常中存在父子关系，父类一定要写下面</li><li>在JDK7后，可在一个catch中同时捕获多个异常，中间用|进行隔开，表示若出现A或B异常，采取同一种处理方案</li></ul></li><li>若try中问题并未被捕获，会终止当前程序，异常会交给虚拟机处理</li><li>try中现异常，则try中下面的语句不会再执行，会直接转到相应的catch，若没有catch与之匹配，则交给虚拟机处理</li></ul><p><strong>格式2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;可能会出现异常的代码</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">&#x2F;&#x2F;异常的处理代码</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">&#x2F;&#x2F;这里代码必定执行，除非虚拟机关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(arr[10]);</span><br><span class="line">        &#125;catch (ArrayIndexOutOfBoundsException a)&#123;</span><br><span class="line">            System.out.println(&quot;索引越界&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            System.out.println(&quot;测试是否执行&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(arr[1]);</span><br><span class="line">        &#125;catch (ArrayIndexOutOfBoundsException a)&#123;</span><br><span class="line">            System.out.println(&quot;索引越界&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            System.out.println(&quot;测试是否执行&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.exit(0);</span><br><span class="line">            System.out.println(arr[1]);</span><br><span class="line">        &#125;catch (ArrayIndexOutOfBoundsException a)&#123;</span><br><span class="line">            System.out.println(&quot;索引越界&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            System.out.println(&quot;测试是否执行&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">索引越界</span><br><span class="line">测试是否执行</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">测试是否执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><p>写在方法定义处，表示声明一种异常，告诉调用者，使用本方法可能会出现哪些异常。  </p><p><strong>编译时异常</strong>：必须要写。  </p><p><strong>运行时异常</strong>：可以不写。  </p><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void 方法()throws 异常类名1,异常类名2...&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>写在方法内，结束方法，手动抛出异常对象，交给调用者，方法中下面的代码不再执行。  </p><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void 方法()&#123;</span><br><span class="line">throw new 异常类名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>throws用于方法头，表示的只是异常申明，而throw用于方法内部，抛出的是异常对象。</li><li>throws可一次性抛出多个异常，throw只能一个。</li><li>throws抛出异常时，它的调用者也要申明抛出异常或捕获，不然编译报错，而throw可以不申明或不捕获，但编译器不会报错。</li></ol><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><h3 id="getMessage"><a href="#getMessage" class="headerlink" title="getMessage"></a>getMessage</h3><p><strong>格式</strong>：  </p><p>public String getMessage()  </p><p><strong>说明</strong>：返回此throwable的详细消息字符串</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><strong>格式</strong>：  </p><p>public String toString()  </p><p><strong>说明</strong>：返回此可抛出的简短描述</p><h3 id="printStackTrace"><a href="#printStackTrace" class="headerlink" title="printStackTrace"></a>printStackTrace</h3><p><strong>格式</strong>：  </p><p>public void printStackTrace()  </p><p><strong>说明</strong>：在底层是利用System.err.println进行输出，把异常的错误信息以红色字体输出在控制台，仅仅是打印信息，不会停止程序运行</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(10&#x2F;0);</span><br><span class="line">        &#125;catch (ArithmeticException a)&#123;</span><br><span class="line">            System.out.println(&quot;getMessage方法&quot;);</span><br><span class="line">            System.out.println(a.getMessage());</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;toString方法&quot;);</span><br><span class="line">            System.out.println(a.toString());</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;printStackTrace方法&quot;);</span><br><span class="line">            a.printStackTrace();</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;测试是否执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">getMessage方法</span><br><span class="line">&#x2F; by zero</span><br><span class="line"></span><br><span class="line">toString方法</span><br><span class="line">java.lang.ArithmeticException: &#x2F; by zero</span><br><span class="line"></span><br><span class="line">printStackTrace方法</span><br><span class="line">java.lang.ArithmeticException: &#x2F; by zero</span><br><span class="line">at Test.main(Test.java:5)</span><br><span class="line"></span><br><span class="line">测试是否执行</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p><strong>步骤</strong></p><ol><li>定义异常类，类名要见名知意</li><li>写继承关系<ul><li><strong>运行时异常</strong>要继承<strong>RuntimeException</strong></li><li><strong>编译时异常</strong>要继承<strong>Exception</strong></li></ul></li><li>空参构造</li><li>带参构造</li></ol><h2 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：</span><br><span class="line">    键盘录入学生的姓名和年龄</span><br><span class="line">    姓名长度在3-10之间</span><br><span class="line">    年龄范围在18-40岁之间</span><br><span class="line">    超出这个范围是异常数据不能赋值，需重新录入，一直录到正确为止</span><br><span class="line">提示：</span><br><span class="line">需要考虑用户在键盘录入时的所有情况</span><br><span class="line">比如：录入年龄时超出范围，录入年龄时录入abc等情况</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        Student stu&#x3D;new Student();</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.print(&quot;请输入学生姓名：&quot;);</span><br><span class="line">                String name&#x3D;s.nextLine();</span><br><span class="line">                stu.setName(name);</span><br><span class="line"></span><br><span class="line">                System.out.print(&quot;请输入学生年龄：&quot;);</span><br><span class="line">                int age&#x3D;Integer.parseInt(s.nextLine());</span><br><span class="line">                stu.setAge(age);</span><br><span class="line">                break;</span><br><span class="line">            &#125; catch (NumberFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (NameLengthException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (AgeRangeException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;AgeRangeException.java</span><br><span class="line">public class AgeRangeException extends RuntimeException &#123;</span><br><span class="line">    public AgeRangeException() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AgeRangeException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;NameLengthException.java</span><br><span class="line">public class NameLengthException extends RuntimeException&#123;</span><br><span class="line">    public NameLengthException() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NameLengthException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        int length&#x3D;name.length();</span><br><span class="line">        if(length&lt;3 || length&gt;10)&#123;</span><br><span class="line">            throw new NameLengthException(&quot;姓名长度为&quot;+length+&quot;,不符合范围&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        if(age&lt;18||age&gt;40)&#123;</span><br><span class="line">            throw new AgeRangeException(&quot;年龄为&quot;+age+&quot;，不符合范围&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">请输入学生姓名：aa</span><br><span class="line">NameLengthException: 姓名长度为2,不符合范围</span><br><span class="line">at Student.setName(Student.java:28)</span><br><span class="line">at Test.main(Test.java:11)</span><br><span class="line">请输入学生姓名：aaaaaaaaaaaaaaaa</span><br><span class="line">NameLengthException: 姓名长度为16,不符合范围</span><br><span class="line">at Student.setName(Student.java:28)</span><br><span class="line">at Test.main(Test.java:11)</span><br><span class="line">请输入学生姓名：zhangsan</span><br><span class="line">请输入学生年龄：8</span><br><span class="line">AgeRangeException: 年龄为8，不符合范围</span><br><span class="line">at Student.setAge(Student.java:48)</span><br><span class="line">at Test.main(Test.java:15)</span><br><span class="line">请输入学生姓名：zhangsan</span><br><span class="line">请输入学生年龄：50</span><br><span class="line">AgeRangeException: 年龄为50，不符合范围</span><br><span class="line">at Student.setAge(Student.java:48)</span><br><span class="line">at Test.main(Test.java:15)</span><br><span class="line">请输入学生姓名：zhangsan</span><br><span class="line">请输入学生年龄：aaa</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;aaa&quot;</span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">at java.lang.Integer.parseInt(Integer.java:580)</span><br><span class="line">at java.lang.Integer.parseInt(Integer.java:615)</span><br><span class="line">at Test.main(Test.java:14)</span><br><span class="line">请输入学生姓名：zhangsan</span><br><span class="line">请输入学生年龄：20</span><br><span class="line">Student&#123;name &#x3D; zhangsan, age &#x3D; 20&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法引用（十五）</title>
      <link href="2023/03/24/J15/"/>
      <url>2023/03/24/J15/</url>
      
        <content type="html"><![CDATA[<h1 id="方法引用（十五）"><a href="#方法引用（十五）" class="headerlink" title="方法引用（十五）"></a>方法引用（十五）</h1><p><strong>方法引用</strong>：把已存在的方法拿过来用，当做函数式接口中抽象方法的方法体。  </p><p><strong>注意</strong>：</p><ol><li>引用处必须是函数式接口</li><li>被引用方法必须已经存在</li><li>被引用方法的形参和返回值需跟抽象方法保持一致</li><li>被引用方法的功能需要满足当前需求</li></ol><p><strong>方法引用符</strong>：</p><blockquote><p>::</p></blockquote><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Integer[] arr1&#x3D;&#123;45,78,67,45,57,13&#125;;</span><br><span class="line">        Integer[] arr2&#x3D;&#123;45,78,67,45,57,13&#125;;</span><br><span class="line">        Integer[] arr3&#x3D;&#123;45,78,67,45,57,13&#125;;</span><br><span class="line">        Integer[] arr4&#x3D;&#123;45,78,67,45,57,13&#125;;</span><br><span class="line">        Arrays.sort(arr1, new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">                return o2-o1;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        Arrays.sort(arr2,(Integer o1,Integer o2)-&gt;&#123;</span><br><span class="line">            return o2-o1;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;lambda省略</span><br><span class="line">        Arrays.sort(arr3,(o1,o2)-&gt;o2-o1);</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方法引用</span><br><span class="line">        Arrays.sort(arr4,Test::subtraction);</span><br><span class="line">        System.out.println(Arrays.toString(arr4));</span><br><span class="line">    &#125;</span><br><span class="line">    public static int subtraction(int num1,int num2)&#123;</span><br><span class="line">        return num2-num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[78, 67, 57, 45, 45, 13]</span><br><span class="line">[78, 67, 57, 45, 45, 13]</span><br><span class="line">[78, 67, 57, 45, 45, 13]</span><br><span class="line">[78, 67, 57, 45, 45, 13]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>引用静态方法</li><li>引用成员方法<ol><li>引用其他类的成员方法</li><li>引用本类的成员方法</li><li>引用父类的成员方法</li></ol></li><li>引用构造方法</li><li>其他调用方式<ol><li>使用类名引用成员方法</li><li>引用数组的构造方法</li></ol></li></ol><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><p><strong>格式</strong>：  </p><p>类名::静态方法  </p><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;);</span><br><span class="line">        list.stream().map(new Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Integer apply(String s) &#123;</span><br><span class="line">                return Integer.parseInt(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.stream().map(Integer::parseInt).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1 2 3 4 </span><br><span class="line">1 2 3 4 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="引用成员方法"><a href="#引用成员方法" class="headerlink" title="引用成员方法"></a>引用成员方法</h3><p><strong>格式</strong>：对象::对象方法</p><ol><li>其他类：其他类对象::方法名</li><li>本类：this::方法名<ul><li>引用处不能是静态方法，静态方法中没有this</li></ul></li><li>父类：super::方法名<ul><li>引用处不能是静态方法，静态方法中没有super</li></ul></li></ol><h4 id="引用其他类的成员方法"><a href="#引用其他类的成员方法" class="headerlink" title="引用其他类的成员方法"></a>引用其他类的成员方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;只打印集合中以“路”开头并且长度为3的字符串</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.function.Predicate;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;张三&quot;,&quot;路人甲&quot;,&quot;李四&quot;,&quot;路人乙&quot;,&quot;路丙&quot;);</span><br><span class="line">        list.stream().filter(new Predicate&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(String s) &#123;</span><br><span class="line">                return s.startsWith(&quot;路&quot;)&amp;&amp;s.length()&#x3D;&#x3D;3;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方法引用</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.stream().filter(new StringController()::StringJudge).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">路人甲 路人乙 </span><br><span class="line">路人甲 路人乙 </span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;StringController.java</span><br><span class="line">public class StringController &#123;</span><br><span class="line">    public boolean StringJudge(String s) &#123;</span><br><span class="line">        return s.startsWith(&quot;路&quot;)&amp;&amp;s.length()&#x3D;&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用本类的成员方法"><a href="#引用本类的成员方法" class="headerlink" title="引用本类的成员方法"></a>引用本类的成员方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        new StringController();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;StringController.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">public class StringController &#123;</span><br><span class="line">    public StringController()&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;aaa&quot;,&quot;ccc&quot;,&quot;vbb&quot;,&quot;ddd&quot;);</span><br><span class="line">        list.stream().forEach(this::print);</span><br><span class="line">    &#125;</span><br><span class="line">    public void print(String s)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">vbb</span><br><span class="line">ddd</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="获取父类的成员方法"><a href="#获取父类的成员方法" class="headerlink" title="获取父类的成员方法"></a>获取父类的成员方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        new StringController();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Father.java</span><br><span class="line">public class Father &#123;</span><br><span class="line">    public void print(String s)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;StringController.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">public class StringController extends Father&#123;</span><br><span class="line">    public StringController()&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;aaa&quot;,&quot;ccc&quot;,&quot;vbb&quot;,&quot;ddd&quot;);</span><br><span class="line">        list.stream().forEach(super::print);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">vbb</span><br><span class="line">ddd</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h3><p><strong>格式</strong>：  </p><p>类名::new  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, &quot;zhangsan,23&quot;,&quot;lisi,24&quot;,&quot;wangwu,25&quot;);</span><br><span class="line">        List&lt;Student&gt; list1&#x3D;list.stream().map(Student::new).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String str)&#123;</span><br><span class="line">        this.name&#x3D;str.split(&quot;,&quot;)[0];</span><br><span class="line">        this.age&#x3D;Integer.parseInt(str.split(&quot;,&quot;)[1]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[Student&#123;name &#x3D; zhangsan, age &#x3D; 23&#125;, Student&#123;name &#x3D; lisi, age &#x3D; 24&#125;, Student&#123;name &#x3D; wangwu, age &#x3D; 25&#125;]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="类名引用成员方法"><a href="#类名引用成员方法" class="headerlink" title="类名引用成员方法"></a>类名引用成员方法</h3><p><strong>格式</strong>：类名::成员方法  </p><p><strong>该方法引用的规则</strong>：（该规则仅限于类名引用成员方法）  </p><ol><li>需要有函数式接口</li><li>被引用的方法已经存在</li><li>被引用方法的形参，需跟抽象方法的第二个形参到最后一个形参一致，返回值需保持一致</li><li>被引用的方法需要满足当前的需求</li></ol><p><strong>抽象方法形参的详解</strong>：  </p><p><strong>第一个参数</strong>：表示被引用方法的调用者，决定了可以引用那些类的方法，比如：在Stream流中，第一个参数一般都表示流里面的每一个数据，假设流里面的数据是字符串，那么使用这种方式进行方法引用，只能引用String类里的方法。  </p><p><strong>第二个参数到最后一个参数</strong>：跟被引用方法的形参保持一致，若无第二个参数，则该被引用的方法需要是无参的成员方法。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将集合中字符串以大写的形式输出</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, &quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;);</span><br><span class="line">        list.stream().map(new Function&lt;String, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(String s) &#123;</span><br><span class="line">                return s.toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;类名引用成员方法</span><br><span class="line">        list.stream().map(String::toUpperCase).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用数组的构造方法"><a href="#引用数组的构造方法" class="headerlink" title="引用数组的构造方法"></a>引用数组的构造方法</h3><p><strong>格式</strong>：  </p><p>数据类型::new  </p><p><strong>目的</strong>：创建一个指定类型的数组。  </p><p><strong>注</strong>：数组的类型需跟流中的类型保持一致。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;集合存取一些整数，收集到数组中</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.function.IntFunction;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, 1,2,3,4,5,6,7,8,9);</span><br><span class="line">        Integer[] arr&#x3D;list.stream().toArray(new IntFunction&lt;Integer[]&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Integer[] apply(int value) &#123;</span><br><span class="line">                return new Integer[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        Integer[] arr2&#x3D;list.stream().toArray(Integer[]::new);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">集合中存储一些字符串的数据，比如：&quot;张三,18&quot;,&quot;李四,19&quot;,&quot;王五,20&quot;</span><br><span class="line">使用引用方法收集到Student类型的数组中</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;张三,18&quot;,&quot;李四,19&quot;,&quot;王五,20&quot;);</span><br><span class="line">        Student[] students&#x3D;list.stream().map(Student::new).toArray(Student[]::new);</span><br><span class="line">        System.out.println(Arrays.toString(students));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String str)&#123;</span><br><span class="line">        this.name&#x3D;str.split(&quot;,&quot;)[0];</span><br><span class="line">        this.age&#x3D;Integer.parseInt(str.split(&quot;,&quot;)[1]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">创建集合添加学生对象，学生对象属性：name,age</span><br><span class="line">只获取姓名并放到数组当中（使用方法引用完成）</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Student stu1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student stu2&#x3D;new Student(&quot;李四&quot;,19);</span><br><span class="line">        Student stu3&#x3D;new Student(&quot;王五&quot;,20);</span><br><span class="line">        Collections.addAll(list,stu1,stu2,stu3);</span><br><span class="line">        String[] s&#x3D;list.stream().map(Student::getName).toArray(String[]::new);</span><br><span class="line">        System.out.println(Arrays.toString(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[张三, 李四, 王五]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">创建集合添加学生对象，学生对象属性：name,age</span><br><span class="line">把姓名和年龄拼接成：张三-23的字符串，并放到数组当中（使用方法引用完成）</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getAll()&#123;</span><br><span class="line">        return name+&quot;,&quot;+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Student stu1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student stu2&#x3D;new Student(&quot;李四&quot;,19);</span><br><span class="line">        Student stu3&#x3D;new Student(&quot;王五&quot;,20);</span><br><span class="line">        Collections.addAll(list,stu1,stu2,stu3);</span><br><span class="line">        String[] s&#x3D;list.stream().map(Student::getAll).toArray(String[]::new);</span><br><span class="line">        System.out.println(Arrays.toString(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[张三,18, 李四,19, 王五,20]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流（十四）</title>
      <link href="2023/03/23/J14/"/>
      <url>2023/03/23/J14/</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流（十四）"><a href="#Stream流（十四）" class="headerlink" title="Stream流（十四）"></a>Stream流（十四）</h1><h2 id="获取Stream流"><a href="#获取Stream流" class="headerlink" title="获取Stream流"></a>获取Stream流</h2><p><strong>Stream流</strong>结合Lambda表达式，简化集合和数组的操作。  </p><p><strong>使用步骤</strong>：</p><ol><li>先得到一条Stream流（流水线），并把数据放上去</li><li>利用Stream流中的API进行各种操作，操作包含：数据过滤，类型转换，数据统计，数据打印等<ul><li>过滤和转换是<strong>中间方法</strong>，方法调用完毕后，可调用其他方法</li><li>统计和打印是<strong>终结方法</strong>，最后一步，调用完毕后，不可调用其他方法</li></ul></li></ol><p><strong>获取方式</strong>：  </p><ul><li>单列集合<ul><li><strong>方法名</strong>：default Stream<E> stream()</E></li><li><strong>说明</strong>：Collection中的默认方法</li></ul></li><li>双列集合<ul><li>不可直接获取，需通过keySet或entrySet获取单列集合后进行获取</li></ul></li><li>数组<ul><li><strong>方法名</strong>：public static<T> Stream<T> stream(T[] array)</T></T></li><li><strong>说明</strong>：Arrays工具类的静态方法</li></ul></li><li>一堆零散数据<ul><li><strong>方法名</strong>：public static<T> Stream<T> of(T…values)</T></T></li><li><strong>说明</strong>：Stream接口中的静态方法</li><li>方法的形参是一个可变参数，可传递一堆零散的数据，也可传递数组，但传递数组必须是引用数据类型，若传递基本数据类型，会把整个数组当成一个元素放到Stream中</li></ul></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.stream.Stream;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;单列集合</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;);</span><br><span class="line">        list.stream().forEach(s-&gt;System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;双列集合</span><br><span class="line">        &#x2F;&#x2F;方式一：</span><br><span class="line">        HashMap&lt;String,Integer&gt; hm&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        hm.put(&quot;a&quot;,97);</span><br><span class="line">        hm.put(&quot;b&quot;,98);</span><br><span class="line">        hm.put(&quot;c&quot;,99);</span><br><span class="line">        hm.put(&quot;d&quot;,100);</span><br><span class="line">        hm.put(&quot;e&quot;,101);</span><br><span class="line">        &#x2F;&#x2F;方式一：</span><br><span class="line">        hm.keySet().stream().forEach(s-&gt; System.out.print(s+&quot;&#x3D;&quot;+hm.get(s)+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        hm.entrySet().stream().forEach(entry-&gt; System.out.print(entry+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;数组</span><br><span class="line">        String[] arr&#x3D;&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;&#125;;</span><br><span class="line">        Arrays.stream(arr).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        int[] arr1&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">        Arrays.stream(arr1).forEach(i-&gt; System.out.print(i+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;零散数据</span><br><span class="line">        Stream.of(8,5,6,7,9).forEach(i -&gt; System.out.print(i+&quot; &quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">a b c d e </span><br><span class="line">a&#x3D;97 b&#x3D;98 c&#x3D;99 d&#x3D;100 e&#x3D;101 </span><br><span class="line">a&#x3D;97 b&#x3D;98 c&#x3D;99 d&#x3D;100 e&#x3D;101 </span><br><span class="line">a b c d e </span><br><span class="line">1 2 3 4 5 </span><br><span class="line">8 5 6 7 9 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="中间方法"><a href="#中间方法" class="headerlink" title="中间方法"></a>中间方法</h3><p>中间方法返回的新Stream流，原本的Stream流只能使用一次，建议使用链式编程。  </p><p>修改Stream流中的数据，不会影响原来集合或数组中的数据。</p><h4 id="fiter"><a href="#fiter" class="headerlink" title="fiter"></a>fiter</h4><p><strong>格式</strong>：  </p><p>Stream<T> filter(Predicate&lt;? super T&gt; predicate)  </T></p><p><strong>说明</strong>：过滤</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p><strong>格式</strong>：  </p><p>Stream<T> limit(long maxSize)  </T></p><p><strong>说明</strong>：获取前面maxSize个元素</p><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p><strong>格式</strong>：  </p><p>Stream<T> skip(long n)  </T></p><p><strong>说明</strong>：跳过前面n个元素</p><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p><strong>格式</strong>：  </p><p>Stream<T> distinct()  </T></p><p><strong>说明</strong>：元素去重，依赖（hashCode和equals方法）</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p><strong>格式</strong>：  </p><p>static<T> Stream<T> concat(Stream a,Stream b)  </T></T></p><p><strong>说明</strong>：合并a和b两个流为一个流</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><strong>格式</strong>：  </p><p>Stream<R> map(Function&lt;T,R&gt; mapper)  </R></p><p><strong>说明</strong>：转换流中的数据类型</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">import java.util.function.Predicate;</span><br><span class="line">import java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;abc&quot;,&quot;acdb&quot;,&quot;bcd&quot;,&quot;cde&quot;,&quot;aaa&quot;,&quot;dfsf&quot;,&quot;afe&quot;);</span><br><span class="line">        &#x2F;&#x2F;filter方法</span><br><span class="line">        &#x2F;&#x2F;只留下a开头的</span><br><span class="line">        System.out.println(&quot;filter方法&quot;);</span><br><span class="line">        list.stream().filter(new Predicate&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(String s) &#123;</span><br><span class="line">                return s.startsWith(&quot;a&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        list.stream().filter(s-&gt;s.startsWith(&quot;a&quot;)).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;limit方法</span><br><span class="line">        &#x2F;&#x2F;获取前3个元素</span><br><span class="line">        System.out.println(&quot;limit方法&quot;);</span><br><span class="line">        list.stream().limit(3).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;skip方法</span><br><span class="line">        &#x2F;&#x2F;跳过前3个元素</span><br><span class="line">        System.out.println(&quot;skip方法&quot;);</span><br><span class="line">        list.stream().skip(3).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;只打印&quot;bcd&quot;,&quot;cde&quot;,&quot;aaa&quot;</span><br><span class="line">        &#x2F;&#x2F;方法一</span><br><span class="line">        list.stream().limit(5).skip(2).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#x2F;&#x2F;方法二</span><br><span class="line">        list.stream().skip(2).limit(3).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;distinct</span><br><span class="line">        System.out.println(&quot;distinct方法&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,&quot;aaa&quot;,&quot;ccc&quot;,&quot;aaa&quot;);</span><br><span class="line">        list1.stream().distinct().forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;concat方法</span><br><span class="line">        System.out.println(&quot;concat方法&quot;);</span><br><span class="line">        Stream.concat(list.stream(),list1.stream()).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;map方法</span><br><span class="line">        System.out.println(&quot;map方法&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list2,&quot;a-1&quot;,&quot;b-2&quot;,&quot;ab-12&quot;);</span><br><span class="line">        list2.stream().map(new Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">        &#x2F;&#x2F;第一个类型：流中原本的数据类型</span><br><span class="line">        &#x2F;&#x2F;第二个类型：要转换之后的类型</span><br><span class="line">        &#x2F;&#x2F;apply的形参s:依次表示流里面的每一个数据</span><br><span class="line">        &#x2F;&#x2F;返回值：表示转换之后的数据</span><br><span class="line">        &#x2F;&#x2F;当map方法执行完毕之后，流上的数据就变成了整数，所以下面的foreach中，s依次表示流里面的每一个数据，该数据的类型为整数</span><br><span class="line">            @Override</span><br><span class="line">            public Integer apply(String s) &#123;</span><br><span class="line">                String[] arr1&#x3D;s.split(&quot;-&quot;);</span><br><span class="line">                String str&#x3D;arr1[1];</span><br><span class="line">                return Integer.parseInt(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        list2.stream().map(s-&gt; Integer.parseInt(s.split(&quot;-&quot;)[1])).forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">filter方法</span><br><span class="line">abc acdb aaa afe </span><br><span class="line">abc acdb aaa afe </span><br><span class="line">limit方法</span><br><span class="line">abc acdb bcd </span><br><span class="line">skip方法</span><br><span class="line">cde aaa dfsf afe </span><br><span class="line">bcd cde aaa </span><br><span class="line">bcd cde aaa </span><br><span class="line">distinct方法</span><br><span class="line">aaa ccc </span><br><span class="line">concat方法</span><br><span class="line">abc acdb bcd cde aaa dfsf afe aaa ccc aaa </span><br><span class="line">map方法</span><br><span class="line">1 2 12 </span><br><span class="line">1 2 12 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p><strong>格式</strong>：  </p><p>void forEach(Consumer action)  </p><p><strong>说明</strong>：遍历</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p><strong>格式</strong>：  </p><p>long count()  </p><p><strong>说明</strong>：统计</p><h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h4><p><strong>格式</strong>1：  </p><p>Object[] toArray()  </p><p><strong>说明</strong>：返回包含此流元素的数组。  </p><p><strong>格式2</strong>：  </p><p><A> A[] toArray(IntFunction&lt;A[]&gt; generator)  </A></p><p><strong>说明</strong>：返回指定类型的数组</p><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p><strong>格式</strong>：  </p><p>collect(Collector collector)  </p><p><strong>说明</strong>：收集流中的数据，放到集合中</p><ul><li>Collectors.toList()，可以有重复</li><li>Collectors.toSet()，自动去重</li><li>Collectors.toMap()，键不可重复，否则会报错</li></ul><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">import java.util.function.Consumer;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">import java.util.function.IntFunction;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;forEach方法&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);</span><br><span class="line">        list.stream().forEach(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) &#123;</span><br><span class="line">                System.out.print(s+&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        list.stream().forEach(s-&gt; System.out.print(s+&quot; &quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;count方法&quot;);</span><br><span class="line">        long num&#x3D;list.stream().count();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;toArray方法&quot;);</span><br><span class="line">        &#x2F;&#x2F;InFunction的泛型，具体类型的数组</span><br><span class="line">        &#x2F;&#x2F;apply的形参：流中的数据个数，要跟数组长度一致</span><br><span class="line">        &#x2F;&#x2F;apply的返回值，具体类型的数组</span><br><span class="line">        &#x2F;&#x2F;方法体：就是创建数组</span><br><span class="line">        String[] str1&#x3D;list.stream().toArray(new IntFunction&lt;String[]&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String[] apply(int value) &#123;</span><br><span class="line">                return new String[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(str1));</span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        String[] str2&#x3D;list.stream().toArray(value-&gt;new String[value]);</span><br><span class="line">        System.out.println(Arrays.toString(str2));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;collect方法-Collectors.toList()&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,&quot;张三-河北省-18&quot;,&quot;张三-河北省-18&quot;,&quot;李四-河南省-19&quot;,&quot;王五-湖南省-18&quot;,&quot;路人甲-湖北省-20&quot;,&quot;路人乙-河北省-19&quot;,&quot;路人丙-河北省-21&quot;);</span><br><span class="line">        List&lt;String&gt; newList&#x3D;list1.stream().</span><br><span class="line">                filter(s-&gt;&quot;河北省&quot;.equals(s.split(&quot;-&quot;)[1])).</span><br><span class="line">                collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">        System.out.println(&quot;collect方法-Collectors.toSet()&quot;);</span><br><span class="line">        Set&lt;String&gt; newSet&#x3D;list1.stream().</span><br><span class="line">                filter(s-&gt;&quot;河北省&quot;.equals(s.split(&quot;-&quot;)[1])).</span><br><span class="line">                collect(Collectors.toSet());</span><br><span class="line">        System.out.println(newSet);</span><br><span class="line">        System.out.println(&quot;collect方法-Collectors.toMap()&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list2,&quot;张三-河北省-18&quot;,&quot;李四-河南省-19&quot;,&quot;王五-湖南省-18&quot;,&quot;路人甲-湖北省-20&quot;,&quot;路人乙-河北省-19&quot;,&quot;路人丙-河北省-21&quot;);</span><br><span class="line">        Map&lt;String,Integer&gt; newMap&#x3D;list2.stream().</span><br><span class="line">                filter(s-&gt;&quot;河北省&quot;.equals(s.split(&quot;-&quot;)[1])).</span><br><span class="line">                &#x2F;*</span><br><span class="line">                toMap:  参数一表示键的生成规则</span><br><span class="line">                        参数二表示值的生成规则</span><br><span class="line">                参数一：</span><br><span class="line">                        Function泛型一：表示流中每个数据的类型</span><br><span class="line">                                泛型二：表示Map集合中键的数据类型</span><br><span class="line"></span><br><span class="line">                        方法apply形参：依次表示流里面的每个数据</span><br><span class="line">                               方法体：生成键的代码</span><br><span class="line">                               返回值：已经生成的键</span><br><span class="line">                参数二：</span><br><span class="line">                        Function泛型一：表示流中每个数据的类型</span><br><span class="line">                                泛型二：表示Map集合中值的数据类型</span><br><span class="line"></span><br><span class="line">                        方法apply形参：依次表示流里面的每个数据</span><br><span class="line">                               方法体：生成值的代码</span><br><span class="line">                               返回值：已经生成的值</span><br><span class="line">                *&#x2F;</span><br><span class="line">                collect(Collectors.toMap(new Function&lt;String, String&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public String apply(String s) &#123;</span><br><span class="line">                        return s.split(&quot;-&quot;)[0];</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                        new Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(String s) &#123;</span><br><span class="line">                        return Integer.parseInt(s.split(&quot;-&quot;)[2]);</span><br><span class="line">                    &#125;&#125;));</span><br><span class="line">        System.out.println(newMap);</span><br><span class="line">        &#x2F;&#x2F;lambda</span><br><span class="line">        Map&lt;String,Integer&gt; newMap1&#x3D;list2.stream().</span><br><span class="line">                filter(s-&gt;&quot;河北省&quot;.equals(s.split(&quot;-&quot;)[1])).</span><br><span class="line">                collect(Collectors.toMap(s-&gt; s.split(&quot;-&quot;)[0],</span><br><span class="line">                        s-&gt;Integer.parseInt(s.split(&quot;-&quot;)[2])));</span><br><span class="line">        System.out.println(newMap1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">forEach方法</span><br><span class="line">aaa bbb ccc </span><br><span class="line">aaa bbb ccc </span><br><span class="line"></span><br><span class="line">count方法</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">toArray方法</span><br><span class="line">[aaa, bbb, ccc]</span><br><span class="line">[aaa, bbb, ccc]</span><br><span class="line"></span><br><span class="line">collect方法-Collectors.toList()</span><br><span class="line">[张三-河北省-18, 张三-河北省-18, 路人乙-河北省-19, 路人丙-河北省-21]</span><br><span class="line">collect方法-Collectors.toSet()</span><br><span class="line">[路人丙-河北省-21, 张三-河北省-18, 路人乙-河北省-19]</span><br><span class="line">collect方法-Collectors.toMap()</span><br><span class="line">&#123;路人丙&#x3D;21, 路人乙&#x3D;19, 张三&#x3D;18&#125;</span><br><span class="line">&#123;路人丙&#x3D;21, 路人乙&#x3D;19, 张三&#x3D;18&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义一个集合，并添加一些整数1，2，3，4，5，6，7，8，9，10</span><br><span class="line">过滤奇数，只剩下偶数</span><br><span class="line">并将结果保存起来</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,1,2,3,4,5,6,7,8,9,10);</span><br><span class="line">        List&lt;Integer&gt; newList &#x3D; list.stream().filter(i-&gt;i%2&#x3D;&#x3D;0).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[2, 4, 6, 8, 10]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">创建一个ArrayList集合，并添加以下字符串，字符串中前面是姓名，后面是年龄</span><br><span class="line">&quot;zhangsan,23&quot;</span><br><span class="line">&quot;lisi,24&quot;</span><br><span class="line">&quot;wangwu,25&quot;</span><br><span class="line">保留年龄大于等于24的人，并将结果放入Map集合中，姓名为键，年龄为值</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;zhangsan,23&quot;,&quot;lisi,24&quot;,&quot;wangwu,25&quot;);</span><br><span class="line">        Map&lt;String,Integer&gt; map&#x3D;list.stream().</span><br><span class="line">                filter(s-&gt;Integer.parseInt(s.split(&quot;,&quot;)[1])&gt;&#x3D;24).</span><br><span class="line">                collect(Collectors.toMap(s-&gt; s.split(&quot;,&quot;)[0],</span><br><span class="line">                        s-&gt;Integer.parseInt(s.split(&quot;,&quot;)[1])));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#123;lisi&#x3D;24, wangwu&#x3D;25&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">现有两个ArrayList集合，分别存储6名男演员的名字和年龄以及6名女演员的名字和年龄，</span><br><span class="line">姓名和年龄中间用逗号隔开，</span><br><span class="line">比如:张三，23</span><br><span class="line">要求完成以下操作：</span><br><span class="line">1.男演员只要名字为3个字的前两个人</span><br><span class="line">2.女演员只要姓杨的，并且不要第一个</span><br><span class="line">3.把过滤后男演员信息和女演员信息合并到一起</span><br><span class="line">4.将上一步的演员信息转换成Actor对象</span><br><span class="line">5.将所有的演员对象都保存到List集合中</span><br><span class="line">演员类Actor,属性名：name,age</span><br><span class="line">男演员:&quot;张楚阳,24&quot;,&quot;叶沙比,23&quot;,&quot;刘不甜,22&quot;,&quot;吴签,24&quot;,&quot;谷甲,30&quot;,&quot;肖凉凉,27&quot;</span><br><span class="line">女演员:&quot;蔡徐坤,24&quot;,&quot;杨以,36&quot;,&quot;高媛媛,43&quot;,&quot;张甜甜,31&quot;,&quot;刘失,35&quot;,&quot;杨扎进,33&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line">import java.util.stream.Stream;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; boyList&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; girlList&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(boyList,&quot;张楚阳,24&quot;,&quot;叶沙比,23&quot;,&quot;刘不甜,22&quot;,&quot;吴签,24&quot;,&quot;谷甲,30&quot;,&quot;肖凉凉,27&quot;);</span><br><span class="line">        Collections.addAll(girlList,&quot;蔡徐坤,24&quot;,&quot;杨以,36&quot;,&quot;高媛媛,43&quot;,&quot;张甜甜,31&quot;,&quot;刘失,35&quot;,&quot;杨扎进,33&quot;);</span><br><span class="line">        Stream&lt;String&gt; boyStream&#x3D;boyList.stream().</span><br><span class="line">                filter(s-&gt;s.split(&quot;,&quot;)[0].length()&#x3D;&#x3D;3).</span><br><span class="line">                limit(2);</span><br><span class="line">        Stream&lt;String&gt; girlStream&#x3D;girlList.stream().</span><br><span class="line">                filter(s-&gt;s.startsWith(&quot;杨&quot;)).</span><br><span class="line">                skip(1);</span><br><span class="line">        List&lt;Actor&gt; list&#x3D;Stream.concat(boyStream,girlStream).</span><br><span class="line">                map(s-&gt;new Actor(s.split(&quot;,&quot;)[0],Integer.parseInt(s.split(&quot;,&quot;)[1]))).</span><br><span class="line">                collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[Actor&#123;name &#x3D; 张楚阳, age &#x3D; 24&#125;, Actor&#123;name &#x3D; 叶沙比, age &#x3D; 23&#125;, Actor&#123;name &#x3D; 杨扎进, age &#x3D; 33&#125;]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合进阶-双列集合（十三）</title>
      <link href="2023/03/20/J13/"/>
      <url>2023/03/20/J13/</url>
      
        <content type="html"><![CDATA[<h1 id="集合进阶-双列集合（十三）"><a href="#集合进阶-双列集合（十三）" class="headerlink" title="集合进阶-双列集合（十三）"></a>集合进阶-双列集合（十三）</h1><p><strong>双列集合特点</strong>：</p><ol><li>双列集合一次需存储一对数据，分别为<strong>键</strong>和<strong>值</strong></li><li><strong>键</strong>不能重复，<strong>值</strong>可以重复</li><li><strong>键</strong>和<strong>值</strong>是一一对应的，每个键只能找到自己对应的值</li><li><strong>键</strong>和<strong>值</strong>这个整体称之为<strong>键值对</strong>或<strong>键值对对象</strong>，在Java中叫做<strong>Entry对象</strong></li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map是双列集合的顶层接口，它的功能是全部双列集合都可继承使用的。  </p><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><ul><li>Map（接口）<ul><li>HashMap (实现类)-&gt;LinkedHashMap(实现类)</li><li>Hashtable(实现类)-&gt;Properties(实现类)</li><li>TreeMap(实现类)</li></ul></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p><strong>格式</strong>：  </p><p>V put(K key,V value)  </p><p><strong>说明</strong>：添加元素。  </p><ul><li>在添加数据时，若键不存在，直接把键值对对象添加到map集合当中，方法返回是null</li><li>在添加数据时，若键存在，会把原有的键值对对象覆盖，并将被覆盖的值进行返回。</li></ul><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p><strong>格式</strong>：  </p><p>V remove(Object Key)  </p><p><strong>说明</strong>：根据键删除键值对元素</p><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p><strong>格式</strong>：  </p><p>void clear()  </p><p><strong>说明</strong>：移除所有键值对元素</p><h4 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h4><p><strong>格式</strong>：  </p><p>boolean containsKey  </p><p><strong>说明</strong>：判断集合是否包含指定的键</p><h4 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h4><p><strong>格式</strong>：  </p><p>boolean containsValue  </p><p><strong>说明</strong>：判断集合是否包含指定的值</p><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><p><strong>格式</strong>：  </p><p>boolean isEmpty()  </p><p><strong>说明</strong>：判断集合是否为空</p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p><strong>格式</strong>：  </p><p>int size()  </p><p><strong>说明</strong>：集合的长度，也是集合中键值对的个数</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String,String&gt; m&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        System.out.println(&quot;put方法&quot;);</span><br><span class="line">        m.put(&quot;aaa&quot;,&quot;AAA&quot;);</span><br><span class="line">        m.put(&quot;bbb&quot;,&quot;BBB&quot;);</span><br><span class="line">        m.put(&quot;ccc&quot;,&quot;CCC&quot;);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        String value1&#x3D;m.put(&quot;aaa&quot;,&quot;sss&quot;);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line">        String value2&#x3D;m.put(&quot;ddd&quot;,&quot;DDD&quot;);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nremove方法&quot;);</span><br><span class="line">        m.remove(&quot;bbb&quot;);</span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\ncontainsKey方法&quot;);</span><br><span class="line">        System.out.println(m.containsKey(&quot;aaa&quot;));</span><br><span class="line">        System.out.println(m.containsKey(&quot;bbb&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\ncontainsValue方法&quot;);</span><br><span class="line">        System.out.println(m.containsValue(&quot;DDD&quot;));</span><br><span class="line">        System.out.println(m.containsValue(&quot;AAA&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nsize方法&quot;);</span><br><span class="line">        System.out.println(m.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nisEmpty方法&quot;);</span><br><span class="line">        System.out.println(m.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nclear方法&quot;);</span><br><span class="line">        m.clear();</span><br><span class="line">        System.out.println(m.isEmpty());</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ol><li>键找值</li><li>键值对</li><li>Lambda表达式</li></ol><h4 id="键找值"><a href="#键找值" class="headerlink" title="键找值"></a>键找值</h4><p>利用<strong>keySet方法</strong>将所有键放入一个单列集合中，遍历得到每一个键，通过<strong>get方法</strong>得到每个键对应的值。  </p><p><strong>keySet方法</strong>：  </p><p>Set<k> keySet()  </k></p><p><strong>get方法</strong>：  </p><p>V get(Object key)  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String,String&gt; m&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        m.put(&quot;aaa&quot;,&quot;AAA&quot;);</span><br><span class="line">        m.put(&quot;bbb&quot;,&quot;BBB&quot;);</span><br><span class="line">        m.put(&quot;ccc&quot;,&quot;CCC&quot;);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set&#x3D;m.keySet();</span><br><span class="line">        System.out.println(&quot;迭代器遍历&quot;);</span><br><span class="line">        Iterator&lt;String&gt; it&#x3D;set.iterator();</span><br><span class="line">        while(it.hasNext())&#123;</span><br><span class="line">            String str&#x3D;it.next();</span><br><span class="line">            System.out.println(str+&quot; &#x3D; &quot;+m.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n增强for&quot;);</span><br><span class="line">        for(String str:set)&#123;</span><br><span class="line">            System.out.println(str+&quot; &#x3D; &quot;+m.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nlambda&quot;);</span><br><span class="line">        set.forEach(str-&gt; System.out.println(str+&quot; &#x3D; &quot;+m.get(str)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">迭代器遍历</span><br><span class="line">aaa &#x3D; AAA</span><br><span class="line">ccc &#x3D; CCC</span><br><span class="line">bbb &#x3D; BBB</span><br><span class="line"></span><br><span class="line">增强for</span><br><span class="line">aaa &#x3D; AAA</span><br><span class="line">ccc &#x3D; CCC</span><br><span class="line">bbb &#x3D; BBB</span><br><span class="line"></span><br><span class="line">lambda</span><br><span class="line">aaa &#x3D; AAA</span><br><span class="line">ccc &#x3D; CCC</span><br><span class="line">bbb &#x3D; BBB</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p>通过<strong>entrySet</strong>方法获取所有键值对对象，在通过键值对对象调用<strong>getkey</strong>和<strong>getValue</strong>获取键和值。  </p><p><strong>entrySet方法</strong>：  </p><p>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  </p><p><strong>getkey方法</strong>：  </p><p>K getKey()  </p><p><strong>getValue方法</strong>:  </p><p>V getValue()  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;a&quot;,97);</span><br><span class="line">        map.put(&quot;b&quot;,98);</span><br><span class="line">        map.put(&quot;c&quot;,99);</span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entries&#x3D;map.entrySet();</span><br><span class="line">        &#x2F;&#x2F;若导入import java.util.Map.Entry;</span><br><span class="line">        &#x2F;&#x2F;则可以直接Set&lt;Entry&lt;String,Integer&gt;&gt; entries&#x3D;map.entrySet();</span><br><span class="line">        System.out.println(&quot;迭代器&quot;);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Integer&gt;&gt; it&#x3D;entries.iterator();</span><br><span class="line">        while(it.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Integer&gt; entry&#x3D;it.next();</span><br><span class="line">            String key&#x3D;entry.getKey();</span><br><span class="line">            int value&#x3D;entry.getValue();</span><br><span class="line">            System.out.println(key+&quot; &#x3D; &quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nfor增强&quot;);</span><br><span class="line">        for(Map.Entry&lt;String,Integer&gt; entry:entries)&#123;</span><br><span class="line">            String key&#x3D;entry.getKey();</span><br><span class="line">            int value&#x3D;entry.getValue();</span><br><span class="line">            System.out.println(key+&quot; &#x3D; &quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nLambda&quot;);</span><br><span class="line">        entries.forEach(entry-&gt; System.out.println(entry.getKey()+&quot; &#x3D; &quot;+entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">迭代器</span><br><span class="line">a &#x3D; 97</span><br><span class="line">b &#x3D; 98</span><br><span class="line">c &#x3D; 99</span><br><span class="line"></span><br><span class="line">for增强</span><br><span class="line">a &#x3D; 97</span><br><span class="line">b &#x3D; 98</span><br><span class="line">c &#x3D; 99</span><br><span class="line"></span><br><span class="line">Lambda</span><br><span class="line">a &#x3D; 97</span><br><span class="line">b &#x3D; 98</span><br><span class="line">c &#x3D; 99</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p><strong>方法名称</strong>：  </p><p>default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)  </p><p><strong>说明</strong>：结合Lambda遍历Map集合  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">&#x2F;&#x2F;import java.util.function.BiConsumer;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;a&quot;,97);</span><br><span class="line">        map.put(&quot;b&quot;,98);</span><br><span class="line">        map.put(&quot;c&quot;,99);</span><br><span class="line">        &#x2F;*</span><br><span class="line">        map.forEach(new BiConsumer&lt;String, Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s, Integer integer) &#123;</span><br><span class="line">                System.out.println(s+&quot; &#x3D; &quot;+integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        map.forEach((s,integer)-&gt; System.out.println(s+&quot; &#x3D; &quot;+integer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">a &#x3D; 97</span><br><span class="line">b &#x3D; 98</span><br><span class="line">c &#x3D; 99</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="选择方式"><a href="#选择方式" class="headerlink" title="选择方式"></a>选择方式</h3><p><strong>默认</strong>：HashMap（效率最高）  </p><p><strong>若要保证存取有序</strong>，LinkedHashMap  </p><p><strong>若要进行排序</strong>：TreeMap</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ol><li>HashMap是Map里的一个实现类，并无额外需要学习的特殊方法，直接使用Map的方法即可</li><li>特点是由键决定：无序，不重复，无索引</li><li>HashMap和HashSet底层原理一样，都是哈希表结构</li><li>依赖hashCode和equals方法保证键的唯一</li><li>若键存储的是自定义对象，需重写hashCode和equals方法；若值存储的是自定义对象，不需重写hashCode和equals方法。</li></ol><h3 id="范例一"><a href="#范例一" class="headerlink" title="范例一"></a>范例一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">创建一个HashMap集合，键是学生对象（Student）,值是籍贯（String）</span><br><span class="line">存储三个键值对元素，并遍历。</span><br><span class="line">要求：同姓名，同年龄认为是同一个学生</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return age &#x3D;&#x3D; student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Student,String&gt; hm&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        Student stu1&#x3D;new Student(&quot;zs&quot;,18);</span><br><span class="line">        Student stu2&#x3D;new Student(&quot;lisi&quot;,19);</span><br><span class="line">        Student stu3&#x3D;new Student(&quot;zs&quot;,18);</span><br><span class="line">        String s1&#x3D;&quot;河北&quot;;</span><br><span class="line">        String s2&#x3D;&quot;河南&quot;;</span><br><span class="line">        String s3&#x3D;&quot;北京&quot;;</span><br><span class="line">        hm.put(stu1,s1);</span><br><span class="line">        hm.put(stu2,s2);</span><br><span class="line">        hm.put(stu3,s3);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;lambda&quot;);</span><br><span class="line">        hm.forEach((stu,s)-&gt; System.out.println(stu+&quot; &#x3D; &quot;+ s));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;键找值&quot;);</span><br><span class="line">        Set&lt;Student&gt; set&#x3D;hm.keySet();</span><br><span class="line">        for(Student stu:set)&#123;</span><br><span class="line">            System.out.println(stu +&quot; &#x3D; &quot;+hm.get(stu));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;键值对&quot;);</span><br><span class="line">        Set&lt;HashMap.Entry&lt;Student,String&gt;&gt; entries&#x3D;hm.entrySet();</span><br><span class="line">        for(HashMap.Entry&lt;Student,String&gt; entry:entries)&#123;</span><br><span class="line">            System.out.println(entry.getKey()+ &quot; &#x3D; &quot;+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">lambda</span><br><span class="line">Student&#123;name &#x3D; lisi, age &#x3D; 19&#125; &#x3D; 河南</span><br><span class="line">Student&#123;name &#x3D; zs, age &#x3D; 18&#125; &#x3D; 北京</span><br><span class="line">键找值</span><br><span class="line">Student&#123;name &#x3D; lisi, age &#x3D; 19&#125; &#x3D; 河南</span><br><span class="line">Student&#123;name &#x3D; zs, age &#x3D; 18&#125; &#x3D; 北京</span><br><span class="line">键值对</span><br><span class="line">Student&#123;name &#x3D; lisi, age &#x3D; 19&#125; &#x3D; 河南</span><br><span class="line">Student&#123;name &#x3D; zs, age &#x3D; 18&#125; &#x3D; 北京</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="范例二："><a href="#范例二：" class="headerlink" title="范例二："></a>范例二：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">某个班级80个学生，现需组成春游活动</span><br><span class="line">班长提供四个景区A,B,C,D</span><br><span class="line">每个学生只能选择一个景区，并统计出哪个景区想去的人数最多</span><br><span class="line">*&#x2F;</span><br><span class="line">package com.ljsblog.domain1;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String[] arr&#x3D;&#123;&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Random random&#x3D;new Random();</span><br><span class="line">        for(int i&#x3D;0;i&lt;80;i++)&#123;</span><br><span class="line">            int index&#x3D;random.nextInt(arr.length);</span><br><span class="line">            list.add(arr[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;String,Integer&gt; hm&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        for(String name:list)&#123;</span><br><span class="line">            if(hm.containsKey(name))&#123;</span><br><span class="line">                int c&#x3D;hm.get(name);</span><br><span class="line">                c++;</span><br><span class="line">                hm.put(name,c);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                hm.put(name,1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;HashMap.Entry&lt;String,Integer&gt;&gt; entries&#x3D;hm.entrySet();</span><br><span class="line">        int max&#x3D;0;</span><br><span class="line">        for(HashMap.Entry&lt;String,Integer&gt; entry:entries)&#123;</span><br><span class="line">            int value&#x3D;entry.getValue();</span><br><span class="line">            if(max&lt;value)&#123;</span><br><span class="line">                max&#x3D;value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(hm);</span><br><span class="line">        System.out.println(&quot;最大为&quot;+max);</span><br><span class="line">        for(HashMap.Entry&lt;String,Integer&gt; entry:entries)&#123;</span><br><span class="line">            if(max&#x3D;&#x3D;entry.getValue())&#123;</span><br><span class="line">                System.out.println(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#123;A&#x3D;19, B&#x3D;18, C&#x3D;21, D&#x3D;22&#125;</span><br><span class="line">最大为22</span><br><span class="line">D</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>由键决定：<strong>有序</strong>，<strong>不重复</strong>，<strong>无索引</strong>  </p><p>底层数据结构依然是哈希表，只是每个键值对元素又额外多了一个双链表的机制记录存取的顺序。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LinkedHashMap&lt;String ,Integer&gt; lhm&#x3D;new LinkedHashMap&lt;&gt;();</span><br><span class="line">        lhm.put(&quot;a&quot;,96);</span><br><span class="line">        lhm.put(&quot;a&quot;,97);</span><br><span class="line">        lhm.put(&quot;b&quot;,98);</span><br><span class="line">        lhm.put(&quot;c&quot;,99);</span><br><span class="line">        System.out.println(lhm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#123;a&#x3D;97, b&#x3D;98, c&#x3D;99&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap跟TreeSet底层原理一样，都是红黑树结构的。  </p><p>由键决定特性：不重复，无索引，可排序。  </p><p>可排序：对键进行排序、  </p><p><strong>注</strong>：默认按照键的从小到大进行排序，也可自己规定键的排序规则  </p><p><strong>代码书写的两种排序规则</strong>：</p><ol><li>实现Comparable接口，指定比较规则。</li><li>创建集合时传递Comparator比较器对象，指定比较规则</li></ol><h3 id="范例一-1"><a href="#范例一-1" class="headerlink" title="范例一"></a>范例一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键：整数表示id</span><br><span class="line">值：字符串表示商品名称</span><br><span class="line">要求：按照id的升序排序，按照id的降序排序</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.TreeMap;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;默认升序</span><br><span class="line">        TreeMap&lt;Integer,String&gt; tm1&#x3D;new TreeMap&lt;&gt;();</span><br><span class="line">        tm1.put(6,&quot;足球&quot;);</span><br><span class="line">        tm1.put(5,&quot;篮球&quot;);</span><br><span class="line">        tm1.put(10,&quot;橄榄球&quot;);</span><br><span class="line">        System.out.println(tm1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;降序</span><br><span class="line">        TreeMap&lt;Integer,String&gt; tm2&#x3D;new TreeMap&lt;&gt;((o1, o2)-&gt;o2-o1);</span><br><span class="line">        tm2.put(7,&quot;足球&quot;);</span><br><span class="line">        tm2.put(6,&quot;篮球&quot;);</span><br><span class="line">        tm2.put(10,&quot;橄榄球&quot;);</span><br><span class="line">        System.out.println(tm2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范例二"><a href="#范例二" class="headerlink" title="范例二"></a>范例二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键：学生对象(姓名和年龄)</span><br><span class="line">值：籍贯</span><br><span class="line">要求：按照学生年龄的升序排列，年龄一样按照姓名的字母排序，同姓名通年龄视为同一人</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Student o) &#123;</span><br><span class="line">        int i&#x3D;this.getAge()-o.getAge();</span><br><span class="line">        return i&#x3D;&#x3D;0?this.getName().compareTo(o.getName()):i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeMap&lt;Student,String&gt; tm&#x3D;new TreeMap&lt;&gt;();</span><br><span class="line">        Student s1&#x3D;new Student(&quot;zs&quot;,19);</span><br><span class="line">        Student s2&#x3D;new Student(&quot;ww&quot;,18);</span><br><span class="line">        Student s3&#x3D;new Student(&quot;zs&quot;,19);</span><br><span class="line">        Student s4&#x3D;new Student(&quot;ls&quot;,19);</span><br><span class="line">        tm.put(s1,&quot;河北&quot;);</span><br><span class="line">        tm.put(s2,&quot;河南&quot;);</span><br><span class="line">        tm.put(s3,&quot;湖南&quot;);</span><br><span class="line">        tm.put(s4,&quot;湖北&quot;);</span><br><span class="line">        System.out.println(tm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范例三"><a href="#范例三" class="headerlink" title="范例三"></a>范例三</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">统计字符串&quot;aababcabcdabcde&quot;每个字符出现的次数，并按以下格式输出：</span><br><span class="line">a(5)b(4)c(3)d(2)e(1)</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str&#x3D;&quot;aababcabcdabcde&quot;;</span><br><span class="line">        TreeMap&lt;Character,Integer&gt; tm&#x3D;new TreeMap&lt;&gt;();</span><br><span class="line">        for(int i&#x3D;0;i&lt;str.length();i++)&#123;</span><br><span class="line">            Character c&#x3D;str.charAt(i);</span><br><span class="line">            if(tm.containsKey(c))&#123;</span><br><span class="line">                int count&#x3D;tm.get(c);</span><br><span class="line">                count++;</span><br><span class="line">                tm.put(c,count);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                tm.put(c,1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">        tm.forEach((character, integer)-&gt;sb.append(character).append(&quot;(&quot;).append(integer).append(&quot;)&quot;));</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">a(5)b(4)c(3)d(2)e(1)</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p><strong>可变参数</strong>本质上是一个数组。  </p><p><strong>作用</strong>：在形参中接收多个数据。  </p><p><strong>格式</strong>：  </p><p>数据类型…参数名称  </p><p><strong>注意事项</strong>：</p><ul><li><p>形参列表中可变参数只有一个</p></li><li><p>可变参数必须放在形参列表的最后面</p></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(sum(1, 2, 3, 4));</span><br><span class="line">        System.out.println(sum(1, 2, 3, 4, 5));</span><br><span class="line">        System.out.println(&quot;大于7的数字有&quot;+compare(7, 11, 9, 4, 6, 7)+&quot;个&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static int sum(int...args)&#123;</span><br><span class="line">        int s&#x3D;0;</span><br><span class="line">        for (int num:args)&#123;</span><br><span class="line">            s+&#x3D;num;</span><br><span class="line">        &#125;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int compare(int num,int...args)&#123;</span><br><span class="line">        int c&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;args.length;i++)&#123;</span><br><span class="line">            if(args[i]&gt;num)&#123;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">大于7的数字有2个</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p><strong>java.util.Collections</strong>是集合工具类。  </p><p><strong>作用</strong>：Collections不是集合，而是集合的<strong>工具类</strong>。</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h4><p><strong>格式</strong>：  </p><p>public static <T> boolean addAll(Collection<T>  c,T…elements)  </T></T></p><p><strong>说明</strong>：  </p><p>批量添加元素</p><h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h4><p><strong>格式</strong>：  </p><p>public static void shuffle(List&lt;?&gt; list)  </p><p><strong>说明</strong>：</p><p>打乱List集合元素的顺序 </p><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(&quot;addAll方法&quot;);</span><br><span class="line">        Collections.addAll(list, &quot;saf&quot;,&quot;fasf&quot;,&quot;df&quot;,&quot;fsa&quot;);</span><br><span class="line">        System.out.println(list+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;shuffle方法&quot;);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">addAll方法</span><br><span class="line">[saf, fasf, df, fsa]</span><br><span class="line"></span><br><span class="line">shuffle方法</span><br><span class="line">[saf, df, fsa, fasf]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h2><p><strong>例1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">班级里有一些学生。</span><br><span class="line">要求：被点到的学生不会再被点到。</span><br><span class="line">若班级中所有学生点完，则开始下一轮点名</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;甲&quot;,&quot;乙&quot;,&quot;丙&quot;,&quot;丁&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        int i&#x3D;1;</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        Random r&#x3D;new Random();</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            System.out.print(&quot;若想退出输入0，非零继续循环,请输入:&quot;);</span><br><span class="line">            String in&#x3D;s.nextLine();</span><br><span class="line">            if(in.compareTo(&quot;0&quot;)&#x3D;&#x3D;0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;第&quot;+i+&quot;轮点名&quot;);</span><br><span class="line">            list1.addAll(list);</span><br><span class="line">            while(list1.size()!&#x3D;0)&#123;</span><br><span class="line">                int num&#x3D;r.nextInt(list1.size());</span><br><span class="line">                System.out.println(list1.get(num));</span><br><span class="line">                list1.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">            list1.clear();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义一个map集合，键用表示省份名称province，值表示市city,但是市有多个，添加完毕后，遍历结果格式如下：</span><br><span class="line">江苏省&#x3D;南京市,扬州市,苏州市</span><br><span class="line">湖北省&#x3D;武汉市,孝感市,宜昌市</span><br><span class="line">河北省&#x3D;唐山市,邢台市,廊坊市</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; city1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        city1.add(&quot;南京市&quot;);</span><br><span class="line">        city1.add(&quot;扬州市&quot;);</span><br><span class="line">        city1.add(&quot;苏州市&quot;);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; city2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        city2.add(&quot;武汉市&quot;);</span><br><span class="line">        city2.add(&quot;孝感市&quot;);</span><br><span class="line">        city2.add(&quot;宜昌市&quot;);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; city3&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        city3.add(&quot;唐山市&quot;);</span><br><span class="line">        city3.add(&quot;邢台市&quot;);</span><br><span class="line">        city3.add(&quot;廊坊市&quot;);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,ArrayList&lt;String&gt;&gt; m&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        m.put(&quot;江苏省&quot;,city1);</span><br><span class="line">        m.put(&quot;湖北省&quot;,city2);</span><br><span class="line">        m.put(&quot;河北省&quot;,city3);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String,ArrayList&lt;String&gt;&gt;&gt; entries&#x3D;m.entrySet();</span><br><span class="line">        for(Map.Entry&lt;String,ArrayList&lt;String&gt;&gt; entry:entries)&#123;</span><br><span class="line">            StringJoiner sj&#x3D;new StringJoiner(&quot;,&quot;);</span><br><span class="line">            ArrayList&lt;String&gt; value &#x3D; entry.getValue();</span><br><span class="line">            for(String s:value)&#123;</span><br><span class="line">                sj.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(entry.getKey()+&quot;&#x3D;&quot;+sj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">江苏省&#x3D;南京市,扬州市,苏州市</span><br><span class="line">湖北省&#x3D;武汉市,孝感市,宜昌市</span><br><span class="line">河北省&#x3D;唐山市,邢台市,廊坊市</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><p><strong>不可变集合</strong>：集合不可变，不能添加，修改，删除。  </p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>在List,Set,Map接口中，均存在静态of方法，可获得一个不可变的集合。  </p><ul><li><strong>方法</strong>：static <E> List<E> of(E…element)<ul><li>创建一个具有指定元素的List集合对象</li></ul></E></E></li><li><strong>方法</strong>：static <E> Set<E> of(E…element)<ul><li>创建一个具有指定元素的set集合对象，元素不能重复</li></ul></E></E></li><li><strong>方法</strong>：static &lt;K,V&gt; Map&lt;K,V&gt; of(E…element)<ul><li>创建一个具有指定元素的Map集合对象，元素不能重复，键值对数量最多10个，超过10个用ofEntries方法</li></ul></li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>properties是一个双列集合，拥有Map集合的所有特点，本身也有一些特有方法，可把集合的数据按照键值对的形式写到配置文件（后缀.properties）当中，也可把配置文件中的数据，读取到集合中。  </p><p>propertise集合没有泛型，可以添加任意类型数据，但一般添加字符串类型数据。  </p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><p><strong>格式1</strong>：  </p><p>public void store(Writer writer,String comments)  </p><p><strong>格式2</strong>：  </p><p>public void store(OutputStream out,String comments)  </p><p><strong>说明</strong>：把集合中的数据以键值对的形式写入到文件中，第二个参数为写入的注释  </p><h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><p><strong>格式1</strong>：  </p><p>public void load(Reader reader)  </p><p><strong>格式2</strong>：  </p><p>public void load(InputStream inStream)  </p><p><strong>说明</strong>：读取本地文件里的数据。  </p><h4 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Properties p1&#x3D;new Properties();</span><br><span class="line">        p1.put(&quot;user&quot;,&quot;zhangsan&quot;);</span><br><span class="line">        p1.put(&quot;password&quot;,&quot;123456&quot;);</span><br><span class="line">        BufferedWriter bw&#x3D;new BufferedWriter(new FileWriter(&quot;a.properties&quot;));</span><br><span class="line">        p1.store(bw,&quot;用户和密码&quot;);</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        Properties p2&#x3D;new Properties();</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(new FileReader(&quot;a.properties&quot;));</span><br><span class="line">        p2.load(br);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*a.properties内容</span><br><span class="line">#用户和密码</span><br><span class="line">#Tue Apr 04 17:00:17 CST 2023</span><br><span class="line">password&#x3D;123456</span><br><span class="line">user&#x3D;zhangsan</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*打印内容</span><br><span class="line">&#123;password&#x3D;123456, user&#x3D;zhangsan&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合进阶-单列集合（十二）</title>
      <link href="2023/03/19/J12/"/>
      <url>2023/03/19/J12/</url>
      
        <content type="html"><![CDATA[<h1 id="集合进阶-单列集合（十二）"><a href="#集合进阶-单列集合（十二）" class="headerlink" title="集合进阶-单列集合（十二）"></a>集合进阶-单列集合（十二）</h1><h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><ul><li><p>单列集合Collection</p><ul><li>List(接口)：添加的元素是有序（指存和取顺序一样），可重复（可存在重复的元素），可索引（可通过索引获取元素）<ul><li>ArrayList（实现类）</li><li>LinkedList（实现类）</li><li>Vector(已淘汰)（实现类）</li></ul></li><li>Set(接口)：添加的元素是无序（指存和取顺序可能不一样），不重复（不能存储重复的元素），无索引（不可通过索引获取元素，不可使用普通for循环遍历）<ul><li>HashSet（实现类）-&gt;LinkedHashSet（实现类）</li><li>TreeSet（实现类）</li></ul></li></ul></li><li><p>双列集合Map</p></li></ul><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>public boolean add(E e)  </p><p>把给定的对象添加到当前集合中  </p><p>若向List系列集合中添加数据，由于List允许元素重复，永远返回true。  </p><p>若向Map系列集合中添加数据，由于Map不允许元素重复，若当前添加元素不存在，返回true，表示返回成功；若当前添加元素存在，返回false，表示添加失败。</p><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>public void clear()  </p><p>清空集合中所有元素</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>public boolean remove(E e)</p><p>删除集合中指定元素，若有，返回true，表示删除成功；若无，返回false，表示删除失败。  </p><p>因为Collection中定义的是共性方法，List有索引，Map无索引，所以不能通过索引进行删除，只能通过元素对象进行删除</p><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><p>public boolean contains(Object obj)  </p><p>判断当前集合中是否包含给定对象  </p><p><strong>注</strong>：底层是依赖equals方法判断元素是否存在，若集合中存储的是定义对象，需在Javabean类中重写equals方法。</p><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><p>public boolean isEmpty()  </p><p>判断当前集合是否为空</p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>public int size()  </p><p>判断集合中元素个数/集合的长度</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Collection&lt;String&gt; collection&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(&quot;add方法&quot;);</span><br><span class="line">        collection.add(&quot;aaa&quot;);</span><br><span class="line">        collection.add(&quot;bbb&quot;);</span><br><span class="line">        collection.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(collection+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;clear方法&quot;);</span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(collection+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;remove方法&quot;);</span><br><span class="line">        System.out.println(collection.remove(&quot;aaa&quot;));</span><br><span class="line">        collection.add(&quot;aaa&quot;);</span><br><span class="line">        collection.add(&quot;bbb&quot;);</span><br><span class="line">        collection.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(collection.remove(&quot;aaa&quot;));</span><br><span class="line">        System.out.println(collection+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;contains方法&quot;);</span><br><span class="line">        System.out.println(collection.contains(&quot;bbb&quot;));</span><br><span class="line">        System.out.println(collection.contains(&quot;aaa&quot;));</span><br><span class="line">        Student student1&#x3D;new Student(19,&quot;张三&quot;);</span><br><span class="line">        Collection&lt;Student&gt; collection1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        collection1.add(student1);</span><br><span class="line">        Student student2&#x3D;new Student(19,&quot;张三&quot;);</span><br><span class="line">        System.out.println(collection1.contains(student2)+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;isEmpty方法&quot;);</span><br><span class="line">        System.out.println(collection.isEmpty()+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;size方法&quot;);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        System.out.println(collection1);</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">        System.out.println(collection1.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.util.Objects;</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int age, String name) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">     </span><br><span class="line">     return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return age &#x3D;&#x3D; student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">add方法</span><br><span class="line">[aaa, bbb, ccc]</span><br><span class="line"></span><br><span class="line">clear方法</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">remove方法</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">[bbb, ccc]</span><br><span class="line"></span><br><span class="line">contains方法</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">isEmpty方法</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">size方法</span><br><span class="line">[bbb, ccc]</span><br><span class="line">[com.ljsblog.domain12.Student@14ae5a5]</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ul><li><p>迭代器遍历</p></li><li><p>增强for遍历</p></li><li><p>Lambda表达式遍历</p></li></ul><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>迭代器在Java之法的类是Iterator，迭代器是集合专用的遍历方式。  </p><p><strong>获取迭代器</strong>：  </p><ul><li>Iterator<E> iterator()<ul><li>返回迭代器对象，默认指向当前集合的0索引</li></ul></E></li></ul><p><strong>常用方法</strong>：</p><ul><li>boolean hashNext()<ul><li>判断当前位置是否有元素，有元素，返回true；无元素，返回false</li></ul></li><li>E next()<ul><li>获取当前位置的元素，并将迭代器对象移向下一个位置</li></ul></li><li>default void remove()<ul><li>从基础集合中移除这个迭代器返回的最后一个元素（可选操作）。</li></ul></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Collection&lt;String&gt; collection&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(&quot;aaa&quot;);</span><br><span class="line">        collection.add(&quot;bbb&quot;);</span><br><span class="line">        collection.add(&quot;ccc&quot;);</span><br><span class="line">        Iterator&lt;String&gt; iterator&#x3D;collection.iterator();</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            String str&#x3D;iterator.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>若当前位置没有元素，还要强行获取，则会NoSuchElementException</li><li>迭代器遍历完毕，指针不会复位，若想重新遍历，需创建新的迭代器对象</li><li>循环中只能用一次next方法，否则可能会越界</li><li>迭代器遍历时，不能用集合的方法进行增加或删除。若必须要删除，则可以用迭代器提供的remove方法进行删除。</li></ol><h4 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h4><p>JDK5之后出现，内部原理就是一个Iterator迭代器，增强for的底层就是迭代器，为简化迭代器的代码书写的，所有的单列集合和数组才能用增强for进行遍历。  </p><p><strong>格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(元素的数据类型 变量名:数组或单列集合)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：修改增强for中的变量，不会改变集合中原本的数据。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Collection&lt;String&gt; collection&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(&quot;aaa&quot;);</span><br><span class="line">        collection.add(&quot;bbb&quot;);</span><br><span class="line">        collection.add(&quot;ccc&quot;);</span><br><span class="line">        for(String s:collection)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式遍历"><a href="#Lambda表达式遍历" class="headerlink" title="Lambda表达式遍历"></a>Lambda表达式遍历</h4><p><strong>方法名称</strong>：  </p><p>default void forEach(Consumer&lt;? super T&gt; action)  </p><p><strong>说明</strong>：结合lambda遍历集合  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.function.Consumer;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Collection&lt;String&gt; collection&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(&quot;aaa&quot;);</span><br><span class="line">        collection.add(&quot;bbb&quot;);</span><br><span class="line">        collection.add(&quot;ccc&quot;);</span><br><span class="line">        &#x2F;&#x2F;匿名内部类</span><br><span class="line">        &#x2F;&#x2F;底层原理：</span><br><span class="line">        &#x2F;&#x2F;遍历集合，得到每个元素</span><br><span class="line">        &#x2F;&#x2F;每个元素，传给accept方法。s依次表示集合中的每一个数据</span><br><span class="line">        collection.forEach(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;lambda省略版</span><br><span class="line">        collection.forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p> Collection的方法List全部继承，List集合因为有索引，所以多了很多索引操作的方法。  </p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h4><p>void add(int index,E element)  </p><p>在此集合的指定位置插入指定的元素</p><h4 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h4><p><strong>格式1</strong>：  </p><p>E remove(int index)  </p><p>删除指定索引处的元素，原来索引的上的元素会依次后移，返回被删除的元素   </p><p><strong>格式2</strong>：</p><p>boolean remove(Object o)</p><p>直接删除元素  </p><p><strong>注：</strong>在调用方法时，若方法出现重载现象，优先调用实参形参一致的方法</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>E set(int index,E element)  </p><p>修改指定索引处的元素，返回被修改的元素</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>E get(int index)  </p><p>返回指定索引处的元素</p><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        List&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(&quot;add方法&quot;);</span><br><span class="line">        list.add(&quot;aaa&quot;);</span><br><span class="line">        list.add(&quot;bbb&quot;);</span><br><span class="line">        list.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(list+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;remove方法，通过索引删除&quot;);</span><br><span class="line">        System.out.println(list.remove(1));</span><br><span class="line">        System.out.println(list+&quot;\n&quot;);</span><br><span class="line">        System.out.println(&quot;remove方法，优先级判定&quot;);</span><br><span class="line">        List&lt;Integer&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(1);</span><br><span class="line">        list1.add(2);</span><br><span class="line">        list1.add(3);</span><br><span class="line">        Integer i&#x3D;1;</span><br><span class="line">        &#x2F;&#x2F;此处调用的是boolean remove(Object o)方法</span><br><span class="line">        list1.remove(i);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">        List&lt;Integer&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(1);</span><br><span class="line">        list2.add(2);</span><br><span class="line">        list2.add(3);</span><br><span class="line">        &#x2F;&#x2F;此处调用的是E remove(int index)方法</span><br><span class="line">        list2.remove(1);</span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;set方法&quot;);</span><br><span class="line">        System.out.println(list.set(1,&quot;bbb&quot;));</span><br><span class="line">        System.out.println(list+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;get方法&quot;);</span><br><span class="line">        System.out.println(list.get(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">add方法</span><br><span class="line">[aaa, bbb, ccc]</span><br><span class="line"></span><br><span class="line">remove方法，通过索引删除</span><br><span class="line">bbb</span><br><span class="line">[aaa, ccc]</span><br><span class="line"></span><br><span class="line">remove方法，优先级判定</span><br><span class="line">[2, 3]</span><br><span class="line">[1, 3]</span><br><span class="line">set方法</span><br><span class="line">ccc</span><br><span class="line">[aaa, bbb]</span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line">bbb</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="遍历方式-1"><a href="#遍历方式-1" class="headerlink" title="遍历方式"></a>遍历方式</h3><ol><li><strong>迭代器遍历</strong>：在遍历的过程中需要删除元素，使用迭代器</li><li><strong>列表迭代器</strong>：在遍历的过程中需要增加元素，使用列表迭代器</li><li><strong>增强for遍历</strong>：仅仅想遍历，使用增强for或lambda表达式</li><li><strong>Lambda表达式</strong></li><li><strong>普通for</strong>：若遍历时想操作索引，可以使用普通for</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.ListIterator;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        List&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;aaa&quot;);</span><br><span class="line">        list.add(&quot;bbb&quot;);</span><br><span class="line">        list.add(&quot;ccc&quot;);</span><br><span class="line">        list.add(&quot;ddd&quot;);</span><br><span class="line">        &#x2F;&#x2F;迭代器遍历</span><br><span class="line">        Iterator&lt;String&gt; iterator&#x3D;list.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            String str&#x3D;iterator.next();</span><br><span class="line">            if(&quot;ddd&quot;.equals(str))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;增强for遍历</span><br><span class="line">        for(String s:list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;lambda表达式</span><br><span class="line">        list.forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;普通for</span><br><span class="line">        for (int i &#x3D; 0; i &lt;list.size() ; i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;列表迭代器</span><br><span class="line">        ListIterator&lt;String&gt; listIterator&#x3D;list.listIterator();</span><br><span class="line">        while (listIterator.hasNext())&#123;</span><br><span class="line">            String str&#x3D;listIterator.next();</span><br><span class="line">            if(&quot;ccc&quot;.equals(str))&#123;</span><br><span class="line">                listIterator.add(&quot;ddd&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">[aaa, bbb, ccc]</span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">[aaa, bbb, ccc, ddd]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>数据结构</strong>是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。  </p><p><strong>常见的数据结构</strong>：</p><ol><li>栈</li><li>队列</li><li>数组</li><li>链表</li><li>二叉树</li><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li></ol><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><strong>栈</strong>只能在表的一个固定端进行数据结点的插入和删除操作。  </p><p><strong>特点</strong>：后进先出，先进后出。  </p><p>先插入的数据将被压入栈底，最后插入的数据在栈顶，读出数据时，从栈顶开始逐个读出。  </p><p>数据进入栈模型的过程称为：<strong>压/进栈</strong>  </p><p>数据离开栈模型的过程称为：<strong>弹/出栈</strong></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><strong>队列</strong>只允许在表的一端进行插入操作，而在另一端进行删除操作。  </p><p><strong>特点</strong>：先进先出，后进后出。  </p><p>进行插入操作的一端称为队尾，进行删除操作的一端称为队头。  </p><p>数据从队尾进入队列模型的过程称为：<strong>入队列</strong>  </p><p>数据从队头离开队列模型的过程称为：<strong>出队列</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>特点</strong>：</p><ul><li><strong>查询速度快</strong>：查询数据通过地址值和索引定位，查询任意数据耗时相同（元素在内存中是连续存储的）。</li><li><strong>删除效率低</strong>：要将原始数据删除，同时后面每个数据前移</li><li><strong>添加效率极低</strong>：添加位置的每个数据后移，再添加数据。</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><strong>链表</strong>中的<strong>结点</strong>是独立的对象，在内存中是<strong>不连续</strong>的。  </p><p><strong>单向链表</strong>每个节点包含<strong>数据值</strong>和<strong>下个结点的地址</strong>。  </p><p><strong>双向链表</strong>每个节点包含<strong>上个结点的地址</strong>，<strong>数据值</strong>和<strong>下个结点的地址</strong>。  </p><p><strong>链表查询慢</strong>，无论查询哪个数据都要从头找，但<strong>首尾操作</strong>极快。  </p><p><strong>链表增删</strong>相对较快。</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><strong>二叉树</strong>是指树中节点（结点）的<strong>度</strong>不大于2的有序树，即二叉树是每个结点最多有两个子树的树结构。通常子树被称作<strong>左子树</strong>和<strong>右子树</strong>。  </p><p>二叉树的<strong>结点包括</strong>：<strong>父节点地址</strong>，<strong>左子节点地址</strong>，<strong>右子节点地址</strong>，<strong>值</strong>。  </p><p><strong>度</strong>：每个节点的子节点数量。  </p><p><strong>树高</strong>：树的总层数。  </p><p><strong>根节点</strong>：最顶层的结点。  </p><p><strong>左子节点</strong>：左下方的结点。  </p><p><strong>右子节点</strong>：右下方的结点。</p><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><p><strong>二叉查找树</strong>，又称二叉排序树或二叉搜索树。  </p><p><strong>特点</strong>：</p><ol><li>每个结点上最多有两个子节点</li><li>任意结点左子树上的值都小于当前节点</li><li>任意结点右子树上的值都大于当前节点</li></ol><p><strong>添加结点规则</strong>：</p><ol><li>小的存左边</li><li>大的存右边</li><li>一样的不存</li></ol><p><strong>弊端</strong>：二叉查找树可能退化成链表，相应的，二叉搜索树的查找操作是和这棵树的高度相关的，而此时这颗树的高度就是这颗树的节点数n。</p><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>任意结点的左右子树高度不超过1，任意结点的左右两个子树都是一颗平衡二叉树。</p><h4 id="遍历方式-2"><a href="#遍历方式-2" class="headerlink" title="遍历方式"></a>遍历方式</h4><p>所有二叉树都可使用</p><ol><li><strong>前序遍历</strong>：从根节点开始，按照当前节点，左子节点，右子节点的顺序遍历。</li><li><strong>中序遍历</strong>：从最左边的子节点开始，按照左子节点，当前节点，右子节点的顺序遍历。</li><li><strong>后续遍历</strong>：从最左边的子节点开始，按照左子节点，右子节点，当前节点的顺序遍历。</li><li><strong>层序遍历</strong>：从根节点开始一层一层遍历。</li></ol><p><strong>旋转机制</strong>：左旋和右旋。  </p><p><strong>触发时机</strong>：当添加一个结点之后，该数不再是一颗平衡二叉树</p><h5 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h5><p><strong>确定支点</strong>：从添加的结点开始，不断的往父节点找不平衡的节点。  </p><p><strong>步骤</strong>：</p><ol><li>以不平衡的点为支点</li><li>把支点左旋降级，变成左子节点</li><li>晋升原来的右子节点</li></ol><p>或</p><ol><li>以不平衡的点为支点</li><li>将根节点的右侧向左拉</li><li>原本的右子节点变成新的父节点，并把多余的左子节点出让，给已降级的根节点当右子节点</li></ol><h5 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h5><p><strong>确定支点</strong>：从添加的结点开始，不断的往父节点找不平衡的节点。  </p><p><strong>步骤</strong>：</p><ol><li>以不平衡的点为支点</li><li>把支点右旋降级，变成右子节点</li><li>晋升原来的左子节点</li></ol><p>或</p><ol><li>以不平衡的点为支点</li><li>将根节点的左侧向右拉</li><li>原本的左子节点变成新的父节点，并把多余的右子节点出让，给已降级的根节点当左子节点</li></ol><h5 id="需旋转的四种情况"><a href="#需旋转的四种情况" class="headerlink" title="需旋转的四种情况"></a>需旋转的四种情况</h5><ol><li><strong>左左</strong>：当根节点左子树的左子树有节点插入，导致二叉树不平衡，需进行一次<strong>右旋</strong>。</li><li><strong>左右</strong>：当根节点左子树的右子树有节点插入，导致二叉树不平衡，需先<strong>局部左旋</strong>，再<strong>整体右旋</strong>。</li><li><strong>右右</strong>：当根节点右子树的右子树有节点插入，导致二叉树不平衡，需进行一次<strong>左旋</strong>。</li><li><strong>右左</strong>：当根节点右子树的左子树有节点插入，导致二叉树不平衡，需先<strong>局部右旋</strong>，再<strong>整体左旋</strong>。</li></ol><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><strong>红黑树</strong>：是一种自平衡的<strong>二叉查找树</strong>，是一种特殊的<strong>二叉查找树</strong>，红黑树上的每一个结点都有存储位表示结点的颜色，每一个结点可以是红或者黑，红黑树不是高度平衡的，它的平衡是通过<strong>红黑规则</strong>进行实现的。  </p><p><strong>红黑树</strong>增删改查的性能都很好。  </p><p><strong>节点</strong>：<strong>父节点地址</strong>，<strong>左子节点地址</strong>，<strong>右子节点地址</strong>，<strong>值</strong>，<strong>颜色</strong>。  </p><p><strong>红黑规则</strong>：</p><ol><li>每个节点或是红色，或是黑色</li><li>根节点必须是黑色</li><li>若一个节点没有子节点或父节点，则该节点响应的指针属性为Nil，这些Nil视为叶节点，每个叶节点（Nil）是黑色的。</li><li>若某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径（只能向下走，不能往回走）上，均包含相同数目的黑色节点</li></ol><p><strong>添加结点规则</strong>：添加的节点默认是红色（效率高）。</p><p><strong>根</strong>：直接变为黑色  </p><p><strong>非根</strong>：</p><ul><li><strong>父黑色</strong>：则不需要任何操作</li><li><strong>父红色</strong>：<ul><li><strong>叔叔红色</strong>：将“父”设为黑色，将“叔叔”设为黑色，将”祖父“设为”红色“。若祖父为根，则将根变回黑色；若祖父非根，将祖父设置为当前节点再进行其他判断</li><li><strong>叔叔黑色</strong>，当前节点是父的<strong>右孩子</strong>：把父作为当前节点并左旋（旋转时忽视Nil节点），再进行判断</li><li><strong>叔叔黑色</strong>，当前节点是父的<strong>左孩子</strong>：将”父“设为”黑色“，将”祖父“设为”红色“，以祖父为支点进行右旋</li></ul></li></ul><h2 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h2><p><strong>ArrayList</strong></p><ol><li>利用空参创建的集合，在底层创建一个默认长度为0的数组。</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组</li><li>数组存满时，会扩容1.5倍，若一次添加多个元素，1.5倍装不下，则新创建数组的长度以实际为为准。</li></ol><p><strong>LinkedList</strong><br>底层数据结构是双链表，查询慢，增删快，若操作的是首尾元素，速度也是极快的。  </p><p>LinkedList本身多出很多直接操作首尾元素的方法。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>若并未个集合指定类型，默认数据类型为Object类，此时可以给集合添加任意数据类型，但我们获取数据时，无法使用子类特有的行为。  </p><p><strong>泛型</strong>：是JDK5中引入的特性，可在编译阶段约束操作的数据类型，并进行检查。  </p><p><strong>格式</strong>：&lt;引用数据类型&gt;  </p><p><strong>好处</strong>：统一数据类型，将运行时期的问题提前到编译期间，避免强制类型转换可能出现的异常，因此在编译阶段就能确定下来，并且能调用特有的行为。  </p><p><strong>细节</strong>：</p><ul><li>泛型中不能写基本数据类型，需将基本数据类型转换成对应的包装类</li><li>指定泛型的具体类型后，传送数据时，可传送该类类型或其子类类型</li><li>若不写泛型，类型默认是Object</li><li>泛型可在<strong>类</strong>，<strong>方法</strong>，<strong>接口</strong>后进行定义，即<strong>泛型类</strong>，<strong>泛型方法</strong>，<strong>泛型接口</strong></li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>当一个类中，某个变量的数据类型不确定，可定义泛型类。  </p><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;此处E可以理解为记录数据类型的对象，可写为：T,E,K,V等</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyArrayList.java</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">public class MyArrayList&lt;E&gt; &#123;</span><br><span class="line">    int size;</span><br><span class="line">    Object[] objects&#x3D;new Object[10];</span><br><span class="line">    public boolean add(E e)&#123;</span><br><span class="line">        objects[size]&#x3D;e;</span><br><span class="line">        size++;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    public E get(int index)&#123;</span><br><span class="line">        return (E)objects[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return Arrays.toString(objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyArrayList&lt;String&gt; myArrayList &#x3D; new MyArrayList&lt;&gt;();</span><br><span class="line">        myArrayList.add(&quot;aaa&quot;);</span><br><span class="line">        myArrayList.add(&quot;bbb&quot;);</span><br><span class="line">        myArrayList.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">        System.out.println(myArrayList.get(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[aaa, bbb, ccc, null, null, null, null, null, null, null]</span><br><span class="line">bbb</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>方法中形参类型不确定时：</p><ol><li> 使用类名后面定义的泛型。（所有方法都能用）</li><li>在方法申明上定义自己的泛型。（只有本方法能用）</li></ol><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符&lt;T&gt; 返回值类型 方法名(类型 变量名)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;此处T可以理解为记录数据类型的对象，可写为：T,E,K,V等</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义一个工具类，ListUtil</span><br><span class="line">&#x2F;&#x2F;类中定义一个静态方法addAll,用来添加另一个集合中的元素</span><br><span class="line">&#x2F;&#x2F;ListUtil.Java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class ListUtil &#123;</span><br><span class="line">    private ListUtil()&#123;&#125;</span><br><span class="line">    public static&lt;T&gt; boolean addALL(ArrayList&lt;T&gt; list1, ArrayList&lt;T&gt; list2)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list2.size();i++)&#123;</span><br><span class="line">            list1.add(list2.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        arrayList.add(&quot;aaa&quot;);</span><br><span class="line">        arrayList.add(&quot;bbb&quot;);</span><br><span class="line">        arrayList.add(&quot;ccc&quot;);</span><br><span class="line">        ArrayList&lt;String&gt; arrayList1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        arrayList1.add(&quot;ddd&quot;);</span><br><span class="line">        arrayList1.add(&quot;eee&quot;);</span><br><span class="line">        arrayList1.add(&quot;fff&quot;);</span><br><span class="line">        ListUtil.addALL(arrayList, arrayList1);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[aaa, bbb, ccc, ddd, eee, fff]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名&lt;类型&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用方式</strong>：</p><ol><li>实现类给出具体的类型，创造实现类的对象时不需要给出泛型</li><li>实现类延续泛型创建实现类对象时再确定类型，创造实现类的对象时需要给出泛型</li></ol><p><strong>方式一范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口类</span><br><span class="line">&#x2F;&#x2F;ListAdd.java</span><br><span class="line">public interface ListAdd&lt;E&gt;&#123;</span><br><span class="line">    public abstract void add(E e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实现类</span><br><span class="line">&#x2F;&#x2F;MyArrayList.java</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">public class MyArrayList implements ListAdd&lt;String&gt; &#123;</span><br><span class="line">    Object[] objects&#x3D;new Object[10];</span><br><span class="line">    int size&#x3D;0;</span><br><span class="line">    @Override</span><br><span class="line">    public void add(String s) &#123;</span><br><span class="line">        objects[size]&#x3D;s;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return Arrays.toString(objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyArrayList myArrayList&#x3D;new MyArrayList();</span><br><span class="line">        myArrayList.add(&quot;aaa&quot;);</span><br><span class="line">        myArrayList.add(&quot;bbb&quot;);</span><br><span class="line">        myArrayList.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[aaa, bbb, ccc, null, null, null, null, null, null, null]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>方式二范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口类</span><br><span class="line">&#x2F;&#x2F;ListAdd.java</span><br><span class="line">public interface ListAdd&lt;E&gt;&#123;</span><br><span class="line">    public abstract void add(E e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实现类</span><br><span class="line">&#x2F;&#x2F;MyArrayList.java</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">public class MyArrayList&lt;E&gt; implements ListAdd&lt;E&gt; &#123;</span><br><span class="line">    Object[] objects&#x3D;new Object[10];</span><br><span class="line">    int size&#x3D;0;</span><br><span class="line">    @Override</span><br><span class="line">    public void add(E e) &#123;</span><br><span class="line">        objects[size]&#x3D;e;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return Arrays.toString(objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyArrayList&lt;String&gt; myArrayList&#x3D;new MyArrayList();</span><br><span class="line">        myArrayList.add(&quot;aaa&quot;);</span><br><span class="line">        myArrayList.add(&quot;bbb&quot;);</span><br><span class="line">        myArrayList.add(&quot;ccc&quot;);</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[aaa, bbb, ccc, null, null, null, null, null, null, null]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p><strong>通配符</strong>可以限定类型的范围</p><p>泛型不具备继承性，但泛型的数据具备继承性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;Ye&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Fu&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list3&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;泛型不具有继承性</span><br><span class="line">        &#x2F;&#x2F;method(list1);</span><br><span class="line">        &#x2F;&#x2F;method(list2);会报错</span><br><span class="line">        &#x2F;&#x2F;method(list3);会报错</span><br><span class="line">        &#x2F;&#x2F;数据具有继承性</span><br><span class="line">        list1.add(new Ye());</span><br><span class="line">        list1.add(new Fu());</span><br><span class="line">        list1.add(new Zi());</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method(ArrayList&lt;Ye&gt; list)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Ye&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Fu extends Ye&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Zi extends Fu&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通配符</strong>：  </p><p><strong>？</strong>表示不确定的类型，也可以进行类型的限定</p><ul><li>? extends E<ul><li>表示可以传递E或E所有的子类类型</li></ul></li><li>？super E<ul><li>表示可以传递E或者E的所有父类类型</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain12;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;Ye&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Fu&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list3&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        method1(list1);</span><br><span class="line">        method1(list2);</span><br><span class="line">        method1(list3);</span><br><span class="line"></span><br><span class="line">        method2(list1);</span><br><span class="line">        method2(list2);</span><br><span class="line">        method2(list3);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method1(ArrayList&lt;? extends Ye&gt; list)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void method2(ArrayList&lt;? super Zi&gt; list)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Ye&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Fu extends Ye&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Zi extends Fu&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>：</p><ol><li>若在定义类，方法，接口时，类型不确定，就可以定义，泛型类，泛型方法，泛型接口。</li><li>若类型不确定，但只传递某个继承体系，可使用泛型的通配符</li></ol><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*需求</span><br><span class="line">定义一个继承结构：</span><br><span class="line">   动物</span><br><span class="line">  &#x2F;            \</span><br><span class="line"> 猫           狗</span><br><span class="line">       &#x2F;    \        &#x2F;    \</span><br><span class="line">                           波斯猫    狸花猫   泰迪  哈士奇</span><br><span class="line">属性：名字，年龄</span><br><span class="line">行为：吃东西</span><br><span class="line">波斯猫方法体打印：一只叫做XXX的，X岁的波斯猫，正在吃小饼干</span><br><span class="line">狸花猫方法体打印：一只叫做xxx的，x岁的狸花猫，正在吃鱼</span><br><span class="line">泰迪方法体打印：一只叫做xxx的，x岁的泰迪，正在吃骨头，边吃边蹭</span><br><span class="line">哈士奇方法体打印：一只叫做XXX的，X岁的哈士奇，正在吃骨头，边吃边拆家</span><br><span class="line">测试类中定义一个方法用于饲养动物</span><br><span class="line">public static void keepPet(ArrayList&lt;???&gt; list)&#123;</span><br><span class="line">遍历集合，调用动物的eat方法</span><br><span class="line">&#125;</span><br><span class="line">要求1:该方法能养所有品种的猫,但是不能养狗</span><br><span class="line">要求2:该方法能养所有品种的狗,但是不能养猫</span><br><span class="line">要求3:该方法能养所有的动物,但是不能传递其他类型</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Animal.java</span><br><span class="line">public abstract class Animal &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Animal()&#123;&#125;</span><br><span class="line">    public Animal(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Dog.java</span><br><span class="line">public abstract class Dog extends Animal&#123;</span><br><span class="line">    public Dog() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public Dog(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Cat.java</span><br><span class="line">public abstract class Cat extends Animal &#123;</span><br><span class="line">    public Cat()&#123;&#125;</span><br><span class="line">    public Cat(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Bosi.java</span><br><span class="line">public class Bosi extends Cat &#123;</span><br><span class="line">    public Bosi()&#123;&#125;</span><br><span class="line">    public Bosi(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;一只叫做&quot;+getName()+&quot;的，&quot;+getAge()+&quot;岁的波斯猫，正在吃小饼干&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Lihua.java</span><br><span class="line">public class Lihua extends Cat &#123;</span><br><span class="line">    public Lihua() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Lihua(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;一只叫做&quot;+getName()+&quot;的，&quot;+getAge()+&quot;岁的狸花猫，正在吃鱼&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Taidi.java</span><br><span class="line">public class Taidi extends Dog&#123;</span><br><span class="line">    public Taidi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Taidi(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;一只叫做&quot;+getName()+&quot;的，&quot;+getAge()+&quot;岁的泰迪，正在吃骨头，边吃边蹭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Hashiqi.java</span><br><span class="line">public class Hashiqi extends Dog&#123;</span><br><span class="line">    public Hashiqi() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Hashiqi(String name, int age) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;一只叫做&quot;+getName()+&quot;的，&quot;+getAge()+&quot;岁的哈士奇，正在吃骨头，边吃边拆家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;Bosi&gt; list1&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Bosi bosi1&#x3D;new Bosi(&quot;波斯猫甲&quot;,7);</span><br><span class="line">        Bosi bosi2&#x3D;new Bosi(&quot;波斯猫乙&quot;,9);</span><br><span class="line">        list1.add(bosi1);</span><br><span class="line">        list1.add(bosi2);</span><br><span class="line">        keepPet1(list1);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Lihua&gt; list2&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Lihua lihua1&#x3D;new Lihua(&quot;狸花猫甲&quot;,1);</span><br><span class="line">        Lihua lihua2&#x3D;new Lihua(&quot;狸花猫乙&quot;,2);</span><br><span class="line">        list2.add(lihua1);</span><br><span class="line">        list2.add(lihua2);</span><br><span class="line">        keepPet1(list2);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Hashiqi&gt; list3&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Hashiqi hashiqi1&#x3D;new Hashiqi(&quot;哈士奇甲&quot;,2);</span><br><span class="line">        Hashiqi hashiqi2&#x3D;new Hashiqi(&quot;哈士奇乙&quot;,3);</span><br><span class="line">        list3.add(hashiqi1);</span><br><span class="line">        list3.add(hashiqi2);</span><br><span class="line">        keepPet2(list3);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Taidi&gt; list4&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Taidi taidi1&#x3D;new Taidi(&quot;泰迪甲&quot;,12);</span><br><span class="line">        Taidi taidi2&#x3D;new Taidi(&quot;泰迪乙&quot;,6);</span><br><span class="line">        list4.add(taidi1);</span><br><span class="line">        list4.add(taidi2);</span><br><span class="line">        keepPet2(list4);</span><br><span class="line"></span><br><span class="line">        keepPet3(list1);</span><br><span class="line">        keepPet3(list2);</span><br><span class="line">        keepPet3(list3);</span><br><span class="line">        keepPet3(list4);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;要求1：该方法能养所有品种的猫，但不能养狗</span><br><span class="line">    public static void keepPet1(ArrayList&lt;? extends Cat&gt; list)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            list.get(i).eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;要求2：该方法能养所有品种的狗，但不能养猫</span><br><span class="line">    public static void keepPet2(ArrayList&lt;? extends Dog&gt; list)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            list.get(i).eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;要求3：该方法能养所有动物</span><br><span class="line">    public static void keepPet3(ArrayList&lt;? extends Animal&gt; list)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            list.get(i).eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set接口中的方法基本上与Collection的API一致。  </p><p><strong>实现类</strong>：</p><ul><li><strong>Hashset</strong>:无序、不重复、无索引</li><li><strong>LinkedHashSet</strong>:有序，不重复，无索引</li><li><strong>TreeSet</strong>:可排序，不重复，无索引</li></ul><p>若要数据去重，默认使用HashSet，若要求去重且存取有序，使用LinkedHashSet。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">利用Set系列的集合，添加字符串，并使用多种方式遍历</span><br><span class="line">迭代器</span><br><span class="line">增强for</span><br><span class="line">lambda表达式</span><br><span class="line">*&#x2F;5</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Set&lt;String&gt; s&#x3D;new HashSet&lt;&gt;();</span><br><span class="line">        System.out.println(s.add(&quot;aaa&quot;));</span><br><span class="line">        System.out.println(s.add(&quot;aaa&quot;));&#x2F;&#x2F;不可重复</span><br><span class="line">        System.out.println(s.add(&quot;bbb&quot;));</span><br><span class="line">        System.out.println(s.add(&quot;ccc&quot;));</span><br><span class="line">        System.out.println(s);&#x2F;&#x2F;打印无序</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n&quot;+&quot;迭代器&quot;);</span><br><span class="line">        Iterator&lt;String&gt; iterator&#x3D;s.iterator();</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            String s1&#x3D;iterator.next();</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n&quot;+&quot;for增强遍历&quot;);</span><br><span class="line">        for(String s1:s)&#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n&quot;+&quot;lambda表达式&quot;);</span><br><span class="line">        s.forEach(s1-&gt; System.out.println(s1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">[aaa, ccc, bbb]</span><br><span class="line"></span><br><span class="line">迭代器</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line">for增强遍历</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line">lambda表达式</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet集合底层采取<strong>哈希表</strong>存储数据</p><h4 id="哈希表和哈希值"><a href="#哈希表和哈希值" class="headerlink" title="哈希表和哈希值"></a>哈希表和哈希值</h4><p><strong>哈希表</strong>是一种对增删改查数据性能都较好的结构</p><p><strong>哈希表组成</strong>：</p><ul><li>JDK8之前：数组+链表</li><li>JDK8开始：数组+链表+红黑树</li></ul><p><strong>哈希值</strong>：</p><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中，所有对象都可调用，默认使用地址值进行计算</li><li>一般情况下，会重写hashCode的方法，利用对象内部的属性值计算哈希值</li></ul><p><strong>对象的哈希值的特点</strong>：</p><ul><li>若并未重写hashCode方法，不同对象计算出的哈希值是不同的</li><li>若并重写hashCode方法，不同对象只要属性值相同，计算出的哈希值是一样的</li><li>在小部分情况下，不同的属性值或不同的地址值计算出来的哈希值也有可能一样。（哈希碰撞)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student student1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        System.out.println(student1.hashCode());</span><br><span class="line">        System.out.println(student2.hashCode());</span><br><span class="line">        &#x2F;&#x2F;哈希碰撞</span><br><span class="line">        System.out.println(&quot;abc&quot;.hashCode());</span><br><span class="line">        System.out.println(&quot;acD&quot;.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return age &#x3D;&#x3D; student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">24022538</span><br><span class="line">24022538</span><br><span class="line">96354</span><br><span class="line">96354</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h4><ol><li>创建一个默认长度16，默认加载因为0.75的数组，数组名为table。<ul><li>加载因即当数组存储元素为16*0.75=12时，会扩容一倍，数组长度变为32</li></ul></li><li>根据元素的哈希值跟数组的长度计算出应存入的位置i<ul><li>int index=(数组长度-1)&amp;哈希值;</li></ul></li><li>判断当前位置是否为null，若是null直接存入</li><li>若位置不为null,表示有元素，则调用equals方法比较属性值</li><li>一样，不存；不同：存入数组形成链表<ul><li>JDK8以前：新元素存入数组，老元素挂在新元素下面</li><li>JDK8以后：新元素直接挂在老元素下面</li></ul></li></ol><p><strong>注</strong>：jdk8以后，当链表长度超过8，且数组长度大于等于64时，自动转换为红黑树。  </p><p>若集合中存储的是自定义对象，必须重写hashCode和equals方法。  </p><h4 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：创建一个存储学生对象的集合，存储多个学生对象</span><br><span class="line">使用程序实现在控制台遍历该集合</span><br><span class="line">要求：学生对象的成员变量值相同，我们就认为是同一个对象</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return age &#x3D;&#x3D; student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.HashSet;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student student1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student3&#x3D;new Student(&quot;李四&quot;,18);</span><br><span class="line">        Student student4&#x3D;new Student(&quot;王五&quot;,19);</span><br><span class="line">        HashSet&lt;Student&gt; hashSet&#x3D;new HashSet&lt;&gt;();</span><br><span class="line">        System.out.println(hashSet.add(student1));</span><br><span class="line">        System.out.println(hashSet.add(student2));</span><br><span class="line">        System.out.println(hashSet.add(student3));</span><br><span class="line">        System.out.println(hashSet.add(student4));</span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">[Student&#123;name &#x3D; 王五, age &#x3D; 19&#125;, Student&#123;name &#x3D; 张三, age &#x3D; 18&#125;, Student&#123;name &#x3D; 李四, age &#x3D; 18&#125;]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p><strong>有序</strong>，<strong>不重复</strong>，<strong>无索引</strong></p><h4 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h4><p>底层数据结构依然是哈希表，只是每个元素又额外多了一个双链表的机制记录存取的顺序。</p><h4 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line"></span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        Student student &#x3D; (Student) o;</span><br><span class="line">        return age &#x3D;&#x3D; student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student student1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student3&#x3D;new Student(&quot;李四&quot;,18);</span><br><span class="line">        Student student4&#x3D;new Student(&quot;王五&quot;,19);</span><br><span class="line">        LinkedHashSet&lt;Student&gt; lhs&#x3D;new LinkedHashSet&lt;&gt;();</span><br><span class="line">        System.out.println(lhs.add(student1));</span><br><span class="line">        System.out.println(lhs.add(student2));</span><br><span class="line">        System.out.println(lhs.add(student3));</span><br><span class="line">        System.out.println(lhs.add(student4));</span><br><span class="line">        System.out.println(lhs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">[Student&#123;name &#x3D; 张三, age &#x3D; 18&#125;, Student&#123;name &#x3D; 李四, age &#x3D; 18&#125;, Student&#123;name &#x3D; 王五, age &#x3D; 19&#125;]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>不重复，无索引，可排序  </p><p><strong>可排序</strong>：按照元素的默认规则（从小到大）排序。  </p><p><strong>TreeSet</strong>集合底层是基于<strong>红黑树</strong>的数据结构实现排序的，增删改查性能都比较好。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; treeSet&#x3D;new TreeSet&lt;&gt;();</span><br><span class="line">        treeSet.add(99);</span><br><span class="line">        treeSet.add(13);</span><br><span class="line">        treeSet.add(123);</span><br><span class="line">        treeSet.add(113);</span><br><span class="line">        treeSet.add(69);</span><br><span class="line">        treeSet.add(59);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">        System.out.println(&quot;\n迭代器遍历&quot;);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator&#x3D;treeSet.iterator();</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            int i&#x3D;iterator.next();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n增强for遍历&quot;);</span><br><span class="line">        for(int n:treeSet)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\nlambda表达式&quot;);</span><br><span class="line">        treeSet.forEach(i-&gt; System.out.println(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[13, 59, 69, 99, 113, 123]</span><br><span class="line"></span><br><span class="line">迭代器遍历</span><br><span class="line">13</span><br><span class="line">59</span><br><span class="line">69</span><br><span class="line">99</span><br><span class="line">113</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">增强for遍历</span><br><span class="line">13</span><br><span class="line">59</span><br><span class="line">69</span><br><span class="line">99</span><br><span class="line">113</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">lambda表达式</span><br><span class="line">13</span><br><span class="line">59</span><br><span class="line">69</span><br><span class="line">99</span><br><span class="line">113</span><br><span class="line">123</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>TreeSet集合默认的规则</strong>：</p><ul><li>对于数值类型：Integer，Double，默认按照从小到大的顺序进行排序</li><li>对于字符，字符串类型，按照字符在ASCII码表中的数字升序进行排序</li></ul><h3 id="TreeSet的两种比较方式"><a href="#TreeSet的两种比较方式" class="headerlink" title="TreeSet的两种比较方式"></a>TreeSet的两种比较方式</h3><ol><li>默认排序/自然排序</li><li>比较器排序</li></ol><p><strong>使用原则</strong>：默认使用第一种，若第一种不能满足当前需求，则使用第二种。  </p><p>当方式一和方式二重复时，以方式二为准。</p><h4 id="默认排序-自然排序"><a href="#默认排序-自然排序" class="headerlink" title="默认排序/自然排序"></a>默认排序/自然排序</h4><p>JavaBean类实现Comparable接口，指定比较规则。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：创建TreeSet集合，并添加4个学生对象</span><br><span class="line">学生对象属性：</span><br><span class="line">姓名，年龄</span><br><span class="line">要求按照学生的年龄进行排序，同年龄按照字母排序</span><br><span class="line">同姓名，同年龄认为是同一个人</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Student o) &#123;</span><br><span class="line">        &#x2F;&#x2F;this:表示当前要添加的元素</span><br><span class="line">        &#x2F;&#x2F;o:表示已在红黑树存在的元素</span><br><span class="line">        &#x2F;&#x2F;返回值：</span><br><span class="line">        &#x2F;&#x2F;负数：表示当前要添加的元素是小的，存左边</span><br><span class="line">        &#x2F;&#x2F;正数：表示当前要添加的元素是大的，存右边</span><br><span class="line">        &#x2F;&#x2F;0：表示当前添加的元素已存在，舍弃</span><br><span class="line">        int i&#x3D;this.getAge()-o.getAge();</span><br><span class="line">        return i&#x3D;&#x3D;0?this.getName().compareTo(o.getName()):i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; treeSet&#x3D;new TreeSet&lt;&gt;();</span><br><span class="line">        Student student1&#x3D;new Student(&quot;zs&quot;,23);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;ls&quot;,19);</span><br><span class="line">        Student student3&#x3D;new Student(&quot;bw&quot;,19);</span><br><span class="line">        Student student4&#x3D;new Student(&quot;zz&quot;,25);</span><br><span class="line">        treeSet.add(student1);</span><br><span class="line">        treeSet.add(student2);</span><br><span class="line">        treeSet.add(student3);</span><br><span class="line">        treeSet.add(student4);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[Student&#123;name &#x3D; bw, age &#x3D; 19&#125;, Student&#123;name &#x3D; ls, age &#x3D; 19&#125;, Student&#123;name &#x3D; zs, age &#x3D; 23&#125;, Student&#123;name &#x3D; zz, age &#x3D; 25&#125;]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="比较器排序"><a href="#比较器排序" class="headerlink" title="比较器排序"></a>比较器排序</h4><p>创建TreeSet对象时，传送比较器Comparator指定规则。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">要求：存入四个字符串，&quot;asadsa&quot;&quot;dasddw&quot;&quot;rgreg&quot;&quot;feg&quot;，按照长度排序，若等长则按照首字母排序</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;import java.util.Comparator;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        TreeSet&lt;String&gt; treeSet&#x3D;new TreeSet&lt;&gt;(new Comparator&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(String o1, String o2) &#123;</span><br><span class="line">                int i &#x3D; o1.length()-o2.length();</span><br><span class="line">                return i&#x3D;&#x3D;0?o1.compareTo(o2):i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;o1:表示当前要添加的元素</span><br><span class="line">        &#x2F;&#x2F;o2:表示已在红黑树中存在的元素</span><br><span class="line">        &#x2F;&#x2F;返回值规则跟之前一样</span><br><span class="line">        TreeSet&lt;String&gt; treeSet&#x3D;new TreeSet&lt;&gt;((o1,o2)-&gt;&#123;</span><br><span class="line">            int i &#x3D; o1.length()-o2.length();</span><br><span class="line">            return i&#x3D;&#x3D;0?o1.compareTo(o2):i;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeSet.add(&quot;asadsa&quot;);</span><br><span class="line">        treeSet.add(&quot;dasddw&quot;);</span><br><span class="line">        treeSet.add(&quot;rgreg&quot;);</span><br><span class="line">        treeSet.add(&quot;feg&quot;);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;[feg, rgreg, asadsa, dasddw]</span><br></pre></td></tr></table></figure><h4 id="范例-5"><a href="#范例-5" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">创建5个学生对象</span><br><span class="line">属性：姓名，年龄，语文成绩，数学成绩，英语成绩</span><br><span class="line">按照总分从高到低输出</span><br><span class="line">若总分一样，按语文排</span><br><span class="line">若语文一样，按数学排</span><br><span class="line">若数学一样，按英语排</span><br><span class="line">若英语一样，按年龄排</span><br><span class="line">若年龄一样，按姓名排</span><br><span class="line">若全部一样，认为是同一学生，不存</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">package com.ljsblog.domain1;</span><br><span class="line"></span><br><span class="line">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private int chinese_score;</span><br><span class="line">    private int math_score;</span><br><span class="line">    private int english_score;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, int chinese_score, int math_score, int english_score) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.chinese_score &#x3D; chinese_score;</span><br><span class="line">        this.math_score &#x3D; math_score;</span><br><span class="line">        this.english_score &#x3D; english_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param name</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param age</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return chinese_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getChinese_score() &#123;</span><br><span class="line">        return chinese_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param chinese_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setChinese_score(int chinese_score) &#123;</span><br><span class="line">        this.chinese_score &#x3D; chinese_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return math_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getMath_score() &#123;</span><br><span class="line">        return math_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param math_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setMath_score(int math_score) &#123;</span><br><span class="line">        this.math_score &#x3D; math_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取</span><br><span class="line">     * @return english_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int getEnglish_score() &#123;</span><br><span class="line">        return english_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置</span><br><span class="line">     * @param english_score</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setEnglish_score(int english_score) &#123;</span><br><span class="line">        this.english_score &#x3D; english_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSum()&#123;</span><br><span class="line">        return chinese_score+math_score+english_score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;name &#x3D; &quot; + name + &quot;, age &#x3D; &quot; + age + &quot;, chinese_score &#x3D; &quot; + chinese_score + &quot;, math_score &#x3D; &quot; + math_score + &quot;, english_score &#x3D; &quot; + english_score + &quot;, sum &#x3D; &quot; + getSum() + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Student o) &#123;</span><br><span class="line">        if(o.getSum()!&#x3D;this.getSum())&#123;</span><br><span class="line">            return o.getSum()-this.getSum();</span><br><span class="line">        &#125;else if(o.getChinese_score()!&#x3D;this.getChinese_score())&#123;</span><br><span class="line">            return o.getChinese_score()-this.getChinese_score();</span><br><span class="line">        &#125;else if(o.getMath_score()!&#x3D;this.getMath_score())&#123;</span><br><span class="line">            return o.getMath_score()-this.getMath_score();</span><br><span class="line">        &#125;else if(o.getEnglish_score()!&#x3D;this.getEnglish_score())&#123;</span><br><span class="line">            &#x2F;&#x2F;因为总分相等，语文相等，数学相等，英语必然相等，这里的英语可以不写，但还是写上了</span><br><span class="line">            return o.getEnglish_score()-this.getEnglish_score();</span><br><span class="line">        &#125;else if(o.getAge()!&#x3D;this.getAge())&#123;</span><br><span class="line">            return o.getAge()-this.getAge();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return o.getName().compareTo(this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; treeSet&#x3D;new TreeSet&lt;&gt;();</span><br><span class="line">        Student student1&#x3D;new Student(&quot;one&quot;,19,88,100,99);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;two&quot;,19,88,100,99);</span><br><span class="line">        Student student3&#x3D;new Student(&quot;three&quot;,20,76,26,48);</span><br><span class="line">        Student student4&#x3D;new Student(&quot;four&quot;,23,97,46,18);</span><br><span class="line">        Student student5&#x3D;new Student(&quot;five&quot;,18,65,95,26);</span><br><span class="line">        Student student6&#x3D;new Student(&quot;one&quot;,19,88,100,99);</span><br><span class="line">        treeSet.add(student1);</span><br><span class="line">        treeSet.add(student2);</span><br><span class="line">        treeSet.add(student3);</span><br><span class="line">        treeSet.add(student4);</span><br><span class="line">        treeSet.add(student5);</span><br><span class="line">        treeSet.add(student6);</span><br><span class="line">        for(Student student:treeSet)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Student&#123;name &#x3D; two, age &#x3D; 19, chinese_score &#x3D; 88, math_score &#x3D; 100, english_score &#x3D; 99, sum &#x3D; 287&#125;</span><br><span class="line">Student&#123;name &#x3D; one, age &#x3D; 19, chinese_score &#x3D; 88, math_score &#x3D; 100, english_score &#x3D; 99, sum &#x3D; 287&#125;</span><br><span class="line">Student&#123;name &#x3D; five, age &#x3D; 18, chinese_score &#x3D; 65, math_score &#x3D; 95, english_score &#x3D; 26, sum &#x3D; 186&#125;</span><br><span class="line">Student&#123;name &#x3D; four, age &#x3D; 23, chinese_score &#x3D; 97, math_score &#x3D; 46, english_score &#x3D; 18, sum &#x3D; 161&#125;</span><br><span class="line">Student&#123;name &#x3D; three, age &#x3D; 20, chinese_score &#x3D; 76, math_score &#x3D; 26, english_score &#x3D; 48, sum &#x3D; 150&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>若想集合中元素可重复<ul><li>用ArrayList集合，基于数组的（用的最多）</li></ul></li><li>若想集合中元素可重复，且当前的增删操作明显多于查询<ul><li>用LinkedList集合，基于链表的</li></ul></li><li>若想对集合中元素去重<ul><li>用HashSet集合，基于哈希表的（用的最多）</li></ul></li><li>若想对集合中元素去重，而且保证存取顺序<ul><li>用LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet。</li></ul></li><li>若想对集合中的元素进行排序<ul><li>用TreeSet集合，基于红黑树，后续也可用List集合实现排序</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法（十一）</title>
      <link href="2023/03/15/J11/"/>
      <url>2023/03/15/J11/</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法（十一）"><a href="#常见算法（十一）" class="headerlink" title="常见算法（十一）"></a>常见算法（十一）</h1><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h3><p>从数组中一个一个去找数据。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求:定义一个方法利用基本查找，查询某个元素在数组中的索引，包括元素重复的</span><br><span class="line">&#x2F;&#x2F;数据如下：&#123;88,88,99,44,88,88,1234&#125;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;88,88,99,44,88,88,1234&#125;;</span><br><span class="line">        int num&#x3D;88;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;find(arr,num);</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static ArrayList&lt;Integer&gt; find(int[] arr, int num)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            if(arr[i]&#x3D;&#x3D;num) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><strong>前提条件</strong>：数组中的数据是必须有序的。  </p><p><strong>核心逻辑</strong>：每次排除一般的查找范围。  </p><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求:定义一个方法利用二分查找,查询某个元素在数组中的索引</span><br><span class="line">&#x2F;&#x2F;数据如下：&#123;16,48,78,88,91,96,105,144,151&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int arr[]&#x3D;&#123;16,48,78,88,91,96,105,144,151&#125;;&#x2F;&#x2F;该数组从小到大排序</span><br><span class="line">        int num&#x3D;48;</span><br><span class="line">        int result&#x3D;find(arr,num);</span><br><span class="line">        if(result&#x3D;&#x3D;-1)&#123;</span><br><span class="line">            System.out.println(&quot;并无此数字&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int find(int arr[],int num)&#123;</span><br><span class="line">    &#x2F;&#x2F;1.定义查找范围</span><br><span class="line">        int left&#x3D;0;&#x2F;&#x2F;数组首位</span><br><span class="line">        int right&#x3D;arr.length-1;&#x2F;&#x2F;数组末尾</span><br><span class="line">        &#x2F;&#x2F;利用循环不断查找数据</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            if(left&gt;right)&#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;找到left和right的中间位置并放入mid</span><br><span class="line">            int mid&#x3D;(left+right)&#x2F;2;</span><br><span class="line">            &#x2F;&#x2F;用mid指向的元素和num比较</span><br><span class="line">            if(arr[mid]&gt;num) &#123;</span><br><span class="line">            &#x2F;&#x2F;num在mid下标的左边</span><br><span class="line">                right &#x3D; mid - 1;</span><br><span class="line">            &#125;else if(arr[mid]&lt;num)&#123;</span><br><span class="line">                &#x2F;&#x2F;num在mid下标的右边</span><br><span class="line">                left&#x3D;mid+1;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F;num和mid指向的元素一样</span><br><span class="line">                return mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>基于二分查找的基础上，使mid更靠近想要查找的元素。  </p><p>mid=left+(key-arr[left])/(arr[right]-arr[left])*(right-left)  </p><p><strong>注</strong>：要求数据尽可能的分布均匀，若不均匀，插值查找反而会降低效率。  </p><p>代码与二分查找类似，只需修改mid的计算方式。</p><p>根据黄金分割点来计算mid指向的位置。  </p><h3 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h3><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>分块查找适用于数据较多，但是数据不会发生变化的情况。  </p><p><strong>分块原则</strong>：</p><ol><li>前一块中的最大数据，小于后一块的所有数据（块内无序，快间有序）</li><li>块数量一般是数字个数的开根号，16个数组一般为4块左右</li></ol><p><strong>核心思路</strong>：先确定块，再在块中挨个寻找。  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">实现步骤：</span><br><span class="line">1.创建数组blocks存放每一个块对象的信息</span><br><span class="line">2.先查找blocks确定要查找的数据属于哪一块</span><br><span class="line">3.再单独遍历这一块数据即可</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Test类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr &#x3D; &#123;16, 5, 9, 12,21, 18,</span><br><span class="line">                    32, 23, 37, 26, 45, 34,</span><br><span class="line">                    50, 48, 61, 52, 73, 66&#125;;</span><br><span class="line">        &#x2F;&#x2F;创建三个块对象，并放入数组</span><br><span class="line">        Block block1&#x3D;new Block(21,0,5);</span><br><span class="line">        Block block2&#x3D;new Block(45,6,11);</span><br><span class="line">        Block block3&#x3D;new Block(73,12,17);</span><br><span class="line">        Block[] blocks&#x3D;&#123;block1,block2,block3&#125;;</span><br><span class="line">        &#x2F;&#x2F;要查找的元素</span><br><span class="line">        int num&#x3D;26;</span><br><span class="line">        &#x2F;&#x2F;调用方法，开始查找，若数组中存在要查找的元素返回索引，若无，返回-1</span><br><span class="line">        int index&#x3D;getIndex(blocks,num,arr);</span><br><span class="line">        if(index&#x3D;&#x3D;-1)&#123;</span><br><span class="line">            System.out.println(&quot;无&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;寻找num索引</span><br><span class="line">    public static int getIndex(Block[] blocks,int num,int arr[])&#123;</span><br><span class="line">        &#x2F;&#x2F;确定number是在那一块当中，弱不存在返回-1</span><br><span class="line">        int b&#x3D;getBlockIndex(blocks,num);</span><br><span class="line">        if(b&#x3D;&#x3D;-1)&#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取该块起始索引和结束索引</span><br><span class="line">        int start&#x3D;blocks[b].getStartIndex();</span><br><span class="line">        int end&#x3D;blocks[b].getEndIndex();</span><br><span class="line">        for(int i&#x3D;start;i&lt;&#x3D;end;i++)&#123;</span><br><span class="line">            if(num&#x3D;&#x3D;arr[i])&#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断num在哪一块</span><br><span class="line">    public static int getBlockIndex(Block[] blocks,int num)&#123;</span><br><span class="line">        &#x2F;&#x2F;从0索引开始遍历blocks，如果num小于max，num便这一块当中的</span><br><span class="line">        for(int i&#x3D;0;i&lt;blocks.length;i++)&#123;</span><br><span class="line">            if(num&lt;&#x3D;blocks[i].getMax())&#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Block.java</span><br><span class="line">public class Block &#123;</span><br><span class="line">    private int max;</span><br><span class="line">    private int startIndex;</span><br><span class="line">    private int endIndex;</span><br><span class="line">    public Block()&#123;&#125;</span><br><span class="line">    public Block(int max, int startIndex, int endIndex) &#123;</span><br><span class="line">        this.max &#x3D; max;</span><br><span class="line">        this.startIndex &#x3D; startIndex;</span><br><span class="line">        this.endIndex &#x3D; endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getMax() &#123;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMax(int max) &#123;</span><br><span class="line">        this.max &#x3D; max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getStartIndex() &#123;</span><br><span class="line">        return startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStartIndex(int startIndex) &#123;</span><br><span class="line">        this.startIndex &#x3D; startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getEndIndex() &#123;</span><br><span class="line">        return endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEndIndex(int endIndex) &#123;</span><br><span class="line">        this.endIndex &#x3D; endIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ol><li>相邻的元素两两比较，若是从小到大排，大的放右边，小的放左边；若是从大到小排，小的放右边，大的放左边。</li><li>第一轮比较完毕之后，最大值（最小值）就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr &#x3D; &#123;16, 5, 9, 12,21, 18&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length-1;i++)&#123;</span><br><span class="line">            for(int j&#x3D;0;j&lt;arr.length-1-i;j++)&#123;</span><br><span class="line">                if(arr[j]&gt;arr[j+1])&#123;</span><br><span class="line">                    int t&#x3D;arr[j];</span><br><span class="line">                    arr[j]&#x3D;arr[j+1];</span><br><span class="line">                    arr[j+1]&#x3D;t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">5 9 12 16 18 21 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>若是从小到大排，小的放前面，大的放后面；若是从大到小排，大的放前面，小的放后面</li><li>第一次循环结束后，最小（大）的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr &#x3D; &#123;16, 5, 9, 12,21, 18&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length-1;i++)&#123;</span><br><span class="line">            for(int j&#x3D;i+1;j&lt;arr.length;j++)&#123;</span><br><span class="line">                if(arr[i]&gt;arr[j])&#123;</span><br><span class="line">                    int t&#x3D;arr[i];</span><br><span class="line">                    arr[i]&#x3D;arr[j];</span><br><span class="line">                    arr[j]&#x3D;t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将0到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。  </p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。  </p><p>N的范围：0~最大索引  </p><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr &#x3D; &#123;3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48&#125;;</span><br><span class="line">        int startIndex&#x3D;-1;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                startIndex&#x3D;i+1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;startIndex;i&lt;arr.length;i++)&#123;</span><br><span class="line">            int j&#x3D;i;</span><br><span class="line">            while(j&gt;0 &amp;&amp; arr[j-1]&gt;arr[j])&#123;</span><br><span class="line">                int t&#x3D;arr[j-1];</span><br><span class="line">                arr[j-1]&#x3D;arr[j];</span><br><span class="line">                arr[j]&#x3D;t;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ol><li>在数组中挑出一个元素，一般是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain12;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;24,78,14,67,12,74,45,57,135,78,46&#125;;</span><br><span class="line">        p(arr,0,arr.length-1);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void p(int[] arr,int i,int j)&#123;</span><br><span class="line">        int start&#x3D;i;</span><br><span class="line">        int end&#x3D;j;</span><br><span class="line">        if(start&gt;end)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int base&#x3D;arr[i];</span><br><span class="line">        while(start!&#x3D;end)&#123;</span><br><span class="line">            while(true)&#123;</span><br><span class="line">                if(start&gt;&#x3D;end || base&gt;arr[end])&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;while(true)&#123;</span><br><span class="line">                if(start&gt;&#x3D;end || base&lt;arr[start])&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            int t&#x3D;arr[start];</span><br><span class="line">            arr[start]&#x3D;arr[end];</span><br><span class="line">            arr[end]&#x3D;t;</span><br><span class="line">        &#125;</span><br><span class="line">        int t&#x3D;arr[i];</span><br><span class="line">        arr[i]&#x3D;arr[start];</span><br><span class="line">        arr[start]&#x3D;t;</span><br><span class="line">        p(arr,i,start-1);</span><br><span class="line">        p(arr,start+1,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>操作数组的工具类。  </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p><strong>格式</strong>：  </p><p>public static String toString(数组)  </p><p><strong>说明</strong>：把数组拼接成一个字符串</p><h4 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h4><p><strong>格式</strong>：  </p><p>public static int binarySearch(数组,查找的元素)  </p><p><strong>说明</strong>：二分查找法查找元素。  </p><p><strong>注</strong>：  </p><p>二分查找的前提是数组中元素必须有有序的。  </p><p>若使用binarySearch方法，数组中的元素必须是升序的。  </p><p>若要查找的元素不存在，则返回插入点的负数再减一。</p><h4 id="copyOf"><a href="#copyOf" class="headerlink" title="copyOf"></a>copyOf</h4><p><strong>格式</strong>：  </p><p>public static int[] copyOf(原数组,新数组长度)  </p><p><strong>说明</strong>：拷贝数组  </p><p><strong>注</strong>：  </p><ol><li>若新数组长度小于原数组长度，会部分拷贝</li><li>若新数组长度等于原数组长度，会完全拷贝</li><li>若新数组长度大于原数组长度，会完全拷贝，剩下的元素默认初始化。</li></ol><h4 id="copyOfRange"><a href="#copyOfRange" class="headerlink" title="copyOfRange"></a>copyOfRange</h4><p><strong>格式</strong>：  </p><p>public static int[] copyOfRange(原数组,起始索引,结束索引)  </p><p><strong>说明</strong>：拷贝数据，指定范围，包头不包尾</p><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p><strong>格式</strong>：  </p><p>public static void fill(数组,元素)  </p><p><strong>说明</strong>：填充数组</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><strong>格式1</strong>：  </p><p>public static void sort(数组)  </p><p><strong>说明</strong>：默认情况下，给基本数据类型进行升序排列，底层使用的是快速排序。  </p><p><strong>格式2</strong>：  </p><p>public static void sort(数组,排序规则)  </p><p><strong>说明</strong>：  </p><p>只能给引用数据类型的数组进行排序，若数组是基本数据类型，需转换成对应的包装类。  </p><p>第二个参数是一个接口，所以我们在调用方法时，需传递这个接口的实现对象，作为排序的规则。  </p><p>此实现类一般只需使用一次，可以直接采取匿名内部类的方式。  </p><p><strong>底层原理</strong>：  </p><p>利用插入排序+二分查找的方式进行排序。  </p><p>默认把0索引的数据当做有序的序列，1所以到最后为无序序列，遍历无序的序列得到其中每一个元素。  </p><p>设当前遍历所得元素为X元素，把X往有序序列插入，利用二分查找确定X元素的插入点，令X元素和插入点元素比较，比较的规则就是compare方法的方法体。  </p><p>若方法返回值为负数，则X继续与前面的数据比较。  </p><p>若方法返回值为正数，则X继续与后面的数据比较。  </p><p>若返回值为0，则X与后面的元素比较。  </p><p>直到确定X的最终位置为止。  </p><p><strong>compare方法的形参</strong>：  </p><p><strong>参数一</strong>：o1,表示在无序序列中，遍历得到的每一个元素。  </p><p><strong>参数二</strong>：o2,表示有序序列的元素。  </p><p><strong>返回值</strong>：  </p><p>负数，表示X是小的，放在前面；正数，表示X是大的，放在后面；0，表示当前要插入的元素跟现在的元素是一样的，放在后面。  </p><p><strong>结论</strong>：</p><ul><li>o1-o2，升序排列</li><li>o2-o2，降序排列</li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;toString方法&quot;);</span><br><span class="line">        int[] arr1&#x3D;&#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">        String str1&#x3D; Arrays.toString(arr1);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;binarySearch方法&quot;);</span><br><span class="line">        System.out.println(Arrays.binarySearch(arr1,3));</span><br><span class="line">        System.out.println(Arrays.binarySearch(arr1,9));</span><br><span class="line">        System.out.println(Arrays.binarySearch(arr1,10));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;copyOf方法&quot;);</span><br><span class="line">        int[] arr2&#x3D;Arrays.copyOf(arr1,9);</span><br><span class="line">        String str2&#x3D;Arrays.toString(arr2);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        int[] arr3&#x3D;Arrays.copyOf(arr1,5);</span><br><span class="line">        String str3&#x3D;Arrays.toString(arr3);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">        int[] arr4&#x3D;Arrays.copyOf(arr1,20);</span><br><span class="line">        String str4&#x3D;Arrays.toString(arr4);</span><br><span class="line">        System.out.println(str4);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;copyOfRange方法&quot;);</span><br><span class="line">        int[] arr5&#x3D;Arrays.copyOfRange(arr1,0,5);</span><br><span class="line">        String str5&#x3D;Arrays.toString(arr5);</span><br><span class="line">        System.out.println(str5);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;fill方法&quot;);</span><br><span class="line">        Arrays.fill(arr5,1);</span><br><span class="line">        System.out.println(Arrays.toString(arr5));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;sort格式1&quot;);</span><br><span class="line">        int[] arr6&#x3D;&#123;14,87,124,57,45,75,12,78,33&#125;;</span><br><span class="line">        Arrays.sort(arr6);</span><br><span class="line">        String str6&#x3D;Arrays.toString(arr6);</span><br><span class="line">        System.out.println(str6);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;sort格式2&quot;);</span><br><span class="line">        Integer[] arr7&#x3D;&#123;14,87,124,57,45,75,12,78,33&#125;;</span><br><span class="line">        Arrays.sort(arr7,new Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">                return o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        String str7&#x3D;Arrays.toString(arr7);</span><br><span class="line">        System.out.println(str7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式是JDK8开始后出现的一种新语法形式。  </p><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;() 对应方法的形参</span><br><span class="line">&#x2F;&#x2F;-&gt; 固定格式</span><br><span class="line">&#x2F;&#x2F;&#123;&#125; 对应着方法的方法体</span><br></pre></td></tr></table></figure><p><strong>基本作用</strong>：简化函数化接口的匿名内部类的写法。  </p><p><strong>函数化接口</strong>：有且仅有一个抽象方法的接口叫做函数化接口，接口上方可以加@FunctionalInterface注解。  </p><p><strong>使用前提</strong>：必须是接口的匿名内部类，接口中只能有一个抽象方法。  </p><p><strong>好处</strong>:Lambda是一个匿名函数，可以把Lambda表达式理解为一段可以传递的代码，它可以写成更简洁，更灵活的代码。  </p><h4 id="省略写法"><a href="#省略写法" class="headerlink" title="省略写法"></a>省略写法</h4><p><strong>省略核心</strong>：可推导，可省略。  </p><ul><li>参数类型可省略</li><li>若只有一个参数，参数类型和()均可省</li><li>若Lambda表达式的方法体只有一行，大括号，分号，return均可省略，但必须同时省略。</li></ul><h4 id="对比范例一"><a href="#对比范例一" class="headerlink" title="对比范例一"></a>对比范例一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Integer[] arr1&#x3D;&#123;69,42,65,89,26,32,16&#125;;</span><br><span class="line">        &#x2F;&#x2F;原版</span><br><span class="line">        Arrays.sort(arr1,new Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(Integer o1,Integer o2)&#123;</span><br><span class="line">                return o1-o2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Lambda表达式</span><br><span class="line">        Integer[] arr2&#x3D;&#123;69,42,65,89,26,32,16&#125;;</span><br><span class="line">        Arrays.sort(arr2,(Integer o1,Integer o2)-&gt;&#123;</span><br><span class="line">            return o1-o2;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Lambda表达式省略版</span><br><span class="line">        Integer[] arr3&#x3D;&#123;69,42,65,89,26,32,16&#125;;</span><br><span class="line">        Arrays.sort(arr3,(o1,o2)-&gt;o1-o2);</span><br><span class="line">        System.out.println(Arrays.toString(arr3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[16, 26, 32, 42, 65, 69, 89]</span><br><span class="line">[16, 26, 32, 42, 65, 69, 89]</span><br><span class="line">[16, 26, 32, 42, 65, 69, 89]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="对比范例二"><a href="#对比范例二" class="headerlink" title="对比范例二"></a>对比范例二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;原版</span><br><span class="line">        method(&quot;小白&quot;,new Swim()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void swiming(String name)&#123;</span><br><span class="line">                System.out.println(name+&quot;游泳&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Lambda表达式</span><br><span class="line">        method(&quot;小白&quot;,(String name)-&gt;&#123;</span><br><span class="line">            System.out.println(name+&quot;游泳&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Lambda表达式省略版</span><br><span class="line">        method(&quot;小白&quot;,name-&gt;System.out.println(name+&quot;游泳&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    public static void method(String name,Swim s)&#123;</span><br><span class="line">        s.swiming(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@FunctionalInterface</span><br><span class="line">interface Swim&#123;</span><br><span class="line">    public abstract void swiming(String name);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">小白游泳</span><br><span class="line">小白游泳</span><br><span class="line">小白游泳</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义数组并存储一些字符串，利用Arrays中的sort方法进行排序</span><br><span class="line">要求：</span><br><span class="line">按照字符串中的长度排序，从短到长。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String[] arr&#x3D;&#123;&quot;aaaa&quot;,&quot;a&quot;,&quot;aaaaa&quot;,&quot;aaa&quot;,&quot;aaaaaaaaaaa&quot;&#125;;</span><br><span class="line">        &#x2F;&#x2F;原版</span><br><span class="line">        &#x2F;*</span><br><span class="line">        Arrays.sort(arr,new Comparator&lt;String&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(String o1, String o2) &#123;</span><br><span class="line">                return o1.length()-o2.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;Lambda版</span><br><span class="line">        &#x2F;*</span><br><span class="line">        Arrays.sort(arr,(String o1,String o2)-&gt;&#123;</span><br><span class="line">            return o1.length()-o2.length();</span><br><span class="line">        &#125;);</span><br><span class="line">        *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;Lambda省略版</span><br><span class="line">        Arrays.sort(arr,(o1,o2)-&gt;o1.length()-o2.length());</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[a, aaa, aaaa, aaaaa, aaaaaaaaaaa]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义数组并存储一些女朋友对象，利用Arrays的sort方法进行排序</span><br><span class="line">要求1：属性有姓名，年龄，身高</span><br><span class="line">要求2：按照年龄的大小进行排序，若年龄一致，按身高排序，若身高一致，按姓名的字母排序</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.print(&quot;请输入你有几个女朋友：&quot;);</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        int num&#x3D;Integer.parseInt(scanner.nextLine());</span><br><span class="line">        Girlfriend[] girlfriends&#x3D;new Girlfriend[num];</span><br><span class="line">        for(int i&#x3D;0;i&lt;num;i++)&#123;</span><br><span class="line">            System.out.println(&quot;第&quot;+(i+1)+&quot;个&quot;);</span><br><span class="line">            System.out.print(&quot;请输入姓名：&quot;);</span><br><span class="line">            String name&#x3D;scanner.nextLine();</span><br><span class="line">            System.out.print(&quot;请输入年龄：&quot;);</span><br><span class="line">            int age&#x3D;Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.print(&quot;请输入身高：&quot;);</span><br><span class="line">            int height&#x3D;Integer.parseInt(scanner.nextLine());</span><br><span class="line">            Girlfriend girlfriend&#x3D;new Girlfriend(age,height,name);</span><br><span class="line">            girlfriends[i]&#x3D;girlfriend;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(girlfriends,(o1, o2)-&gt;&#123;</span><br><span class="line">                if(o1.getAge()!&#x3D;o2.getAge())&#123;</span><br><span class="line">                    return o1.getAge()-o2.getAge();</span><br><span class="line">                &#125;else if(o1.getHeight()!&#x3D;o2.getHeight())&#123;</span><br><span class="line">                    return o1.getHeight()-o2.getHeight();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return o1.getName().compareTo(o2.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        System.out.println(Arrays.toString(girlfriends));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;GirlFriend.java</span><br><span class="line">public class Girlfriend &#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private int height;</span><br><span class="line">    private String name;</span><br><span class="line">    public Girlfriend()&#123;&#125;</span><br><span class="line">    public Girlfriend(int age, int height, String name) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.height &#x3D; height;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getHeight() &#123;</span><br><span class="line">        return height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHeight(int height) &#123;</span><br><span class="line">        this.height &#x3D; height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Girlfriend&#123;&quot; +</span><br><span class="line">                &quot;age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, height&#x3D;&quot; + height +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">有一对兔子，从出生后第三个月起每个月都会生一对兔子，小兔子长到第三个月起每月又生一对兔子，假如兔子不死，到第12个月共有几对兔子</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;方法一</span><br><span class="line">        int[] arr&#x3D;new int[12];</span><br><span class="line">        arr[0]&#x3D;1;</span><br><span class="line">        arr[1]&#x3D;1;</span><br><span class="line">        for(int i&#x3D;2;i&lt;12;i++)&#123;</span><br><span class="line">            arr[i]&#x3D;arr[i-1]+arr[i-2];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;第十二个月为&quot;+arr[11]+&quot;对兔子&quot;);</span><br><span class="line">        System.out.println(&quot;第十二个月为&quot;+Fn(12)+&quot;对兔子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;方法二</span><br><span class="line">    public static int Fn(int num)&#123;</span><br><span class="line">        if(num&#x3D;&#x3D;1||num&#x3D;&#x3D;2)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return Fn(num-1)+Fn(num-2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">第十二个月为144对兔子</span><br><span class="line">第十二个月为144对兔子</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">有一堆桃子，猴子第一天吃其中一半，并多吃一个。以后每天猴子都吃当前剩下一半，再多吃一个，第10天的时候发现只剩一个桃子，最初总共多少桃子？</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(peach(1));</span><br><span class="line">    &#125;</span><br><span class="line">    public static int peach(int num)&#123;</span><br><span class="line">        if(num&#x3D;&#x3D;10)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return (peach(num+1)+1)*2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1534</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用API(十)</title>
      <link href="2023/03/13/J10/"/>
      <url>2023/03/13/J10/</url>
      
        <content type="html"><![CDATA[<h1 id="常用API-十"><a href="#常用API-十" class="headerlink" title="常用API-(十)"></a>常用API-(十)</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>帮助我们进行数学计算的工具，里面的方法为静态。<br>静态类，不用创造对象。</p><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><p><strong>abs</strong>:获取绝对值<br><strong>absExact</strong>:获取绝对值，超出范围会报错<br><strong>ceil</strong>:向上取整，向着数轴的正方向<br><strong>floor</strong>:向下取整，向着数轴的负方向<br><strong>max</strong>:取最大值<br><strong>min</strong>:取最大值<br><strong>pow</strong>:获取a的b次幂<br><strong>sqrt</strong>:开平方根<br><strong>random</strong>:获取[0.0,1.0)之间的随机数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;abs</span><br><span class="line">        System.out.println(Math.abs(-10));</span><br><span class="line">        System.out.println(Math.abs(10));</span><br><span class="line">        System.out.println(Math.abs(-10.1));</span><br><span class="line">        System.out.println(Math.abs(10.1));</span><br><span class="line">        &#x2F;&#x2F;ceil</span><br><span class="line">        System.out.println(Math.ceil(10.1));</span><br><span class="line">        System.out.println(Math.ceil(-10.1));</span><br><span class="line">        &#x2F;&#x2F;floor</span><br><span class="line">        System.out.println(Math.floor(10.1));</span><br><span class="line">        System.out.println(Math.floor(-10.1));</span><br><span class="line">        &#x2F;&#x2F;max</span><br><span class="line">        System.out.println(Math.max(10,20));</span><br><span class="line">        &#x2F;&#x2F;min</span><br><span class="line">        System.out.println(Math.min(10,20));</span><br><span class="line">        &#x2F;&#x2F;pow</span><br><span class="line">        System.out.println(Math.pow(10,2));</span><br><span class="line">        &#x2F;&#x2F;sqrt</span><br><span class="line">        System.out.println(Math.sqrt(4));</span><br><span class="line">        &#x2F;&#x2F;random</span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10.1</span><br><span class="line">10.1</span><br><span class="line">11.0</span><br><span class="line">-10.0</span><br><span class="line">10.0</span><br><span class="line">-11.0</span><br><span class="line">20</span><br><span class="line">10</span><br><span class="line">100.0</span><br><span class="line">2.0</span><br><span class="line">0.6820929033064135</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><h4 id="判断是否为质数"><a href="#判断是否为质数" class="headerlink" title="判断是否为质数"></a>判断是否为质数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        int n&#x3D;scanner.nextInt();</span><br><span class="line">        if(isPrime(n))&#123;</span><br><span class="line">            System.out.println(&quot;质数&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;非质数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean isPrime(int n)&#123;</span><br><span class="line">        for(int i&#x3D;2;i&lt;&#x3D;Math.sqrt(n);i++)&#123;</span><br><span class="line">            if(n%i&#x3D;&#x3D;0)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>工具类，提供一些与系统相关的方法。<br>静态，不用创造对象</p><h3 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h3><h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><p>public static void exit(int status)<br>终止当前运行的Java虚拟机。<br><strong>方法形参</strong>：状态码</p><ul><li>0：表示当前虚拟机是正常停止</li><li>非0：表示当前虚拟机异常停止</li></ul><h4 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis"></a>currentTimeMillis</h4><p>public static long currentTimeMillis()<br>返回当前系统的时间的毫秒值形式。</p><h4 id="arraycopy"><a href="#arraycopy" class="headerlink" title="arraycopy"></a>arraycopy</h4><p>public static void arraycopy(数组源数据,起始索引,目的地数组,起始索引,拷贝个数)<br><strong>注</strong>：</p><ol><li>若数据源数组和目的地数组都是基本数据类型，两者类型必须一致，否则就会报错</li><li>在拷贝时需要考虑数组的长度，若超出范围则会报错</li><li>若数组源数组和目的地操作数都是引用数据类型，子类类型可以赋值给父类类型</li></ol><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain10;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr1&#x3D;new int[]&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">        int[] arr2&#x3D;new int[5];</span><br><span class="line">        System.arraycopy(arr1,0,arr2,0,5);</span><br><span class="line">        for(int i&#x3D;0;i&lt;5;i++)&#123;</span><br><span class="line">            System.out.println(arr2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Student s1&#x3D;new Student(&quot;zhangsan&quot;,18);</span><br><span class="line">        Student s2&#x3D;new Student(&quot;lisi&quot;,19);</span><br><span class="line">        Student s3&#x3D;new Student(&quot;wangwu&quot;,20);</span><br><span class="line">        Student[] sa1&#x3D;new Student[]&#123;s1,s2,s3&#125;;</span><br><span class="line">        Person[] sa2&#x3D;new Person[3];</span><br><span class="line">        System.arraycopy(sa1,0,sa2,0,3);</span><br><span class="line">        for(int i&#x3D;0;i&lt;3;i++)&#123;</span><br><span class="line">            Student s&#x3D;(Student)sa2[i];</span><br><span class="line">            System.out.println(s.getName()+&quot;:&quot;+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Person&#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    public Person()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Person(int age,String name)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student extends Person&#123;</span><br><span class="line">    public Student()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        super(age,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">zhangsan:18</span><br><span class="line">lisi:19</span><br><span class="line">wangwu:20</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>表示当前虚拟机的运行环境。<br>非静态，需要创建对象，但不可以new，需要用专门的方法创建</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="Runtime-getRuntime"><a href="#Runtime-getRuntime" class="headerlink" title="Runtime.getRuntime"></a>Runtime.getRuntime</h4><p>public static Runtime.getRuntime()<br>创建对象，无论创建多少个，始终指向一个。</p><h4 id="exit-1"><a href="#exit-1" class="headerlink" title="exit"></a>exit</h4><p>public void exit(int status)<br>停止虚拟机</p><ul><li>0:正常关机</li><li>非0：异常关机</li></ul><h4 id="availableProcessors"><a href="#availableProcessors" class="headerlink" title="availableProcessors"></a>availableProcessors</h4><p>public int availableProcessors()<br>获得CPU的线程数</p><h4 id="maxMemory"><a href="#maxMemory" class="headerlink" title="maxMemory"></a>maxMemory</h4><p>public long maxMemory()<br>JVM能从系统中获取总内存大小（单位byte）</p><h4 id="totalMemory"><a href="#totalMemory" class="headerlink" title="totalMemory"></a>totalMemory</h4><p>public long totalMemory()<br>JVM已经从系统中获取总内存大小（单位byte）</p><h4 id="freeMemory"><a href="#freeMemory" class="headerlink" title="freeMemory"></a>freeMemory</h4><p>public long freeMemory()<br>JVM剩余内存大小（单位byte）</p><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>public Process exec(String command)<br>运行cmd命令</p><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Runtime r&#x3D;Runtime.getRuntime();</span><br><span class="line">        System.out.println(r.availableProcessors());</span><br><span class="line">        System.out.println(r.maxMemory()&#x2F;1024&#x2F;1024);</span><br><span class="line">        System.out.println(r.totalMemory()&#x2F;1024&#x2F;1024);</span><br><span class="line">        System.out.println(r.freeMemory()&#x2F;1024&#x2F;1024);</span><br><span class="line">        System.out.println(r.exec(&quot;notepad&quot;));</span><br><span class="line">        r.exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>所有类都直接或间接继承object类。<br>**构造方法(Object只有空参构造)**：<br>public Object()</p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>public String toString()<br>返回对象的字符串表示形式。<br>默认情况下，Object类中的toString方法返回的是地址值，打印一个对象打印的是地址值。<br>若要打印一个对象，想看到属性值的话，可以重写toString方法，在重写的方法中，把对象的属性值进行拼接。  </p><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>public boolean equals()<br>比较两个对象是否相等。<br>若未重写equals方法，默认用Object中的方法进行比较，比较的是地址值是否相等。<br>大多数情况下地址值对我们意义不大，所以我们会重写，重写后比较的就是对象内部的属性值。<br><strong>注</strong>：String中的equals方法是经过重写的。字符串中的equals方法，先判断参数是否为字符串，若是字符串，在比较内部的属性；若不是字符串，直接返回false。</p><h4 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h4><p>protected Object clone()<br>对象克隆<br>把A对象的属性值完全拷贝给B对象，也叫对象拷贝，对象复制。<br>方法在底层会创建一个对象，并把原对象中的数据拷贝过去。<br><strong>细节</strong>：  </p><ol><li>重写Object中的clone方法</li><li>让javabean类实现Cloneable接口</li><li>创建原对象并调用clone</li></ol><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;学生类</span><br><span class="line">import java.util.StringJoiner;</span><br><span class="line">public class Student implements Cloneable&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int[] score&#x3D;new int[3];</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int id,String name,int[] score)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.score&#x3D;score;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setScore(int[] score)&#123;</span><br><span class="line">        this.score&#x3D;score;</span><br><span class="line">    &#125;</span><br><span class="line">    public int[] getScore()&#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;学号：&quot;+id+&quot; 姓名：&quot;+name+&quot; 各科分数：&quot;+arrToString(score);</span><br><span class="line">    &#125;</span><br><span class="line">    public String arrToString(int[] score)&#123;</span><br><span class="line">        StringJoiner sj&#x3D;new StringJoiner(&quot;,&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;score.length;i++)&#123;</span><br><span class="line">            sj.add(&quot;&quot;+score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        int s[]&#x3D;&#123;88,16,91&#125;;</span><br><span class="line">        Student stu1&#x3D;new Student(3,&quot;张三&quot;,s);</span><br><span class="line">        Student stu2&#x3D;(Student)stu1.clone();</span><br><span class="line">        System.out.println(stu1.toString());</span><br><span class="line">        System.out.println(stu2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浅克隆和深克隆"><a href="#浅克隆和深克隆" class="headerlink" title="浅克隆和深克隆"></a>浅克隆和深克隆</h2><p><strong>浅克隆</strong>：对象内部属性无论是基本数据类型还是引用数据类型，都会完全拷贝，其中引用数据类型拷贝的是地址。上边Object常用方法里clone的例子便是浅克隆。<br><strong>深克隆</strong>：基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的。<br><strong>深克隆例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;学生类</span><br><span class="line">import java.util.StringJoiner;</span><br><span class="line">public class Student implements Cloneable&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int[] score&#x3D;new int[3];</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int id,String name,int[] score)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.score&#x3D;score;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setScore(int[] score)&#123;</span><br><span class="line">        this.score&#x3D;score;</span><br><span class="line">    &#125;</span><br><span class="line">    public int[] getScore()&#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;学号：&quot;+id+&quot; 姓名：&quot;+name+&quot; 各科分数：&quot;+arrToString(score);</span><br><span class="line">    &#125;</span><br><span class="line">    public String arrToString(int[] score)&#123;</span><br><span class="line">        StringJoiner sj&#x3D;new StringJoiner(&quot;,&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;score.length;i++)&#123;</span><br><span class="line">            sj.add(&quot;&quot;+score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        int newScore[]&#x3D;new int[this.score.length];</span><br><span class="line">        for(int i&#x3D;0;i&lt;newScore.length;i++)&#123;</span><br><span class="line">            newScore[i]&#x3D;this.score[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Student stu&#x3D;(Student)super.clone();</span><br><span class="line">        stu.score&#x3D;newScore;</span><br><span class="line">        return stu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        int s[]&#x3D;&#123;88,16,91&#125;;</span><br><span class="line">        Student stu1&#x3D;new Student(3,&quot;张三&quot;,s);</span><br><span class="line">        Student stu2&#x3D;(Student)stu1.clone();</span><br><span class="line"></span><br><span class="line">        int u[]&#x3D;stu1.getScore();</span><br><span class="line">        u[1]&#x3D;2;</span><br><span class="line">        System.out.println(stu1.toString());</span><br><span class="line">        System.out.println(stu2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">学号：3 姓名：张三 各科分数：&#123;88,2,91&#125;</span><br><span class="line">学号：3 姓名：张三 各科分数：&#123;88,16,91&#125;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>Objects是一个工具类，提供一些操作对象的方法</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>equals</strong>:<br>public static boolean equals(Object a,Object b)<br>先做非空判断，比较两个对象。<br><strong>isNull</strong>:<br>public static boolean isNull(Object obj)<br>判断对象是否为null，为null返回true，反之。<br><strong>nonNull</strong>:<br>public static boolean nonNull(Object obj)<br>判断对象是否为null与isNULL相反。</p><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;学生类</span><br><span class="line">public class Student implements Cloneable&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int id,String name)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">import java.util.Objects;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student s1&#x3D;new Student(18,&quot;张三&quot;);</span><br><span class="line">        Student s2&#x3D;new Student(18,&quot;李四&quot;);</span><br><span class="line">        Student s3&#x3D;new Student(18,&quot;李四&quot;);</span><br><span class="line">        Student s4&#x3D;null;</span><br><span class="line">        System.out.println(Objects.equals(s1,s4));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(Objects.isNull(s1));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(Objects.isNull(s4));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(Objects.nonNull(s1));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(Objects.nonNull(s4));&#x2F;&#x2F;false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p><strong>整数类型</strong>：</p><ul><li>byte,1个字节</li><li>short,2个字节</li><li>int,4个字节</li><li>long,8个字节</li></ul><p>若是都不够用的是时候。可以用BigInteger</p><h3 id="构造方法和静态方法"><a href="#构造方法和静态方法" class="headerlink" title="构造方法和静态方法"></a>构造方法和静态方法</h3><ul><li>public BigInteger(int num,Random rmd)<ul><li>获取随机大整数，范围0~2的num次方-1</li></ul></li><li>public BigInteger(String val)<ul><li>获取指定的大整数</li><li>字符串中必须是整数，否则会报错</li></ul></li><li>public BigInteger(String val,int radix)<ul><li>获取指定进制的大整数</li><li>字符串中数字必须是整数，该整数必须要与进制吻合，比如二进制，只能写0和1。</li></ul></li><li>public static BigInteger valueOf(long val)<ul><li>静态方法获取BigInteger的对象，内部有优化</li><li>表示范围与long一致</li><li>在提前把-16~16先创建好BigInteger的对象，若多次获取不会创建新的。</li></ul></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.util.Random;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.public BigInteger(int num,Random rmd)</span><br><span class="line">        Random random&#x3D;new Random();</span><br><span class="line">        BigInteger bd1&#x3D;new BigInteger(4,random);</span><br><span class="line">        System.out.println(bd1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.public BigInteger(String val)</span><br><span class="line">        BigInteger bd2&#x3D;new BigInteger(&quot;9999999999999999999999999999999999&quot;);</span><br><span class="line">        System.out.println(bd2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.public BigInteger(String val,int radix)</span><br><span class="line">        BigInteger bd3&#x3D;new BigInteger(&quot;100&quot;,2);</span><br><span class="line">        System.out.println(bd3);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;4.public static BigInteger valueOf(long val)</span><br><span class="line">        BigInteger bd4&#x3D;BigInteger.valueOf(3);</span><br><span class="line">        BigInteger bd5&#x3D;BigInteger.valueOf(3);</span><br><span class="line">        System.out.println(bd4&#x3D;&#x3D;bd5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">15</span><br><span class="line">9999999999999999999999999999999999</span><br><span class="line">4</span><br><span class="line">true</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>对象一旦创建里面的数据不能发生改变。</li><li>只要进行计算都会产生一个新的BigInteger对象</li><li>若BigInteger表示数字没有超出long的范围，可用静态方法获取</li><li>若BigInteger表示数字超出long的范围，可用构造方法获取</li></ol><h3 id="常见成员方法"><a href="#常见成员方法" class="headerlink" title="常见成员方法"></a>常见成员方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>public BigInteger add(BigInteger val)<br>加法</p><h4 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h4><p>public BigInteger substract(BigInteger val)<br>减法</p><h4 id="multiply"><a href="#multiply" class="headerlink" title="multiply"></a>multiply</h4><p>public BigInteger multiply(BigInteger val)<br>乘法</p><h4 id="divide"><a href="#divide" class="headerlink" title="divide"></a>divide</h4><p>public BigInteger divide(BigInteger val)<br>除法，获取商</p><h4 id="divideAndRemainder"><a href="#divideAndRemainder" class="headerlink" title="divideAndRemainder"></a>divideAndRemainder</h4><p>public BigInteger[] divideAndRemainder(BigInteger val)<br>除法，获取商和余数</p><h4 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h4><p>public boolean equals(Object x)<br>比较是否相同</p><h4 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h4><p>public BigInteger pow(int exponent)<br>次幂</p><h4 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h4><p>public BigInteger max/min(BigInteger val)<br>返回最大数或最小数,返回大（小）数的对象，不创建新的对象。</p><h4 id="intValue"><a href="#intValue" class="headerlink" title="intValue"></a>intValue</h4><p>public int intValue()<br>转为int类型整数，超出范围数据有误</p><h4 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain12;</span><br><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        BigInteger bd1&#x3D;BigInteger.valueOf(10);</span><br><span class="line">        BigInteger bd2&#x3D;BigInteger.valueOf(5);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;add</span><br><span class="line">        BigInteger bd3&#x3D;bd1.add(bd2);</span><br><span class="line">        System.out.println(bd3);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;subtract</span><br><span class="line">        BigInteger bd4&#x3D;bd1.subtract(bd2);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;multiply</span><br><span class="line">        BigInteger bd5&#x3D;bd1.multiply(bd2);</span><br><span class="line">        System.out.println(bd5);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;divide</span><br><span class="line">        BigInteger bd6&#x3D;bd1.divide(bd2);</span><br><span class="line">        System.out.println(bd6);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;divideAndRemainder</span><br><span class="line">        BigInteger[] bd&#x3D;bd1.divideAndRemainder(bd2);</span><br><span class="line">        System.out.println(bd.length);</span><br><span class="line">        System.out.println(bd[0]);</span><br><span class="line">        System.out.println(bd[1]);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;equals</span><br><span class="line">        System.out.println(bd1.equals(bd2));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;pow</span><br><span class="line">        BigInteger bd8&#x3D;bd1.pow(2);</span><br><span class="line">        System.out.println(bd8);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;max</span><br><span class="line">        BigInteger bd9&#x3D;bd1.max(bd2);</span><br><span class="line">        System.out.println(bd9);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;min</span><br><span class="line">        BigInteger bd10&#x3D;bd1.min(bd2);</span><br><span class="line">        System.out.println(bd10);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;intValue</span><br><span class="line">        int i&#x3D;bd2.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">15</span><br><span class="line">5</span><br><span class="line">50</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">false</span><br><span class="line">100</span><br><span class="line">10</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="BigDecima"><a href="#BigDecima" class="headerlink" title="BigDecima"></a>BigDecima</h2><p>不可变的，任意精度的有符号十进制数。<br>用于小数的精确运算，用来表示很大的小数。  </p><h3 id="构造方法和静态方法-1"><a href="#构造方法和静态方法-1" class="headerlink" title="构造方法和静态方法"></a>构造方法和静态方法</h3><ul><li>public BigDecima(double val)<ul><li>有可能不精确，不建议使用</li></ul></li><li>public BigDecima(String val)</li><li>public static BigDecima valueOf(double val)</li></ul><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigDecimal;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.public BigDecima(double val)</span><br><span class="line">        BigDecimal bd1&#x3D;new BigDecimal(0.01);</span><br><span class="line">        System.out.println(bd1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.public BigDecima(String val)</span><br><span class="line">        BigDecimal bd2&#x3D;new BigDecimal(&quot;0.01&quot;);</span><br><span class="line">        System.out.println(bd2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.public static BigDecima valueOf(double val)</span><br><span class="line">        BigDecimal bd3&#x3D;BigDecimal.valueOf(10);</span><br><span class="line">        BigDecimal bd4&#x3D;BigDecimal.valueOf(10);</span><br><span class="line">        System.out.println(bd3&#x3D;&#x3D;bd4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">0.01000000000000000020816681711721685132943093776702880859375</span><br><span class="line">0.01</span><br><span class="line">true</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>若要表示的数没有超出double范围，建议使用静态方法。</li><li>若要表示的数超出double范围，建议使用构造方法</li><li>静态方法中，若我们传递的是0-10之间的整数，那么方法会返回已经创建好的对象，不会重新new</li></ol><h3 id="常见成员方法-1"><a href="#常见成员方法-1" class="headerlink" title="常见成员方法"></a>常见成员方法</h3><h4 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h4><p>public BigDecimal add(BigDecimal val)<br>加法</p><h4 id="subtract-1"><a href="#subtract-1" class="headerlink" title="subtract"></a>subtract</h4><p>public BigDecimal subtract(BigDecimal val)<br>减法</p><h4 id="multiply-1"><a href="#multiply-1" class="headerlink" title="multiply"></a>multiply</h4><p>public BigDecimal multiply(BigDecimal val)<br>乘法</p><h4 id="divide-1"><a href="#divide-1" class="headerlink" title="divide"></a>divide</h4><ul><li>public BigDecimal divide(BigDecimal val)</li><li>public BigDecimal divide(BigDecimal val,精确几位,舍入模式)<ul><li>舍入模式用RoundingMode</li><li>常用四舍五入为RoundingMode.HALF_UP</li></ul></li></ul><p>除法</p><h4 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigDecimal;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;add</span><br><span class="line">        BigDecimal bd1&#x3D;BigDecimal.valueOf(10.0);</span><br><span class="line">        BigDecimal bd2&#x3D;BigDecimal.valueOf(2.0);</span><br><span class="line">        BigDecimal bd3&#x3D;bd1.add(bd2);</span><br><span class="line">        System.out.println(bd3);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;subtract</span><br><span class="line">        BigDecimal bd4&#x3D;bd1.subtract(bd2);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;multiply</span><br><span class="line">        BigDecimal bd5&#x3D;bd1.multiply(bd2);</span><br><span class="line">        System.out.println(bd5);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;divide</span><br><span class="line">        BigDecimal bd6&#x3D;bd1.multiply(bd2);</span><br><span class="line">        System.out.println(bd6);</span><br><span class="line">        BigDecimal bd7&#x3D;BigDecimal.valueOf(3.0);</span><br><span class="line">        BigDecimal bd8&#x3D;bd1.multiply(bd7,2,RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(bd8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">12.0</span><br><span class="line">8.0</span><br><span class="line">20.00</span><br><span class="line">5</span><br><span class="line">3.33</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>用来描述或匹配一系列符合某个语句规则的字符串。<br><strong>作用</strong>：</p><ol><li>校验字符串是否满足规则</li><li>在一段文本中查找满足要求的内容</li></ol><p><strong>注</strong>：这些规则无需去背，用的时候可以在api文档中搜索Pattern去查</p><h3 id="字符类-只匹配一个字符"><a href="#字符类-只匹配一个字符" class="headerlink" title="字符类(只匹配一个字符)"></a>字符类(只匹配一个字符)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[abc]           只能是a,b,c</span><br><span class="line">[^abc]          除了abc之外的任何字符</span><br><span class="line">[a-zA-Z]        a到z，A到Z，包括（范围）</span><br><span class="line">[a-d[m-p]]      a到p，或m到p</span><br><span class="line">[a-z&amp;&amp;[def]]    a-z和def的交集，为d,e,f</span><br><span class="line">[a-z&amp;&amp;[^bc]]    a-z和非bc的交集,（等于[ad-z]）</span><br><span class="line">[a-z&amp;&amp;[^m-p]]   a到z和除了m到p的交集。（等同于[a-lq-z]）</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;只能是abc&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[abc]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;z&quot;.matches(&quot;[abc]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;ab&quot;.matches(&quot;[abc]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;ab&quot;.matches(&quot;[abc][abc]&quot;));&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;不能出现abc&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[^abc]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;z&quot;.matches(&quot;[^abc]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;zz&quot;.matches(&quot;[^abc]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;zz&quot;.matches(&quot;[^abc][^abc]&quot;));&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a到z,A到Z（包括头尾的范围）&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[a-zA-Z]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;z&quot;.matches(&quot;[a-zA-Z]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;aa&quot;.matches(&quot;[a-zA-Z]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;zz&quot;.matches(&quot;[a-zA-Z]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;0&quot;.matches(&quot;[a-zA-Z]&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a到d,或m到p&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;d&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;m&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;p&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;e&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;0&quot;.matches(&quot;[a-d[m-p]]&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a-z和def的交集,为def&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[a-z&amp;&amp;[def]]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;d&quot;.matches(&quot;[a-z&amp;&amp;[def]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;0&quot;.matches(&quot;[a-z&amp;&amp;[def]]&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a-z和非bc的交集，等同于[ad-z]&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[a-z&amp;&amp;[^bc]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;b&quot;.matches(&quot;[a-z&amp;&amp;[^bc]]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;0&quot;.matches(&quot;[a-z&amp;&amp;[^bc]]&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a到z和除了m和p的交集，等同于[a-lq-z]&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;[a-z&amp;&amp;[^m-p]]&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;m&quot;.matches(&quot;[a-z&amp;&amp;[^m-p]]&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;0&quot;.matches(&quot;[a-z&amp;&amp;[^m-p]]&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预定义字符-只匹配一个字符"><a href="#预定义字符-只匹配一个字符" class="headerlink" title="预定义字符(只匹配一个字符)"></a>预定义字符(只匹配一个字符)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.       任何字符</span><br><span class="line">\d      一个数字[0-9]</span><br><span class="line">\D      非数字[^0-9]</span><br><span class="line">\s      一个空白字符[\t\n\x0B\f\r]</span><br><span class="line">\S      非空白字符[^\s]</span><br><span class="line">\w      [a-zA-Z_0-9]英文，数字，下划线</span><br><span class="line">\W      [^\w]一个非单词字符</span><br></pre></td></tr></table></figure><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;.只能表示一个字符&quot;);</span><br><span class="line">        System.out.println(&quot;你&quot;.matches(&quot;.&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;你&quot;.matches(&quot;..&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;你们&quot;.matches(&quot;..&quot;));&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\\\\d只能是任意的一位数字&quot;);</span><br><span class="line">        System.out.println(&quot;简单来记：两个\\表示一个\\&quot;);</span><br><span class="line">        System.out.println(&quot;a&quot;.matches(&quot;\\d&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;3&quot;.matches(&quot;\\d&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;333&quot;.matches(&quot;\\d&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\\\\w只能是一位单词字符[a-zA-Z_0-9]&quot;);</span><br><span class="line">        System.out.println(&quot;z&quot;.matches(&quot;\\w&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;2&quot;.matches(&quot;\\w&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;21&quot;.matches(&quot;\\w&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;你&quot;.matches(&quot;\\w&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;非单词字符&quot;);</span><br><span class="line">        System.out.println(&quot;你&quot;.matches(&quot;\\W&quot;));&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X?      X,一次或0次</span><br><span class="line">X*      X,零次或多次</span><br><span class="line">X+      X,一次或多次</span><br><span class="line">X&#123;n&#125;    X,正好n次</span><br><span class="line">X&#123;n,&#125;   X,至少n次</span><br><span class="line">X&#123;n,m&#125;  X,至少n但不超过m次</span><br></pre></td></tr></table></figure><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;必须是数字，字母和下划线，至少6位&quot;);</span><br><span class="line">        System.out.println(&quot;sdasfd4544&quot;.matches(&quot;\\w&#123;6,&#125;&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;s44&quot;.matches(&quot;\\w&#123;6,&#125;&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;必须是数字和字符，必须是4位&quot;);</span><br><span class="line">        System.out.println(&quot;12dF&quot;.matches(&quot;[a-zA-Z0-9]&#123;4&#125;&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;12_F&quot;.matches(&quot;[a-zA-Z0-9]&#123;4&#125;&quot;));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(&quot;12dF&quot;.matches(&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(&quot;12_F&quot;.matches(&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;));&#x2F;&#x2F;false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组就是一个小括号。  </p><p>正则表达式中分组有两种：<strong>捕获分组</strong>和<strong>非捕获分组</strong>。  </p><h4 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h4><p>每组都是由组号（序号）的，组号从1开始，连续不间断，以左括号为基准（<strong>注</strong>：不是以整个括号为基准），最左边的是第一组，其次第二组，以此类推。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正则内部使用：</span><br><span class="line">\\组号</span><br><span class="line">正则外部使用：</span><br><span class="line">$组号</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(\\d+)(\\d+)(\\d+)</span><br><span class="line">第一个(\\d+)是第一组，第二个(\\d+)是第二组，第三个(\\d+)是第三组。</span><br><span class="line">(\\d+(\\d+))(\\d+)</span><br><span class="line">(\\d+(\\d+))第一组，第一组里面的(\\d+)是第二组，外面的(\\d+)是第三组</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;判断一个字符串的开始字符和结束字符是否一致，只考虑单个字符</span><br><span class="line">        String s1&#x3D;&quot;a123a&quot;;</span><br><span class="line">        String s2&#x3D;&quot;b456b&quot;;</span><br><span class="line">        String s3&#x3D;&quot;17891&quot;;</span><br><span class="line">        String s4&#x3D;&quot;&amp;abcd&quot;;</span><br><span class="line">        System.out.println(s1.matches(&quot;(.).+\\1&quot;));</span><br><span class="line">        System.out.println(s2.matches(&quot;(.).+\\1&quot;));</span><br><span class="line">        System.out.println(s3.matches(&quot;(.).+\\1&quot;));</span><br><span class="line">        System.out.println(s4.matches(&quot;(.).+\\1&quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#x2F;&#x2F;判断一个字符串的开始字符和结束字符是否一致，可多个字符</span><br><span class="line">        String s5&#x3D;&quot;ab123ab&quot;;</span><br><span class="line">        String s6&#x3D;&quot;b456b&quot;;</span><br><span class="line">        String s7&#x3D;&quot;123789123&quot;;</span><br><span class="line">        String s8&#x3D;&quot;a&amp;caabca&amp;b&quot;;</span><br><span class="line">        System.out.println(s5.matches(&quot;(.+).+\\1&quot;));</span><br><span class="line">        System.out.println(s6.matches(&quot;(.+).+\\1&quot;));</span><br><span class="line">        System.out.println(s7.matches(&quot;(.+).+\\1&quot;));</span><br><span class="line">        System.out.println(s8.matches(&quot;(.+).+\\1&quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line">        &#x2F;&#x2F;判断一个字符串的开始字符和结束字符是否一致，开始部分内部每个字符也需要一致</span><br><span class="line">        String s9&#x3D;&quot;aaa123aaa&quot;;</span><br><span class="line">        String s10&#x3D;&quot;bbb456bbb&quot;;</span><br><span class="line">        String s11&#x3D;&quot;111789111&quot;;</span><br><span class="line">        String s12&#x3D;&quot;aacaabcaac&quot;;</span><br><span class="line">        System.out.println(s9.matches(&quot;((.)\\2*).+\\1&quot;));</span><br><span class="line">        System.out.println(s10.matches(&quot;((.)\\2*).+\\1&quot;));</span><br><span class="line">        System.out.println(s11.matches(&quot;((.)\\2*).+\\1&quot;));</span><br><span class="line">        System.out.println(s12.matches(&quot;((.)\\2*).+\\1&quot;));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;字符串内容去重</span><br><span class="line">        String s&#x3D;&quot;这是一一一个个网网网网站站&quot;;</span><br><span class="line">        &#x2F;&#x2F;注：replaceAll可以识别正则表达式，replace不能</span><br><span class="line">        String str&#x3D;s.replaceAll(&quot;(.)\\1+&quot;,&quot;$1&quot; );</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">这是一个网站</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><p>分组之后不需要再用本组数据，仅仅是把数据括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(?:正则)</span><br><span class="line">获取所有</span><br><span class="line"></span><br><span class="line">(?&#x3D;正则)</span><br><span class="line">获取前面部分</span><br><span class="line"></span><br><span class="line">(?!正则)</span><br><span class="line">获取不是指定内容的前面部分</span><br></pre></td></tr></table></figure><h3 id="范例一"><a href="#范例一" class="headerlink" title="范例一"></a>范例一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;请编写正则表达式验证用户名是否满足要求。</span><br><span class="line">&#x2F;&#x2F;要求：大小写字母，数字，下划线一共4-16位。</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String regex&#x3D;&quot;\\w&#123;4,16&#125;&quot;;</span><br><span class="line">        System.out.println(&quot;ljs&quot;.matches(regex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;请编写正则表达式验证身份证号码是否满足要求。</span><br><span class="line">&#x2F;&#x2F;按照身份证号码格式验证。</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String regex2&#x3D;&quot;[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])\\d&#123;3&#125;[\\dxX]&quot;;</span><br><span class="line">        System.out.println(&quot;13118819991104181x&quot;.matches(regex2));</span><br><span class="line">        System.out.println(&quot;121158199911041819&quot;.matches(regex2));</span><br><span class="line">        System.out.println(&quot;021158199911041819&quot;.matches(regex2));</span><br><span class="line">        System.out.println(&quot;021158199900041819&quot;.matches(regex2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="范例二"><a href="#范例二" class="headerlink" title="范例二"></a>范例二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*有如下文本，请按照要求爬取数据。Java自从95年问世以来,经历了很多版本,目前企业中用的最多的是lavaB和Java11,因为这两个是长期支持版本,下一个长期支持版本是Java17,相信在未来不久Java17也会逐渐登上历史舞台</span><br><span class="line">要求：找出里面所有的JavaXX</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String str&#x3D;&quot;Java自从95年问世以来,经历了很多版本,目前企业中用的最多的是lavaB和Java11,因为这两个是长期支持版本,下一个长期支持版本是Java17,相信在未来不久Java17也会逐渐登上历史舞台&quot;;</span><br><span class="line">        &#x2F;&#x2F;Pattern：表示正则表达式</span><br><span class="line">        Pattern p&#x3D;Pattern.compile(&quot;Java\\d&#123;0,2&#125;&quot;);</span><br><span class="line">        &#x2F;&#x2F;Matcher:文本适配器，按照正则表达式的规则读取字符串，从头开始读取</span><br><span class="line">        &#x2F;&#x2F;m要在str中找符合规则的字符串</span><br><span class="line">        Matcher m&#x3D;p.matcher(str);</span><br><span class="line">        &#x2F;&#x2F;用文本适配器从头读取，寻找是否有满足的字符串</span><br><span class="line">        &#x2F;&#x2F;若无，m.find()返回false</span><br><span class="line">        &#x2F;&#x2F;若有，返回true，在底层记录字符串的起始索引和结束索引+1</span><br><span class="line">        &#x2F;&#x2F;第一次[0，4)</span><br><span class="line">        while(m.find())&#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">            System.out.print(&quot;start：&quot;+m.start());&#x2F;&#x2F;起始索引</span><br><span class="line">            System.out.println(&quot;\tend：&quot;+m.end());&#x2F;&#x2F;结束索引+1</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Java</span><br><span class="line">start：0end：4</span><br><span class="line">Java11</span><br><span class="line">start：39end：45</span><br><span class="line">Java17</span><br><span class="line">start：69end：75</span><br><span class="line">Java17</span><br><span class="line">start：83end：89</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="JDK7时间类"><a href="#JDK7时间类" class="headerlink" title="JDK7时间类"></a>JDK7时间类</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date类是JDK写好的Javabean类，用来描述时间，精确到毫秒。  </p><ul><li>空参构造:public Date()<ul><li>默认表示系统当前时间。  </li></ul></li><li>有参构造:public Date(long time)<ul><li>表示指定的时间。  </li></ul></li><li>public void setTime(long time)<ul><li>设置/修改毫秒值</li></ul></li><li>public long getTime()<ul><li>获取时间对象的毫秒值</li></ul></li></ul><p><strong>包</strong>：java.util.Date<br><strong>注</strong>：打印对象名会显示具体时间。<br><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;任务一：打印时间原点开始一年之后的时间</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Date date&#x3D;new Date(1000L*60*60*24*365);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Fri Jan 01 08:00:00 CST 1971</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;任务二：定义任意两个Date对象，比较一下哪个时间在前，哪个在后</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Random;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Random r&#x3D;new Random();</span><br><span class="line">        Date d1&#x3D;new Date(Math.abs(r.nextInt()));</span><br><span class="line">        Date d2&#x3D;new Date(Math.abs(r.nextInt()));</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">        long t1&#x3D;d1.getTime();</span><br><span class="line">        long t2&#x3D;d2.getTime();</span><br><span class="line">        if(t1&gt;t2)&#123;</span><br><span class="line">            System.out.println(&quot;第一个时间在后，第二个时间在前&quot;);</span><br><span class="line">        &#125;else if(t1&lt;t2)&#123;</span><br><span class="line">            System.out.println(&quot;第二个时间在后，第一个时间在前&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;两个时间相等&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Tue Jan 13 08:56:18 CST 1970</span><br><span class="line">Fri Jan 23 02:30:33 CST 1970</span><br><span class="line">第二个时间在后，第一个时间在前</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p><strong>作用</strong>：</p><ul><li><strong>格式化</strong>：把时间变成我们喜欢的格式</li><li><strong>解析</strong>：把字符串的时间变成Date对象</li></ul><ul><li>空参构造:public SimpleDateFormat()<ul><li>默认格式</li></ul></li><li>有参构造:Public SimpleDateFormat(String pattern)<ul><li>指定格式</li></ul></li><li>public final String format(Date date)<ul><li>格式化：日期对象变成字符串</li></ul></li><li>public Date parse(String source)<ul><li>解析：字符串变成日期对象  </li></ul></li></ul><p><strong>包</strong>：java.text.SimpleDateFormat<br><strong>范例1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.利用空参构造创建SimpleDateFormat对象，默认格式</span><br><span class="line">        SimpleDateFormat sdf1&#x3D;new SimpleDateFormat();</span><br><span class="line">        Date d1&#x3D;new Date();</span><br><span class="line">        String str1&#x3D;sdf1.format(d1);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.利用有参构造创建SimpleDateFormat对象，默认格式</span><br><span class="line">        SimpleDateFormat sdf2&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String str2&#x3D;sdf2.format(d1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.定义一个字符串变成Date</span><br><span class="line">        String str3&#x3D;&quot;2023-03-09 17:00:01&quot;;</span><br><span class="line">        SimpleDateFormat sdf3&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date d2&#x3D;sdf3.parse(str3);</span><br><span class="line">        System.out.println(d2.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">23-3-9 下午5:26</span><br><span class="line">2023-03-09 17:26:20</span><br><span class="line">1678352401000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>范例2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;假如你的出生年月日为：2000-11-11，请用字符串表示这个数据，并将其转换为2000年11月11日</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">        String str1&#x3D;&quot;2000-11-11&quot;;</span><br><span class="line">        SimpleDateFormat spd1&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date d1&#x3D;spd1.parse(str1);</span><br><span class="line">        SimpleDateFormat spd2&#x3D;new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span><br><span class="line">        String str2&#x3D;spd2.format(d1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calender"><a href="#Calender" class="headerlink" title="Calender"></a>Calender</h3><p>Calender代表系统当前时间的日历对象，可单独修改，获取时间中的年，月，日  </p><p><strong>注</strong>：</p><ol><li><p>Calender是一个抽象类，不能直接创建对象，而是通过静态方法getInstance获取子类对象。</p><ul><li><strong>底层原理</strong>：根据系统的不同时区获取不同的日历对象，默认表示当前时间，会把时间中的纪元，年，月，日，时，分，秒，星期，等等都放到一个数组当众</li></ul></li><li><p><strong>月份</strong>：范围0-11，若取出0，实际上是1月</p></li><li><p><strong>星期</strong>：在外国人眼里，星期日是一周中的第一天</p></li></ol><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><p>public static Calender getInstance()</p><ul><li>获取当前时间的日历对象</li></ul></li><li><p>public final Date getTime()</p><ul><li>获取日期对象</li></ul></li><li><p>public final setTime(Date date)</p><ul><li>给日历设置日期对象</li></ul></li><li><p>public long getTimeInMillis()</p><ul><li>拿到时间毫秒值 </li></ul></li><li><p>public long setTimeInMillis(long millis)</p><ul><li>给日历设置时间毫秒值</li></ul></li><li><p>public int get(int field)</p><ul><li>取日期中的某个字段信息</li></ul></li><li><p>public void set(int field,int value)</p><ul><li>修改日历的某个字段信息</li></ul></li><li><p>public void add(int field,int amount)</p><ul><li>为某个字段增加/减少指定的值</li></ul></li></ul><h4 id="范例-5"><a href="#范例-5" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Calendar calendar&#x3D;Calendar.getInstance();</span><br><span class="line">        Date d&#x3D;new Date(0L);</span><br><span class="line">        calendar.setTime(d);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">        calendar.set(Calendar.YEAR,2000);</span><br><span class="line">        calendar.set(Calendar.MONTH,11);</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,10);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">        calendar.add(Calendar.YEAR,1);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">        int year&#x3D;calendar.get(Calendar.YEAR);</span><br><span class="line">        int month&#x3D;calendar.get(Calendar.MONTH)+1;</span><br><span class="line">        int date&#x3D;calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        int week&#x3D;calendar.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        System.out.println(year+&quot;,&quot;+month+&quot;,&quot;+date+&quot;,&quot;+getWeek(week));</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getWeek(int index)&#123;</span><br><span class="line">        String[] arr&#x3D;&#123;&quot;&quot;,&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;&#125;;</span><br><span class="line">        return arr[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">Sun Dec 10 08:00:00 CST 2000</span><br><span class="line">Mon Dec 10 08:00:00 CST 2001</span><br><span class="line">2001,12,10,星期一</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="JDK8时间类"><a href="#JDK8时间类" class="headerlink" title="JDK8时间类"></a>JDK8时间类</h2><p>JDK8的时间日期是不可变的，若修改减少增加时间，调用者不会改变，而是返回一个新的时间</p><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><h4 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h4><p>时区  </p><h5 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li><p>static Set<String> getAvailableZoneIds()</String></p><ul><li>获取java中支持的所有时区</li></ul></li><li><p>static ZoneId systemDefault()</p><ul><li>获取系统的默认时区</li></ul></li><li><p>static ZoneId of(String zoneId)</p><ul><li>获取一个指定时区</li></ul></li></ul><h5 id="范例-6"><a href="#范例-6" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.time.ZoneId;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.获取所有时区名称</span><br><span class="line">        Set&lt;String&gt; zoneIds&#x3D; ZoneId.getAvailableZoneIds();</span><br><span class="line">        &#x2F;&#x2F;System.out.println(zoneIds);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.获取当前系统的默认时区</span><br><span class="line">        ZoneId zoneId&#x3D;ZoneId.systemDefault();</span><br><span class="line">        System.out.println(zoneId);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取指定时区</span><br><span class="line">        ZoneId zoneId1&#x3D;ZoneId.of(&quot;Etc&#x2F;GMT+8&quot;);</span><br><span class="line">        System.out.println(zoneId1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><h5 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li><p>static Instant now()</p><ul><li>获取当前时间的Instant对象（标准时间）</li></ul></li><li><p>static Instant ofXxx(long epochMills)</p><ul><li>根据（秒/毫秒/纳秒）获取Instant对象</li></ul></li><li><p>ZoneDateTime atZone(ZoneId zone)</p><ul><li>指定时区</li></ul></li><li><p>boolean isXxx(Instant otherInstance)</p><ul><li>判断系列的方法</li></ul></li><li><p>Instant minusXxx(long millisTosubtract)</p><ul><li>减少时间系列的方法</li></ul></li><li><p>Instant plusXxx(long millisTosubtract)</p><ul><li>增加时间系列的方法</li></ul></li></ul><h5 id="范例-7"><a href="#范例-7" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.time.Instant;</span><br><span class="line">import java.time.ZoneId;</span><br><span class="line">import java.time.ZonedDateTime;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.获取当前时间的Instant对象（标准时间）</span><br><span class="line">        Instant instant1&#x3D;Instant.now();</span><br><span class="line">        System.out.println(instant1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.根据（秒&#x2F;毫秒&#x2F;纳秒）获取Instant对象</span><br><span class="line">        &#x2F;&#x2F;毫秒</span><br><span class="line">        Instant instant2&#x3D;Instant.ofEpochMilli(0L);</span><br><span class="line">        System.out.println(instant2);</span><br><span class="line">        &#x2F;&#x2F;秒</span><br><span class="line">        Instant instant3&#x3D;Instant.ofEpochSecond(1L);</span><br><span class="line">        System.out.println(instant3);</span><br><span class="line">        &#x2F;&#x2F;纳秒</span><br><span class="line">        Instant instant4&#x3D;Instant.ofEpochSecond(1L,1000000000L);</span><br><span class="line">        System.out.println(instant4);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.指定时区</span><br><span class="line">        ZonedDateTime zonedDateTime&#x3D;Instant.now().atZone(ZoneId.of(&quot;Asia&#x2F;Shanghai&quot;));</span><br><span class="line">        System.out.println(zonedDateTime);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;4.判断</span><br><span class="line">        &#x2F;&#x2F;判断调用者是否在前</span><br><span class="line">        System.out.println(instant2.isBefore(instant3));</span><br><span class="line">        &#x2F;&#x2F;判断调用者是否在后</span><br><span class="line">        System.out.println(instant2.isAfter(instant3));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;5.减少</span><br><span class="line">        System.out.println(instant3);</span><br><span class="line">        Instant instant5&#x3D;instant3.minusSeconds(1L);</span><br><span class="line">        System.out.println(instant5);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;增加</span><br><span class="line">        Instant instant6&#x3D;instant3.plusSeconds(1L);</span><br><span class="line">        System.out.println(instant6);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">2023-03-13T00:38:10.652Z</span><br><span class="line">1970-01-01T00:00:00Z</span><br><span class="line">1970-01-01T00:00:01Z</span><br><span class="line">1970-01-01T00:00:02Z</span><br><span class="line">2023-03-13T08:38:10.723+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">1970-01-01T00:00:01Z</span><br><span class="line">1970-01-01T00:00:00Z</span><br><span class="line">1970-01-01T00:00:02Z</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="ZoneDateTime"><a href="#ZoneDateTime" class="headerlink" title="ZoneDateTime"></a>ZoneDateTime</h4><h5 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li><p>static ZoneDateTime now()</p><ul><li>获取当前时间的ZoneDateTime对象</li></ul></li><li><p>static ZoneDateTime ofXxx(long epochMilli)</p><ul><li>获取指定时间的ZoneDateTime对象</li></ul></li><li><p>ZoneDateTime withXxx(时间)</p><ul><li>修改时间系列的方法</li></ul></li><li><p>ZoneDateTime minusXxx(时间)</p><ul><li>减少时间系列的方法</li></ul></li><li><p>ZoneDateTime plusXxx(时间)</p><ul><li>增加时间系列的方法</li></ul></li></ul><h5 id="范例-8"><a href="#范例-8" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.time.Instant;</span><br><span class="line">import java.time.ZoneId;</span><br><span class="line">import java.time.ZonedDateTime;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.获取当前时间的ZoneDateTime对象</span><br><span class="line">        ZonedDateTime now&#x3D;ZonedDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line">        &#x2F;&#x2F;2.获取指定时间的ZoneDateTime对象</span><br><span class="line">        ZonedDateTime time&#x3D;ZonedDateTime.of(2023,10,1,11,12,12,0, ZoneId.of(&quot;Asia&#x2F;Shanghai&quot;));</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        Instant instant&#x3D;Instant.ofEpochMilli(0L);</span><br><span class="line">        ZoneId zoneId&#x3D;ZoneId.of(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line">        ZonedDateTime time1&#x3D;ZonedDateTime.ofInstant(instant,zoneId);</span><br><span class="line">        System.out.println(time1);</span><br><span class="line">        &#x2F;&#x2F;3.修改时间系列的方法</span><br><span class="line">        ZonedDateTime time2&#x3D;time1.withYear(2000);</span><br><span class="line">        System.out.println(time2);</span><br><span class="line">        &#x2F;&#x2F;4.减少时间系列的方法</span><br><span class="line">        ZonedDateTime time3&#x3D;time2.minusYears(1);</span><br><span class="line">        System.out.println(time3);</span><br><span class="line">        &#x2F;&#x2F;5.增加时间系列的方法</span><br><span class="line">        ZonedDateTime time4&#x3D;time3.plusYears(1);</span><br><span class="line">        System.out.println(time4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">2023-03-13T09:02:50.141+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">2023-10-01T11:12:12+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">1970-01-01T08:00+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">2000-01-01T08:00+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">1999-01-01T08:00+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">2000-01-01T08:00+08:00[Asia&#x2F;Shanghai]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h3><p><strong>常用方法</strong>：</p><ul><li><p>static DateTimeFormatter ofPattern(格式)</p><ul><li>获取格式对象</li></ul></li><li><p>String format(时间对象)</p><ul><li>按照指定方式格式化</li></ul></li></ul><p><strong>范例</strong>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.time.Instant;</span><br><span class="line">import java.time.ZoneId;</span><br><span class="line">import java.time.ZonedDateTime;</span><br><span class="line">import java.time.format.DateTimeFormatter;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ZonedDateTime zonedDateTime&#x3D; Instant.now().atZone(ZoneId.of(&quot;Asia&#x2F;Shanghai&quot;));</span><br><span class="line">        DateTimeFormatter dateTimeFormatter&#x3D;DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH-dd-ss EE a&quot;);</span><br><span class="line">        System.out.println(dateTimeFormatter.format(zonedDateTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">2023-03-13 09-13-33 星期一 上午</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Calender-1"><a href="#Calender-1" class="headerlink" title="Calender"></a>Calender</h3><p>日历类</p><ul><li><p>LocalDate：年，月，日</p></li><li><p>LocalTime：时，分。秒</p></li><li><p>LocalDateTime：年，月，日，时，分，秒</p></li></ul><p><strong>常用方法</strong>：  </p><ul><li><p>static XXX now()</p><ul><li>获取当前时间的对象</li></ul></li><li><p>static XXX of()</p><ul><li>获取指定时间的对象</li></ul></li><li><p>get开头的方法</p><ul><li>若是LocalDate，获取日历中的年，月，日</li><li>若是LocalTime，获取日历中的时，分，秒</li><li>若是LocalDateTime，获取日历中的年，月，日，时，分，秒</li></ul></li><li><p>isBefore,isAfter</p><ul><li>比较两个LocalDate</li></ul></li><li><p>with开头的</p><ul><li>修改时间系列的方法</li></ul></li><li><p>minus开头的</p><ul><li>减少时间系列的方法</li></ul></li><li><p>plus开头的</p><ul><li>增加时间写的方法</li></ul></li></ul><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul><li><p><strong>Duration</strong>：用于计算两个”时间”间隔，秒，微秒</p></li><li><p><strong>Period</strong>：用于计算两个“日期”间隔，年，月，日</p></li><li><p><strong>ChronoUnit</strong>:用于计算两个“日期”间隔，所有单位</p></li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p><strong>包装类</strong>基本数据类型对应的对象  </p><p><strong>自动装箱</strong>：把基本数据类型自动转换成对应的包装类  </p><p><strong>自动拆箱</strong>：把包装类自动变成对象的基本数据类型  </p><p><strong>对应关系</strong>：</p><ul><li><p>byte-Byte</p></li><li><p>short-Short</p></li><li><p>char-Character</p></li><li><p>int-Integer</p></li><li><p>long-Long</p></li><li><p>float-Float</p></li><li><p>double-Double</p></li><li><p>boolean-Boolean</p></li></ul><p><strong>使用方法</strong>：  </p><p>不需要new和调用方法，直接赋值即可。  </p><p><strong>例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Integer i1&#x3D;10;</span><br><span class="line">        int i&#x3D;i1;</span><br><span class="line">        Integer i2&#x3D;i;</span><br><span class="line">        Integer i3&#x3D;i1+i2;</span><br><span class="line">        System.out.println(&quot;i1&#x3D;&quot;+i1);</span><br><span class="line">        System.out.println(&quot;i2&#x3D;&quot;+i2);</span><br><span class="line">        System.out.println(&quot;i3&#x3D;&quot;+i3);</span><br><span class="line">        System.out.println(&quot;i&#x3D;&quot;+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">i1&#x3D;10</span><br><span class="line">i2&#x3D;10</span><br><span class="line">i3&#x3D;20</span><br><span class="line">i&#x3D;10</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="Integer成员方法"><a href="#Integer成员方法" class="headerlink" title="Integer成员方法"></a>Integer成员方法</h4><ul><li><p>public static <strong>String</strong> toBinaryString(int i)</p><ul><li> 得到二进制 </li></ul></li><li><p>public static <strong>String</strong> toOctalString(int i)</p><ul><li>得到八进制</li></ul></li><li><p>public static <strong>String</strong> toHexString(int i)</p><ul><li>得到十六进制</li></ul></li><li><p>public static int parseInt(String s)</p><ul><li>将字符串类型的整数转成int类型的整数</li></ul></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(Integer.toBinaryString(100));</span><br><span class="line">        System.out.println(Integer.toOctalString(100));</span><br><span class="line">        System.out.println(Integer.toHexString(100));</span><br><span class="line">        System.out.println(Integer.parseInt(&quot;123&quot;)+123);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1100100</span><br><span class="line">144</span><br><span class="line">64</span><br><span class="line">246</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>在类型转换的过程中，括号里的数字只能是数字，否则就会报错。</li><li>8中包装类中，除了Character外都有对应的包<strong>装类.parseXxx</strong>的方法进行类型转换</li><li>在Scanner中，若我们使用next,nextInt,nextDouble在接收数据时，遇到空格，回车，制表符会停止接收，但若使用nextLine，则遇到回车才停止，所以以后尽量统一使用nextLine,用完之后再用<strong>包装类.parseXxx</strong>转换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面对对象进阶- 下（九）</title>
      <link href="2022/09/28/J9/"/>
      <url>2022/09/28/J9/</url>
      
        <content type="html"><![CDATA[<h1 id="面对对象进阶-下（九）"><a href="#面对对象进阶-下（九）" class="headerlink" title="面对对象进阶- 下（九）"></a>面对对象进阶- 下（九）</h1><h2 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h2><p><strong>抽象方法</strong>：将共性的行为（方法）抽取到父类之后，由于每个子类的执行的内容不一样，所以在父类中不能确定具体的方法体。该方法就可以定义为抽象方法。<br><strong>抽象类</strong>：若一个类中存在抽象方法，那么该类就必须声明为抽象类。  </p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><p><strong>抽象方法的定义格式</strong>：<br>public abstract 返回值类型 方法名(参数列表);<br><strong>抽象类的定义格式</strong>：<br>public abstract class 类名{}</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>抽象类不能实例化（不能创造对象）</li><li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类</li><li>可以有构造方法</li><li>抽象类的子类<ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求</span><br><span class="line">青蛙frog    属性：名字，年龄    行为：吃虫子，喝水</span><br><span class="line">狗dog       属性：名字，年龄    行为：吃骨头，喝水</span><br><span class="line">山羊sheep   属性：名字，年龄    行为：吃草，喝水</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Animal.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public abstract class Animal&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Animal()&#123;&#125;</span><br><span class="line">    public Animal(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">    public void drink()&#123;</span><br><span class="line">        System.out.println(&quot;喝水&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Frog.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Frog extends Animal &#123;</span><br><span class="line">    public Frog()&#123;&#125;</span><br><span class="line">    public Frog(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃虫子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Dog.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line">    public Dog()&#123;&#125;</span><br><span class="line">    public Dog(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Sheep.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Sheep extends Animal&#123;</span><br><span class="line">    public Sheep()&#123;&#125;</span><br><span class="line">    public Sheep(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃草&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog g &#x3D; new Dog(&quot;傻狗&quot;, 18);</span><br><span class="line">        Frog f &#x3D; new Frog(&quot;癞蛤蟆&quot;, 20);</span><br><span class="line">        Sheep s &#x3D; new Sheep(&quot;喜洋洋&quot;, 3);</span><br><span class="line">        g.eat();</span><br><span class="line">        g.drink();</span><br><span class="line">        f.eat();</span><br><span class="line">        f.drink();</span><br><span class="line">        s.eat();</span><br><span class="line">        s.drink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">吃骨头</span><br><span class="line">喝水</span><br><span class="line">吃虫子</span><br><span class="line">喝水</span><br><span class="line">吃草</span><br><span class="line">喝水</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>接口</strong>就是一种规则，是对行为的抽象。</p><h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><ul><li>接口用关键字interface定义:  <ul><li>public interface 接口名{}  </li></ul></li><li>接口不能实例化。  </li><li>接口与类之间是实现关系，通过<strong>implements</strong>关键字表示:  <ul><li>public class 类名 implements 接口名{}  </li></ul></li><li>接口的子类（实现类）：<ul><li>要么重写接口类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>接口与类可以单实现，也可以多实现<ul><li>public class 类名 implements 接口名1,接口名2…{}</li></ul></li><li>实现类可以在继承一个类的同时实现多个接口<ul><li>public class 类名 extends 父类名 implements 接口名1,接口名2…{}</li></ul></li></ol><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求</span><br><span class="line">青蛙    属性：名字，年龄    行为：吃虫子，蛙泳</span><br><span class="line">狗      属性：名字，年龄    行为：吃骨头，狗刨</span><br><span class="line">兔子    属性：名字，年龄    行为：吃胡萝卜</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">&#x2F;&#x2F;Animal.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public abstract class Animal&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Animal()&#123;&#125;</span><br><span class="line">    public Animal(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">&#x2F;&#x2F;Regularity</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public interface Regularity&#123;</span><br><span class="line">    public abstract void swim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">&#x2F;&#x2F;Frog.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Frog extends Animal implements Regularity &#123;</span><br><span class="line">    public Frog()&#123;&#125;</span><br><span class="line">    public Frog(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃虫子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void swim()&#123;</span><br><span class="line">        System.out.println(&quot;蛙泳&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Dog.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Dog extends Animal implements Regularity&#123;</span><br><span class="line">    public Dog()&#123;&#125;</span><br><span class="line">    public Dog(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void swim()&#123;</span><br><span class="line">        System.out.println(&quot;狗刨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Rabbit.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Rabbit extends Animal&#123;</span><br><span class="line">    public Rabbit()&#123;&#125;</span><br><span class="line">    public Rabbit(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃胡萝卜&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">package com.ljsblog.domain2;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Frog f&#x3D;new Frog();</span><br><span class="line">        f.eat();</span><br><span class="line">        f.swim();</span><br><span class="line">        Dog d&#x3D;new Dog();</span><br><span class="line">        d.eat();</span><br><span class="line">        d.swim();</span><br><span class="line">        Rabbit r&#x3D;new Rabbit();</span><br><span class="line">        r.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">吃虫子</span><br><span class="line">蛙泳</span><br><span class="line">吃骨头</span><br><span class="line">狗刨</span><br><span class="line">吃胡萝卜</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="接口中成员的特点"><a href="#接口中成员的特点" class="headerlink" title="接口中成员的特点"></a>接口中成员的特点</h3><ul><li>成员变量<ul><li>只能是常量，默认修饰符：public static final</li></ul></li><li>构造方法-无</li><li>成员方法<ul><li>只能是抽象方法，默认修饰符：public abstract</li></ul></li></ul><h3 id="接口与类的关系"><a href="#接口与类的关系" class="headerlink" title="接口与类的关系"></a>接口与类的关系</h3><ul><li>类与类的关系<ul><li>继承关系。只能单继承，不能多继承，但可多层继承</li></ul></li><li>类与接口的关系<ul><li>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li><li>若多个接口中有重名的方法，只需重写一次</li></ul></li><li>接口与接口的关系<ul><li>继承关系，可以单继承，也可以多继承</li><li>若实现最下方的子接口，则需要重写所有的抽象方法</li></ul></li></ul><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需求</span><br><span class="line">乒乓球运动员：  姓名，年龄，学打乒乓球，说英语</span><br><span class="line">篮球运动员：    姓名，年龄，学打篮球</span><br><span class="line">乒乓球教练：    姓名，年龄，教打乒乓球，说英语</span><br><span class="line">篮球教练：      姓名，年龄，教打篮球</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Person.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        PingAthlete pa&#x3D;new PingAthlete(&quot;张三&quot;,16);</span><br><span class="line">        pa.study();</span><br><span class="line">        pa.speakEnglish();</span><br><span class="line">        BasketballAthele ba&#x3D;new BasketballAthele(&quot;李四&quot;,16);</span><br><span class="line">        ba.study();</span><br><span class="line">        PingTeacher pt&#x3D;new PingTeacher(&quot;王五一&quot;,26);</span><br><span class="line">        pt.teach();</span><br><span class="line">        pt.speakEnglish();</span><br><span class="line">        BasketBallTeacher bt&#x3D;new BasketBallTeacher(&quot;王五二&quot;,26);</span><br><span class="line">        bt.teach();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Athlete.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public abstract class Athlete extends Person&#123;</span><br><span class="line">    public Athlete()&#123;&#125;</span><br><span class="line">    public Athlete(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void study();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Teacher.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public abstract class Teacher extends Person&#123;</span><br><span class="line">    public Teacher()&#123;&#125;</span><br><span class="line">    public Teacher(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract void teach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//Speak.java<br>package com.ljsblog.domain3;<br>public interface Speak{<br>    public abstract void speakEnglish();<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;BasketballAthele.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class BasketballAthele extends Athlete&#123;</span><br><span class="line">    public BasketballAthele()&#123;&#125;</span><br><span class="line">    public BasketballAthele(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(&quot;年龄为&quot;+getAge()+&quot;的篮球运动员&quot;+getName()+&quot;学打篮球&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;BasketBallTeacher.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class BasketBallTeacher extends Teacher&#123;</span><br><span class="line">    public BasketBallTeacher()&#123;&#125;</span><br><span class="line">    public BasketBallTeacher(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void teach()&#123;</span><br><span class="line">        System.out.println(&quot;年龄为&quot;+getAge()+&quot;的篮球教练&quot;+getName()+&quot;教打篮球&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;PingAthlete.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class PingAthlete extends Athlete implements Speak&#123;</span><br><span class="line">    public PingAthlete()&#123;&#125;</span><br><span class="line">    public PingAthlete(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(&quot;年龄为&quot;+getAge()+&quot;的乒乓球运动员&quot;+getName()+&quot;学打乒乓球&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void speakEnglish()&#123;</span><br><span class="line">        System.out.println(&quot;乒乓球运动员在说英语&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;PingTeacher.java</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class PingTeacher extends Teacher implements Speak&#123;</span><br><span class="line">    public PingTeacher()&#123;&#125;</span><br><span class="line">    public PingTeacher(String name,int age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void teach()&#123;</span><br><span class="line">        System.out.println(&quot;年龄为&quot;+getAge()+&quot;的乒乓球教练&quot;+getName()+&quot;教打乒乓球&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void speakEnglish()&#123;</span><br><span class="line">        System.out.println(&quot;乒乓球教练在说英语&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">package com.ljsblog.domain3;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        PingAthlete pa&#x3D;new PingAthlete(&quot;张三&quot;,16);</span><br><span class="line">        pa.study();</span><br><span class="line">        pa.speakEnglish();</span><br><span class="line">        BasketballAthele ba&#x3D;new BasketballAthele(&quot;李四&quot;,16);</span><br><span class="line">        ba.study();</span><br><span class="line">        PingTeacher pt&#x3D;new PingTeacher(&quot;王五一&quot;,26);</span><br><span class="line">        pt.teach();</span><br><span class="line">        pt.speakEnglish();</span><br><span class="line">        BasketBallTeacher bt&#x3D;new BasketBallTeacher(&quot;王五二&quot;,26);</span><br><span class="line">        bt.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">年龄为16的乒乓球运动员张三学打乒乓球</span><br><span class="line">乒乓球运动员在说英语</span><br><span class="line">年龄为16的篮球运动员李四学打篮球</span><br><span class="line">年龄为26的乒乓球教练王五一教打乒乓球</span><br><span class="line">乒乓球教练在说英语</span><br><span class="line">年龄为26的篮球教练王五二教打篮球</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="JDK8后接口新增方法"><a href="#JDK8后接口新增方法" class="headerlink" title="JDK8后接口新增方法"></a>JDK8后接口新增方法</h3><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><p>允许在接口中定义默认方法，需使用关键字default修饰，以此解决接口升级的问题。<br><strong>接口中默认方法定义格式</strong>：<br>public default 返回值类型 方法名(参数列表){}<br><strong>注意事项</strong>：</p><ul><li>默认方法不是抽象方法，不强制被重写；若要重写，重写时去掉default关键字。</li><li>public可省，default不可省</li><li>若实现多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写。</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">public interface Inter&#123;</span><br><span class="line">    public abstract void show1();</span><br><span class="line">    public default void show2()&#123;</span><br><span class="line">        System.out.println(&quot;默认方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class A implements Inter&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void show1()&#123;</span><br><span class="line">        System.out.println(&quot;抽象方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        A a&#x3D;new A();</span><br><span class="line">        a.show1();</span><br><span class="line">        a.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">抽象方法</span><br><span class="line">默认方法</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>允许在接口中定义静态方法，需要用static修饰。<br><strong>定义格式</strong>：<br>public static 返回值类型 方法名(参数列表){}<br><strong>注意事项</strong>：</p><ul><li>静态方法只能用接口名调用，不能通过实现类名或者对象名调用</li><li>public可省，static不能省</li><li>静态方法不能被重写</li></ul><p><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">public interface Inter&#123;</span><br><span class="line">    public static void show()&#123;</span><br><span class="line">        System.out.println(&quot;静态方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Inter.show();&#x2F;&#x2F;静态方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>接口代表规则，是行为的抽象，想让哪个类拥有一个行为，就让这个类实现对应的接口就可以了。</li><li>当一个方法参数是接口时，可传递接口所有的实现类的对象，这种方式称为接口多态。</li></ol><h3 id="适配器设计模式"><a href="#适配器设计模式" class="headerlink" title="适配器设计模式"></a>适配器设计模式</h3><p>设计模式就是各种套路，当一个接口中抽象方法过多，但只要使用其中一部分时，就可以使用适配器使用模式。<br><strong>书写步骤</strong>：</p><ul><li>编写中间类XXXAdapter，实现对应的接口</li><li>对接口中的抽象方法进行空实现，即方法体为空</li><li>让真正的实现类继承中间类，并重写需要用的方法</li><li>为避免其他类创建适配器类的对象，适配器类用abstract修饰。</li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">public interface Inter&#123;</span><br><span class="line">    public abstract void show1();</span><br><span class="line">    public abstract void show2();</span><br><span class="line">    public abstract void show3();</span><br><span class="line">    public abstract void show4();</span><br><span class="line">    public abstract void show5();</span><br><span class="line">    public abstract void show6();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;适配器类</span><br><span class="line">public class InterAdapter implements Inter&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show1() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show2() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show3() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show4() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show5() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show6() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现类</span><br><span class="line">public class Im extends InterAdapter&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void show3()&#123;</span><br><span class="line">        System.out.println(&quot;方法3&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Im i&#x3D;new Im();</span><br><span class="line">        i.show3();&#x2F;&#x2F;方法3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><strong>类的五大成员</strong>：</p><ol><li>属性</li><li>方法</li><li>构造方法</li><li>代码块</li><li>内部类</li></ol><p><strong>内部类定义</strong>：在一个类中，再定义一个类，例如，在A类内部定义B类，B类称为内部类。<br>内部类表示的事物是外部类的一部分，内部类单独出现没有任何意义。<br><strong>访问特点</strong>：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><p><strong>应用场景</strong>：B类表示的事物是A类的一步，且B类存在没有任何意义。例如：ArrayList迭代器，汽车的发动机，人的心脏。<br><strong>分类</strong>：</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>写在成员位置，即类中方法外，属于外部类的成员。<br>成员内部类可以被一些修饰符修饰，比如：private，默认，protected，public,static等。<br>在成员内部类中，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。<br><strong>获取内部类对象方式</strong>：</p><ol><li>在外部类中编写方法，对外提供内部类的对象。（private）</li><li>直接创建，格式：外部类名.内部类名 对象名=外部类对象.内部类对象;</li></ol><p><strong>范例</strong>：<br>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Outer&#123;</span><br><span class="line">    public Inner getInner()&#123;</span><br><span class="line">        return new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">    private class Inner&#123;</span><br><span class="line">        public void show()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Outer o&#x3D;new Outer();</span><br><span class="line">        System.out.println(o.getInner());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Outer&#123;</span><br><span class="line">    public Inner getInner()&#123;</span><br><span class="line">        return new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">    public class Inner&#123;</span><br><span class="line">        public void show()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Outer.Inner oi&#x3D;new Outer().new Inner();</span><br><span class="line">        System.out.println(oi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当外部类成员变量和内部类成员变量重名时，内部类访问外部类成员变量：<br>System.out.println(Outer.this.变量名);<br><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Outer&#123;</span><br><span class="line">    private int a&#x3D;1;</span><br><span class="line">    class Inner&#123;</span><br><span class="line">        private int a&#x3D;2;</span><br><span class="line">        public void show()&#123;</span><br><span class="line">            int a&#x3D;3;</span><br><span class="line">            System.out.println(Outer.this.a);&#x2F;&#x2F;1</span><br><span class="line">            System.out.println(this.a);&#x2F;&#x2F;2</span><br><span class="line">            System.out.println(a);&#x2F;&#x2F;3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Outer.Inner oi&#x3D;new Outer().new Inner();</span><br><span class="line">        oi.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类只能访问外部类中的静态变量和静态方法，若要访问非静态的需要创建对象。<br><strong>创建静态内部类对象的格式</strong>：<br>外部类名.内部类名 对象名=new 外部类名.内部类名();<br><strong>调用非静态方法的格式</strong>：先创建对象，用对象调用。<br><strong>调用静态方法的格式</strong>：<br>外部类名.内部类名.方法名();<br><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Outer&#123;</span><br><span class="line">    int a&#x3D;10;</span><br><span class="line">    static int b&#x3D;20;</span><br><span class="line">    static class Inner&#123;</span><br><span class="line">        public static void show1()&#123;</span><br><span class="line">            System.out.println(&quot;静态方法&quot;);</span><br><span class="line">            Outer o&#x3D;new Outer();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">        public void show2()&#123;</span><br><span class="line">            System.out.println(&quot;非静态方法&quot;);</span><br><span class="line">            Outer o&#x3D;new Outer();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain5;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Outer.Inner oi&#x3D;new Outer.Inner();</span><br><span class="line">        Outer.Inner.show1();</span><br><span class="line">        oi.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">静态方法</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">非静态方法</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ol><li>将内部类定义在方法中就叫局部内部类，类似于方法中的局部变量</li><li>外界是无法直接使用，需要在方法内部创建对象并使用</li><li>该类可以直接访问外部类的成员，也可方法方法内部的局部变量</li><li>因为局部内部类没啥用，所以就不举例了。</li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p><strong>匿名内部类</strong>本质上就是隐藏了名字的内部类，并非真的没有名字。<br><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new 类名&#x2F;接口名()&#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;其中包含了继承或实现，方法重写，创建对象，整体就是一个类的子类或者接口的实现类对象</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>：当方法的参数是接口或类时，以接口为例，可传递该接口的实现类对象，若实现类仅使用一次，可用匿名内部类简化代码。<br><strong>范例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">public abstract interface Inter&#123;</span><br><span class="line">    public abstract void speakEnglish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">public abstract class Animal&#123;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Inter i&#x3D;new Inter()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void speakEnglish()&#123;</span><br><span class="line">                System.out.println(&quot;讲英语&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        i.speakEnglish();</span><br><span class="line">        Animal a&#x3D;new Animal()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void eat()&#123;</span><br><span class="line">                System.out.println(&quot;狗吃骨头&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">讲英语</span><br><span class="line">狗吃骨头</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面对对象进阶-上（八）</title>
      <link href="2022/09/21/J8/"/>
      <url>2022/09/21/J8/</url>
      
        <content type="html"><![CDATA[<h1 id="面对对象进阶-上（八）"><a href="#面对对象进阶-上（八）" class="headerlink" title="面对对象进阶-上（八）"></a>面对对象进阶-上（八）</h1><h2 id="staic"><a href="#staic" class="headerlink" title="staic"></a>staic</h2><p>static表示静态，是JAVA中的一个修饰符，可修饰成员方法，成员变量</p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>被static修饰的成员变量，叫做静态变量。<br><strong>特点</strong>：</p><ul><li>被该类所有对象共享</li><li>不属于对象，属于类</li><li>随着类的加载而加载，优先于对象存在</li></ul><p><strong>调用方式</strong>：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.class</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public static String teacherName;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;学生姓名:&quot;+name+&quot; 学生年龄:&quot;+age+&quot; 老师姓名:&quot;+teacherName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.class</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;类名调用</span><br><span class="line">        Student.teacherName&#x3D;&quot;王五&quot;;</span><br><span class="line">        Student student1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        &#x2F;&#x2F;也可以对象名调用</span><br><span class="line">        &#x2F;&#x2F;student1.teacherName&#x3D;&quot;王五&quot;;</span><br><span class="line">        student1.show();</span><br><span class="line">        Student student2&#x3D;new Student();</span><br><span class="line">        student2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">学生姓名:张三 学生年龄:18 老师姓名:王五</span><br><span class="line">学生姓名:null 学生年龄:0 老师姓名:王五</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>被static修饰的成员方法，叫做静态方法。<br><strong>特点</strong>：</p><ul><li>多用在测试类或工具类中</li><li>Javabean类中很少用</li></ul><p><strong>补充</strong>：工具类是帮我们做一些事情的，但不描述任何事物的类</p><ol><li>工具类类名需见名知意</li><li>私有化构造方法。</li><li>方法定义为静态</li></ol><p><strong>调用方式</strong>：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><p>定义一个集合，存储三个学生对象。<br>学生类属性：name,age。<br>定义一个工具类，获取集合中最大学生的年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;工具类</span><br><span class="line">&#x2F;&#x2F;StudentMaxAge.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class StudentMaxAge&#123;</span><br><span class="line">    private StudentMaxAge()&#123;&#125;</span><br><span class="line">    public static int age(ArrayList&lt;Student&gt; list)&#123;</span><br><span class="line">        int max&#x3D;list.get(0).getAge();</span><br><span class="line">        for(int i&#x3D;1;i&lt;list.size();i++)&#123;</span><br><span class="line">            int n&#x3D;list.get(i).getAge();</span><br><span class="line">            if(n&gt;max)&#123;</span><br><span class="line">                max&#x3D;n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student1&#x3D;new Student(&quot;张三&quot;,18);</span><br><span class="line">        Student student2&#x3D;new Student(&quot;李四&quot;,19);</span><br><span class="line">        Student student3&#x3D;new Student(&quot;王五&quot;,17);</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(student1);</span><br><span class="line">        list.add(student2);</span><br><span class="line">        list.add(student3);</span><br><span class="line">        int max&#x3D;StudentMaxAge.age(list);</span><br><span class="line">        System.out.println(max);&#x2F;&#x2F;19</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问静态变量或静态方法，也可以访问非静态的成员变量和非静态的成员方法</li><li>静态方法中没有this关键字</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>定义</strong>：继承是面对对象三大特征之一，可以让类与类间产生子父关系。<br><strong>好处</strong>：可以把多个子类重复的代码抽取到父类中，子类可直接使用，减少代码冗余，提高代码的复用性。<br><strong>格式</strong>：<br>public class 子类 extends 父类{}<br><strong>继承后子类的特点</strong>:<br>子类可得到父类的属性和行为，子类可使用。<br>子类可在父类的基础上新增其他功能，子类更强大。  </p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>JAVA只能单继承：一个类只能继承一个直接父类</li><li>JAVA不支持多继承：但支持多层继承</li><li>JAVA所有类都直接或间接继承于Object类</li></ol><h3 id="子类继承父类的内容"><a href="#子类继承父类的内容" class="headerlink" title="子类继承父类的内容"></a>子类继承父类的内容</h3><ul><li>构造方法：无论是否私有，都不能继承</li><li>成员变量：无论是否私有，都能继承<ul><li>注：private成员变量虽然能继承，但不可直接使用</li></ul></li><li>成员方法：若虚方法表存有该方法，则可以继承，否则不能继承<ul><li>虚方法表存储的方法：非private，非static，非final</li></ul></li></ul><h3 id="继承中成员变量的访问特点"><a href="#继承中成员变量的访问特点" class="headerlink" title="继承中成员变量的访问特点"></a>继承中成员变量的访问特点</h3><p>遵循<strong>就近原则</strong>，先在局部位置找，本类成员位置找，父类成员位置找，逐级往上。  </p><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">public class Father&#123;</span><br><span class="line">    String name&#x3D;&quot;Father&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">public class Son extends Father&#123;</span><br><span class="line">    String name&#x3D;&quot;Son&quot;;</span><br><span class="line">    public void printName()&#123;</span><br><span class="line">        String name&#x3D;&quot;printName&quot;;</span><br><span class="line">        System.out.println(name);&#x2F;&#x2F;从局部位置开始寻找，打印结果为printName</span><br><span class="line">        System.out.println(this.name);&#x2F;&#x2F;从本类成员位置开始寻找，打印结果为Son</span><br><span class="line">        System.out.println(super.name);&#x2F;&#x2F;从父类成员位置开始寻找，打印结果为Father</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Son son&#x3D;new Son();</span><br><span class="line">        son.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">printName</span><br><span class="line">Son</span><br><span class="line">Father</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>当父类方法不能满足子类现在的需求时，需进行方法重写。<br><strong>@Override重写注解</strong>:@override是放在重写后的方法上，校验子类重写时语法是否正确，建议重写方法都加@Override注解。<br><strong>方法重写的本质</strong>：覆盖虚方法表中的方法。<br><strong>方法重写的注意事项</strong>：</p><ol><li>重写方法的名称，形参列表需与父类一致</li><li>子类重写父类方法时，访问权限子类必须大于等于父类</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类</li><li>建议：重写的方法尽量和父类一致</li><li>只有被添加到虚方法表中的方法才能被重写</li></ol><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><p>有三种狗：哈士奇，沙皮狗，中华田园犬<br>不考虑属性，只考虑行为。<br>请按照继承的思想特点惊醒继承体系的设计。<br>行为：<br>哈士奇：吃饭（吃狗粮），喝水，看家，拆家<br>沙皮狗：吃饭（吃狗粮，吃骨头），喝水，看家<br>中华田园犬：吃饭（吃剩饭），喝水，看家  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">public class Dog &#123;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃狗粮&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void drink()&#123;</span><br><span class="line">        System.out.println(&quot;喝水&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void lookHome()&#123;</span><br><span class="line">        System.out.println(&quot;看家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">&#x2F;&#x2F;ChineseDog.java</span><br><span class="line">public class ChineseDog extends Dog &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃剩饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Husky.java</span><br><span class="line">public class Husky extends Dog &#123;</span><br><span class="line">    public void DestroyHome()&#123;</span><br><span class="line">        System.out.println(&quot;拆家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Sharpei.java</span><br><span class="line">public class Sharpei extends Dog&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        super.eat();</span><br><span class="line">        System.out.println(&quot;吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Husky husky&#x3D;new Husky();</span><br><span class="line">        husky.eat();</span><br><span class="line">        husky.drink();</span><br><span class="line">        husky.lookHome();</span><br><span class="line">        husky.DestroyHome();</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        Sharpei sharpei&#x3D;new Sharpei();</span><br><span class="line">        sharpei.eat();</span><br><span class="line">        sharpei.drink();</span><br><span class="line">        sharpei.lookHome();</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        ChineseDog chineseDog&#x3D;new ChineseDog();</span><br><span class="line">        chineseDog.eat();</span><br><span class="line">        chineseDog.drink();</span><br><span class="line">        chineseDog.lookHome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">吃狗粮</span><br><span class="line">喝水</span><br><span class="line">看家</span><br><span class="line">拆家</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">吃狗粮</span><br><span class="line">吃骨头</span><br><span class="line">喝水</span><br><span class="line">看家</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">吃剩饭</span><br><span class="line">喝水</span><br><span class="line">看家</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h3><ul><li>子类不能继承父类的构造方法，但可通过super调用</li><li>子类构造方法第一行，有个默认的super()</li><li>默认先访问父类中无参的构造方法，再执行自己</li><li>若想访问父类有参构造，需手动书写</li></ul><h3 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h3><p><strong>this</strong>：理解为一个变量，表当前方法调用者地址值。<br><strong>super</strong>：代表父类存储空间。<br><strong>对比</strong>:</p><ol><li>访问成员变量<ul><li>this.成员变量，访问本类成员变量</li><li>super.成员变量，访问父类成员变量</li></ul></li><li>访问成员方法<ul><li>this.成员方法(…)，访问本类成员方法</li><li>super.成员方法(…)，访问父类成员方法</li></ul></li><li>访问构造方法<ul><li>this(…)，访问本类其它构造方法</li><li>super(…)，访问父类构造方法</li></ul></li></ol><h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><p>带有继承结构的标准Javabean类。  </p><ol><li>经理<ul><li>成员变量：工号，姓名，工资，管理奖金</li><li>成员方法：工作（管理其他人），吃饭（吃米饭）</li></ul></li><li>厨师<ul><li>成员变量：工号，姓名，工资</li><li>成员方法：工作（炒菜），吃饭（吃米饭）</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">public class Employee&#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int salary;</span><br><span class="line">    public Employee()&#123;&#125;</span><br><span class="line">    public Employee(String id,String name,int salary)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.salary&#x3D;salary;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(String id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setSalary(int salary)&#123;</span><br><span class="line">        this.salary&#x3D;salary;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getSalary()&#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;工作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃米饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;经理</span><br><span class="line">public class Manager extends Employee&#123;</span><br><span class="line">    private double manageSalary;</span><br><span class="line">    public Manager()&#123;&#125;</span><br><span class="line">    public Manager(String id,String name,int salary,double manageSalary)&#123;</span><br><span class="line">        super(id,name,salary);</span><br><span class="line">        this.manageSalary&#x3D;manageSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setManageSalary(double manageSalary)&#123;</span><br><span class="line">        this.manageSalary&#x3D;manageSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getManageSalary()&#123;</span><br><span class="line">        return manageSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;管理其他人&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;厨师</span><br><span class="line">public class Cooker extends Employee&#123;</span><br><span class="line">    public Cooker()&#123;&#125;</span><br><span class="line">    public Cooker(String id,String name,int salary)&#123;</span><br><span class="line">        super(id,name,salary);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;炒菜&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Manager manager&#x3D;new Manager(&quot;manager001&quot;,&quot;张三&quot;,3000,1500.33);</span><br><span class="line">        System.out.println(&quot;经理工号：&quot;+manager.getId()+&quot; 姓名：&quot;+manager.getName()+</span><br><span class="line">                &quot; 工资：&quot;+manager.getSalary()+&quot; 管理奖金：&quot;+manager.getManageSalary());</span><br><span class="line">        manager.work();</span><br><span class="line">        manager.eat();</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        Cooker cooker&#x3D;new Cooker();</span><br><span class="line">        cooker.setId(&quot;cooker001&quot;);</span><br><span class="line">        cooker.setName(&quot;李四&quot;);</span><br><span class="line">        cooker.setSalary(2500);</span><br><span class="line">        System.out.println(&quot;厨师工号：&quot;+cooker.getId()+&quot; 姓名：&quot;+cooker.getName()+&quot; 工资：&quot;+manager.getSalary());</span><br><span class="line">        cooker.work();</span><br><span class="line">        cooker.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">经理工号：manager001 姓名：张三 工资：3000 管理奖金：1500.33</span><br><span class="line">管理其他人</span><br><span class="line">吃米饭</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">厨师工号：cooker001 姓名：李四 工资：3000</span><br><span class="line">炒菜</span><br><span class="line">吃米饭</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>定义</strong>：同类型的对象，表现出的不同形态。<br><strong>表现形式</strong>：<br>父类类型 对象名称=子类对象;<br><strong>前提</strong>：</p><ul><li>有继承关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul><p><strong>好处</strong>：使用父类型作为参数，可以接受所有子类对象，体现多态的扩展性和便利。  </p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>调用成员变量：编译看左边，运行也看左边<ul><li>编译看左边：javac编译代码时，会看左边的父类是否有这个变量，若有，编译成功，若无，编译失败</li><li>运行也看左边：java运行代码时，实际获取的就是左边父类中成员变量的值</li><li>在子类对象中，会把父类的成员变量也继承下来。</li></ul></li><li>调用成员方法：编译看左边，运行看右边<ul><li>编译看左边，javac编译代码时，会看左边的父类是否有这个方法，若有，编译成功，若无，编译失败</li><li>运行看右边：java运行代码时，实际运行的是子类中的方法。</li><li>若子类对方法进行重写，则虚方法表中是会把父类的方法进行覆盖的。</li></ul></li></ul><h3 id="优势与劣势"><a href="#优势与劣势" class="headerlink" title="优势与劣势"></a>优势与劣势</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>多态形式下，右边对象可实现解耦合，便于扩展和维护。<br>定义方法时，使父类型作为参数，可接收所有子类对象，体现多态的扩展性和便利。  </p><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><p>不能调用子类的特有功能，当调用方法时，编译看左边，运行看右边，编译时会先检查左边的父类是否有这个方法，若无则直接报错。<br><strong>解决方法</strong>：</p><ul><li>可以转换成真正的子类类型，从而调用子类独有功能，转换方式有：<ul><li>自动类型转换，例如：Person p=new Student();</li><li>强制类型转换：例如：Student s=(Student)p;</li></ul></li><li>转换类型与真实对象不一致会报错</li><li>转换时用instanceof关键字进行判断<ul><li><strong>语法</strong>：boolean result=object instanceof class</li><li><strong>说明</strong>：若object是class一个实例，则返回true，若不是或者object是null，则返回false</li></ul></li></ul><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.class</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person p&#x3D;new Student();</span><br><span class="line">        if(p instanceof Teacher)&#123;</span><br><span class="line">            Teacher t&#x3D;(Teacher)p;</span><br><span class="line">            t.work();</span><br><span class="line">        &#125;else if(p instanceof Student)&#123;</span><br><span class="line">            Student s&#x3D;(Student)p;</span><br><span class="line">            s.work();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;没有这个类型&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">&#x2F;&#x2F;Person.class</span><br><span class="line">public class Person&#123;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">&#x2F;&#x2F;Teacher.class</span><br><span class="line">public class Teacher extends Person&#123;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;教学&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Student.class</span><br><span class="line">public class Student extends Person&#123;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;听课&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">根据需求完成代码:</span><br><span class="line">1.定义狗类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)(something表示吃的东西)</span><br><span class="line">看家lookHome方法(无参数)</span><br><span class="line"></span><br><span class="line">2.定义猫类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)方法(something表示吃的东西)</span><br><span class="line">逮老鼠catchMouse方法(无参数)</span><br><span class="line"></span><br><span class="line">3.定义Person类&#x2F;&#x2F;饲养员</span><br><span class="line">属性：</span><br><span class="line">姓名，年龄 </span><br><span class="line">行为：</span><br><span class="line">keepPet(Dog dog,String something)方法</span><br><span class="line">功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">行为：</span><br><span class="line">keepPet(Cat cat,String something)方法</span><br><span class="line">功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">生成空参有参构造，set和get方法  </span><br><span class="line">4.定义测试类(完成以下打印效果):</span><br><span class="line">keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">年龄为30岁的老王养了一只黑颜色的2岁的狗</span><br><span class="line">2岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">年龄为25岁的老李养了一只灰颜色的3岁的猫</span><br><span class="line">3岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line">5.思考：</span><br><span class="line">1.Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line">2.Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父类</span><br><span class="line">&#x2F;&#x2F;Animal.class</span><br><span class="line">public class Animal&#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String color;</span><br><span class="line">    public Animal()&#123;&#125;;</span><br><span class="line">    public Animal(int age,String color)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setColor(String color)&#123;</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getColor()&#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line">    public void eat(String something)&#123;</span><br><span class="line">        System.out.println(&quot;吃&quot;+something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Person.class</span><br><span class="line">public class Person&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Person()&#123;&#125;</span><br><span class="line">    public Person(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void keepPet(Animal animal, String something)&#123;</span><br><span class="line">        if(animal instanceof Dog)&#123;</span><br><span class="line">            Dog d&#x3D;(Dog)animal;</span><br><span class="line">            System.out.println(&quot;年龄为&quot;+age+&quot;的&quot;+name+&quot;养了一只&quot;+d.getColor()+&quot;颜色的&quot;+d.getAge()+&quot;的狗&quot;);</span><br><span class="line">            d.eat(something);</span><br><span class="line">            d.lookHome();</span><br><span class="line">        &#125;else if(animal instanceof Cat)&#123;</span><br><span class="line">            Cat c&#x3D;(Cat)animal;</span><br><span class="line">            System.out.println(&quot;年龄为&quot;+age+&quot;的&quot;+name+&quot;养了一只&quot;+c.getColor()+&quot;颜色的&quot;+c.getAge()+&quot;的猫&quot;);</span><br><span class="line">            c.eat(something);</span><br><span class="line">            c.catchMouse();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;没有这种动物&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">&#x2F;&#x2F;Dog.class</span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line">    public Dog()&#123;&#125;</span><br><span class="line">    public Dog(int age,String color)&#123;</span><br><span class="line">        super(age,color);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat(String something)&#123;</span><br><span class="line">        System.out.println(getAge()+&quot;岁的&quot;+getColor()+&quot;颜色的狗两只前腿死死的抱住&quot;+something+&quot;猛吃&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void lookHome()&#123;</span><br><span class="line">        System.out.println(&quot;看家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Cat.class</span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">    public Cat()&#123;&#125;</span><br><span class="line">    public Cat(int age,String color)&#123;</span><br><span class="line">        super(age,color);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat(String something)&#123;</span><br><span class="line">        System.out.println(getAge()+&quot;岁的&quot;+getColor()+&quot;颜色的猫眯着眼睛侧着头吃&quot;+something);</span><br><span class="line">    &#125;</span><br><span class="line">    public void catchMouse()&#123;</span><br><span class="line">        System.out.println(&quot;抓老鼠&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.class</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person p1&#x3D;new Person(&quot;老王&quot;,30);</span><br><span class="line">        Dog d&#x3D;new Dog(2,&quot;黑&quot;);</span><br><span class="line">        p1.keepPet(d,&quot;屎&quot;);</span><br><span class="line"></span><br><span class="line">        Person p2&#x3D;new Person(&quot;老李&quot;,25);</span><br><span class="line">        Cat c&#x3D;new Cat(3,&quot;灰&quot;);</span><br><span class="line">        p2.keepPet(c,&quot;老鼠&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">年龄为30的老王养了一只黑颜色的2的狗</span><br><span class="line">2岁的黑颜色的狗两只前腿死死的抱住屎猛吃</span><br><span class="line">看家</span><br><span class="line">年龄为25的老李养了一只灰颜色的3的猫</span><br><span class="line">3岁的灰颜色的猫眯着眼睛侧着头吃老鼠</span><br><span class="line">抓老鼠</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p><strong>作用</strong>：包就是文件夹，用来管理各种不同功能的Java类。<br><strong>包名书写规则</strong>：公司域名反写.包的作用，全部英文小写，见名知意。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;本网站域名为www.ljsblog.com，包名为：com.ljsblog.domain1</span><br><span class="line">package com.ljsblog.domain1</span><br></pre></td></tr></table></figure><p><strong>全类名</strong>：包名.类名。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个Student类位于com.ljsblog.domain下，则其全类名,com.ljsblog.domain.Student </span><br></pre></td></tr></table></figure><p><strong>判断是否需要导包</strong>：</p><ul><li>使用同一包的类时，不需导包</li><li>使用java.lang包的类时，不需导包</li><li>其他情况都需导包 </li><li>若同时使用两个包的同名类，需用全类名。</li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final修饰方法：最终方法，不能被重写</li><li>final修饰的类：最终类，不能被继承</li><li>final修饰的变量：是常量，不能被修改<ul><li>基本数据类型：变量的值不能更改</li><li>引用数据类型：地址值不能修改，内部属性值可以修改</li></ul></li></ul><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><strong>定义</strong>：用来控制一个成员（成员变量，方法，构造方法，内部类）能够访问的范围的。<br><strong>分类</strong>；由小到大，private &lt; 缺省/默认（空着不写）&lt; protected &lt; public<br>| 修饰符  | 同一类中 | 同一个包中其他类 | 不同包下的子类 | 不同包下的无关类 |<br>| ——- | ——- | ————— | ————- | ————— |<br>| private | 能 | 不能 | 不能 | 不能 |<br>| 默认 | 能 | 能 | 不能 | 不能 |<br>| proteced | 能 | 能 | 能 | 不能 |<br>| public | 能 | 能 | 能 | 能 |</p><p><strong>使用规则</strong>：实际开发中，一般只用private和public。  </p><ul><li>成员变量私有</li><li>方法公开</li></ul><p><strong>特例</strong>：若方法中代码是抽取其他方法中共性代码，这个方法一般也私有。  </p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p><strong>分类</strong>：</p><ul><li>局部代码块（已淘汰）</li><li>构造代码块（已淘汰）</li><li>静态代码块（重点）</li></ul><h3 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h3><p><strong>作用</strong>：提前结束变量的生命周期（已淘汰）</p><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><p>写在乘员位置的代码块。<br><strong>作用</strong>：可以把多个构造方法中重复的代码抽取出来。<br><strong>执行时机</strong>：我们在创建本类对象时会先执行构造代码，</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p><strong>格式</strong>：static{}<br><strong>特点</strong>：需通过static关键字修饰，随着类的加载而加载，自动触发，只执行一次。<br><strong>使用场景</strong>：在类加载时，做一些数据初始化时使用。<br><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain1;</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;静态代码区&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Student()&#123;</span><br><span class="line">        System.out.println(&quot;无参构造&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Student(int age,String name)&#123;</span><br><span class="line">        System.out.println(&quot;有参构造&quot;);</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.ljsblog.domain1;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student s1&#x3D;new Student();</span><br><span class="line">        Student s2&#x3D;new Student(18,&quot;张三&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合（七）</title>
      <link href="2022/09/14/J7/"/>
      <url>2022/09/14/J7/</url>
      
        <content type="html"><![CDATA[<h1 id="集合（七）"><a href="#集合（七）" class="headerlink" title="集合（七）"></a>集合（七）</h1><h2 id="集合和数组的对比"><a href="#集合和数组的对比" class="headerlink" title="集合和数组的对比"></a>集合和数组的对比</h2><ul><li>长度<ul><li>数组长度固定</li><li>集合长度可变</li></ul></li><li>数据类型<ul><li>数组可以存基本数据类型和引用数据类型</li><li>集合可以存引用数组类型，要存基本数据类型需要将其变成对应的包装类</li></ul></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>需要导包java.util.ArrayList。<br><strong>泛型</strong>：限定集合中存储数据的类型。<br><strong>创建集合对象</strong>:<br>ArrayList&lt;泛型&gt; 名称=new ArrayList&lt;&gt;();<br><strong>注</strong>：打印对象不是地址值，而是集合中存储数据内容,在打印时会拿[]将所有数据包裹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>boolean add(E e)<br>添加元素，返回值表示是否添加成功，一定返回true</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>boolean remove(E e)<br>删除指定元素，返回值表示是否删除成功<br>E remove(int index)<br>删除指定索引的元素，返回被删除元素</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>E set(int index,E e)<br>修改指定索引下的元素，返回原来的元素</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>E get(int index)<br>获取指定索引的元素</p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>int size()<br>求集合长度</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建集合对象</span><br><span class="line">        ArrayList&lt;String&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;添加元素</span><br><span class="line">        list.add(&quot;aaa&quot;);</span><br><span class="line">        list.add(&quot;xxx&quot;);</span><br><span class="line">        list.add(&quot;bbb&quot;);</span><br><span class="line">        list.add(&quot;ddd&quot;);</span><br><span class="line">        list.add(&quot;ddd&quot;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;删除元素</span><br><span class="line">        &#x2F;&#x2F;指定元素删除</span><br><span class="line">        boolean flag&#x3D;list.remove(&quot;xxx&quot;);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        &#x2F;&#x2F;指定索引删除</span><br><span class="line">        String sr&#x3D;list.remove(1);</span><br><span class="line">        System.out.println(sr);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;修改元素</span><br><span class="line">        String ss&#x3D;list.set(1,&quot;ccc&quot;);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;查询元素</span><br><span class="line">        String sg&#x3D;list.get(1);</span><br><span class="line">        System.out.println(sg);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;遍历元素</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[]</span><br><span class="line">[aaa, xxx, bbb, ddd, ddd]</span><br><span class="line">true</span><br><span class="line">[aaa, bbb, ddd, ddd]</span><br><span class="line">bbb</span><br><span class="line">[aaa, ddd, ddd]</span><br><span class="line">ddd</span><br><span class="line">[aaa, ccc, ddd]</span><br><span class="line">ccc</span><br><span class="line">[aaa, ccc, ddd]</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="基本数据类型对应的包装类"><a href="#基本数据类型对应的包装类" class="headerlink" title="基本数据类型对应的包装类"></a>基本数据类型对应的包装类</h2><p>byte    -   Byte<br>short   -   Short<br>char    -   Character<br>int     -   Integer<br>long    -   Long<br>float   -   Float<br>double  -   Double<br>boolean -   Boolean  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(1);</span><br><span class="line">        list.add(2);</span><br><span class="line">        list.add(3);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[1, 2, 3]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>定义一个集合，添加一些学生对象，并进行遍历，学生类的属性为：姓名，年龄。对象数据由键盘录入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line">    public Student(int age,String name)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;1.录入数据，存入集合中</span><br><span class="line">        &#x2F;&#x2F;1.1确定要录入的数据个数、</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入要创建的学生个数:&quot;);</span><br><span class="line">        int n&#x3D;s.nextInt();</span><br><span class="line">        &#x2F;&#x2F;1.2放入集合</span><br><span class="line">        for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">            Student stu&#x3D;new Student();</span><br><span class="line">            System.out.print(&quot;请输入名字:&quot;);</span><br><span class="line">            stu.setName(s.next());</span><br><span class="line">            System.out.print(&quot;请输入年龄:&quot;);</span><br><span class="line">            stu.setAge(s.nextInt());</span><br><span class="line">            list.add(stu);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.遍历集合</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(&quot;第&quot;+(i+1)+&quot;个学生，姓名：&quot;+list.get(i).getName()+&quot; 年龄:&quot;+list.get(i).getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">请输入要创建的学生个数:3</span><br><span class="line">请输入名字:张三</span><br><span class="line">请输入年龄:18</span><br><span class="line">请输入名字:李四</span><br><span class="line">请输入年龄:18</span><br><span class="line">请输入名字:王五</span><br><span class="line">请输入年龄:19</span><br><span class="line">第1个学生，姓名：张三 年龄:18</span><br><span class="line">第2个学生，姓名：李四 年龄:18</span><br><span class="line">第3个学生，姓名：王五 年龄:19</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>main方法中定义一个集合，存入多个用户对象，每存入一个对象前通过id判断该对象是否重复，用户属性为：id,username,password。定义一个方法，通过id查找对应的用户信息，若存在，返回true;不存在，返回false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;User.java</span><br><span class="line">public class User&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    public User()&#123;&#125;</span><br><span class="line">    public User(int id,String username,String password)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.username&#x3D;username;</span><br><span class="line">        this.password&#x3D;password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username)&#123;</span><br><span class="line">        this.username&#x3D;username;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUsername()&#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password)&#123;</span><br><span class="line">        this.password&#x3D;password;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPassword()&#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建集合</span><br><span class="line">        ArrayList&lt;User&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入要录入的用户个数：&quot;);</span><br><span class="line">        int num&#x3D;s.nextInt();</span><br><span class="line">        &#x2F;&#x2F;创建对象录入数据并添加到集合</span><br><span class="line">        for(int i&#x3D;0;i&lt;num;)&#123;</span><br><span class="line">            User user&#x3D;new User();</span><br><span class="line">            System.out.print(&quot;请输入id：&quot;);</span><br><span class="line">            int id&#x3D;s.nextInt();</span><br><span class="line">            if(find(id,list))&#123;</span><br><span class="line">                System.out.println(&quot;id重复，请重新输入!&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                user.setId(id);</span><br><span class="line">                System.out.print(&quot;请输入姓名：&quot;);</span><br><span class="line">                user.setUsername(s.next());</span><br><span class="line">                System.out.print(&quot;请输入密码：&quot;);</span><br><span class="line">                user.setPassword(s.next());</span><br><span class="line">                list.add(user);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(&quot;第&quot;+(i+1)+&quot;个用户,id：&quot;+list.get(i).getId()+&quot; 名称：&quot;+list.get(i).getUsername()+&quot; 密码:&quot;+list.get(i).getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean find(int id,ArrayList&lt;User&gt; list)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            if(id&#x3D;&#x3D;list.get(i).getId())&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><p>定义javabean类：Phone。<br>Phone属性；品牌，价格。<br>main方法中定义一个集合，存入三个手机对象。<br>分别为：小米，1000。苹果，8000.锤子，2999。<br>定义一个方法，将价格低于3000的手机信息返回。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Phone.java</span><br><span class="line">public class Phone&#123;</span><br><span class="line">    private String brand;</span><br><span class="line">    private int price;</span><br><span class="line">    public Phone()&#123;&#125;</span><br><span class="line">    public Phone(String brand,int price)&#123;</span><br><span class="line">        this.brand&#x3D;brand;</span><br><span class="line">        this.price&#x3D;price;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBrand(String brand)&#123;</span><br><span class="line">        this.brand&#x3D;brand;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getBrand()&#123;</span><br><span class="line">        return brand;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPrice(int price)&#123;</span><br><span class="line">        this.price&#x3D;price;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getPrice()&#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Test.java</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建集合</span><br><span class="line">        ArrayList&lt;Phone&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;2.放入数据</span><br><span class="line">        Phone p1&#x3D;new Phone(&quot;小米&quot;,1000);</span><br><span class="line">        Phone p2&#x3D;new Phone(&quot;苹果&quot;,8000);</span><br><span class="line">        Phone p3&#x3D;new Phone(&quot;锤子&quot;,2999);</span><br><span class="line">        list.add(p1);</span><br><span class="line">        list.add(p2);</span><br><span class="line">        list.add(p3);</span><br><span class="line">        &#x2F;&#x2F;3.调用方法</span><br><span class="line">        ArrayList&lt;Phone&gt; relist&#x3D;getList(list);</span><br><span class="line">        &#x2F;&#x2F;4.打印返回的集合</span><br><span class="line">        for(int i&#x3D;0;i&lt;relist.size();i++)&#123;</span><br><span class="line">            System.out.println(&quot;品牌：&quot;+relist.get(i).getBrand()+&quot; 价格：&quot;+relist.get(i).getPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static ArrayList&lt;Phone&gt; getList(ArrayList&lt;Phone&gt; list)&#123;</span><br><span class="line">        ArrayList&lt;Phone&gt; relist&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            if(list.get(i).getPrice()&gt;3000)&#123;</span><br><span class="line">                relist.add(list.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return relist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">品牌：苹果 价格：8000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串（六）</title>
      <link href="2022/09/13/J6/"/>
      <url>2022/09/13/J6/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串（六）"><a href="#字符串（六）" class="headerlink" title="字符串（六）"></a>字符串（六）</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String是java定义好的一个类，定义在java.lang包中，使用时不需导包。<br>java程序中所有的字符串文字，都被视为此类的对象。<br>字符串不可变，它的对象在创建后不可更改。  </p><h3 id="创建String对象的两种方式"><a href="#创建String对象的两种方式" class="headerlink" title="创建String对象的两种方式"></a>创建String对象的两种方式</h3><ol><li>直接赋值<ul><li>String 名称=”内容”;</li><li><strong>注</strong>：当使用双引号直接赋值时，系统会检查该字符串在串池中是否存在，不存在则创建新的，存在则复用。</li></ul></li><li>new。构造方法：<ul><li>public String()                   创建空白字符串</li><li>public String(String original)    根据传入的字符串，创建字符串对象</li><li>public String(char[] chs)         根据字符数组，创建字符串对象</li><li>public String(byte[] chs)         根据字节数组，创建字符串对象</li><li><strong>注</strong>：每new一次都会在堆内存中开一块儿新的空间</li></ul></li></ol><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;直接赋值</span><br><span class="line">        String s1&#x3D;&quot;ljsblog&quot;;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;new</span><br><span class="line">        &#x2F;&#x2F;空参构造</span><br><span class="line">        String s2&#x3D;new String();</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        &#x2F;&#x2F;传递字符串</span><br><span class="line">        String s3&#x3D;new String(&quot;ljsblog&quot;);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        &#x2F;&#x2F;传递字符数组</span><br><span class="line">        &#x2F;&#x2F;可以修改字符串的内容</span><br><span class="line">        char ch[]&#x3D;&#123;&#39;l&#39;,&#39;j&#39;,&#39;s&#39;,&#39;b&#39;,&#39;l&#39;,&#39;o&#39;,&#39;g&#39;&#125;;</span><br><span class="line">        String s4&#x3D;new String(ch);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line">        &#x2F;&#x2F;传递字节数组</span><br><span class="line">        &#x2F;&#x2F;网络中传输的数据就是字节信息</span><br><span class="line">        byte by[]&#x3D;&#123;108,106,115,98,108,111,103&#125;;</span><br><span class="line">        String s5&#x3D;new String(by);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">ljsblog</span><br><span class="line"></span><br><span class="line">ljsblog</span><br><span class="line">ljsblog</span><br><span class="line">ljsblog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="equals和equalsIgnoreCase"><a href="#equals和equalsIgnoreCase" class="headerlink" title="equals和equalsIgnoreCase"></a>equals和equalsIgnoreCase</h4><ul><li>boolean equals(要比较的字符串)<ul><li>完全一样才是true,否则false</li></ul></li><li>boolean equalsIgnoreCase(要比较的字符串)<ul><li>忽视大小写的比较</li></ul></li></ul><p><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String s1&#x3D;&quot;ljs&quot;;</span><br><span class="line">        String s2&#x3D;new String(&quot;ljs&quot;);</span><br><span class="line">        String s3&#x3D;&quot;LJS&quot;;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.equals(s2));&#x2F;&#x2F;true</span><br><span class="line">        System.out.println(s1.equals(s3));&#x2F;&#x2F;false</span><br><span class="line">        System.out.println(s2.equalsIgnoreCase(s3));&#x2F;&#x2F;true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：==号比较的内容</strong>：</p><ul><li>基本数据类型比较的是数据值</li><li>引用数据类型比较的是地址值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String s1&#x3D;&quot;ljsblog&quot;;&#x2F;&#x2F;s1存储串池的地址值</span><br><span class="line">        String s2&#x3D;new String(&quot;ljsblog&quot;);&#x2F;&#x2F;s2存储堆里面的地址值</span><br><span class="line">        System.out.println(s1&#x3D;&#x3D;s2);&#x2F;&#x2F;false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h4><p>public char charAt(int index)<br>根据索引返回字符</p><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>public int length()<br>返回字符串长度</p><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><p>String substring(int beginIndex,int endIndex)<br>按范围截取字符串，包头不包尾，只有返回值才是截取的字符串<br>String substring(int beginIndex)<br>从给出地址截取到末尾</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>String replace(旧值,新值)<br>替换</p><h4 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray"></a>toCharArray</h4><p>char[] toCharArray()<br>将字符串变为字符数组。</p><h4 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes"></a>getBytes</h4><p>public byte[] getBytes()  </p><p>将字符串变为字节数组。</p><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;已知正确的用户名和密码，请用程序实现模拟用户登录，共三次机会，并给出登录成功失败的相应提示</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;定义用户名和密码</span><br><span class="line">        String user&#x3D;&quot;ljs&quot;;</span><br><span class="line">        String pass&#x3D;&quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;循环三次</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        for(int i&#x3D;0;i&lt;3;i++)&#123;</span><br><span class="line">            &#x2F;&#x2F;录入密码账号</span><br><span class="line">            System.out.print(&quot;请输入用户名：&quot;);</span><br><span class="line">            String str1&#x3D;s.next();</span><br><span class="line">            System.out.print(&quot;请输入密码：&quot;);</span><br><span class="line">            String str2&#x3D;s.next();</span><br><span class="line">            &#x2F;&#x2F;若对比成功则退出</span><br><span class="line">            if(user.equals(str1) &amp;&amp; pass.equals(str2))&#123;</span><br><span class="line">                System.out.println(&quot;登录成功&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;&#x2F;&#x2F;对比不成继续循环</span><br><span class="line">                if(i&#x3D;&#x3D;2)&#123;</span><br><span class="line">                    System.out.println(&quot;登录失败，您的账户已被锁定。&quot;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    System.out.println(&quot;登录失败，请重新登入，您还剩余&quot; + (2 - i) + &quot;次机会&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;输入一个字符串，统计其小写字母，大写字母，数字的个数</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;录取字符串</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入字符串：&quot;);</span><br><span class="line">        String s&#x3D;sc.next();</span><br><span class="line">        int lower&#x3D;0;</span><br><span class="line">        int upper&#x3D;0;</span><br><span class="line">        int num&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;s.length();i++)&#123;</span><br><span class="line">            if(s.charAt(i)&gt;&#x3D;&#39;a&#39; &amp;&amp; s.charAt(i)&lt;&#x3D;&#39;z&#39;)&#123;</span><br><span class="line">                lower++;</span><br><span class="line">            &#125;else if(s.charAt(i)&gt;&#x3D;&#39;A&#39; &amp;&amp; s.charAt(i)&lt;&#x3D;&#39;Z&#39;)&#123;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;else if(s.charAt(i)&gt;&#x3D;&#39;0&#39; &amp;&amp; s.charAt(i)&lt;&#x3D;&#39;9&#39;)&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;大写字母：&quot;+lower+&quot; 小写字母：&quot;+upper+&quot; 数字&quot;+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个方法，输入一个字符串，将其逆序返回，并输出</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        String s&#x3D;sc.next();</span><br><span class="line">        System.out.println(reverse(s));</span><br><span class="line">    &#125;</span><br><span class="line">    public static String reverse(String s)&#123;</span><br><span class="line">        String sr&#x3D;&quot;&quot;;</span><br><span class="line">        for(int i&#x3D;s.length()-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">            sr&#x3D;sr+s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return sr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;金额转换，例如：输入3199，输出零佰零拾零万叁仟壹佰玖拾玖元</span><br><span class="line">&#x2F;&#x2F;方法1</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;输入金额</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入您的金额：&quot;);</span><br><span class="line">        int num&#x3D;s.nextInt();</span><br><span class="line">        &#x2F;&#x2F;单位转换</span><br><span class="line">        String sc&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line">            int w&#x3D;num%10;</span><br><span class="line">            sc&#x3D;convert(w)+sc;</span><br><span class="line">            num&#x2F;&#x3D;10;</span><br><span class="line">            if(num&#x3D;&#x3D;0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int n&#x3D;7-sc.length();</span><br><span class="line">        for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sc&#x3D;&quot;零&quot;+sc;</span><br><span class="line">        &#125;</span><br><span class="line">        String sum&#x3D;&quot;&quot;;</span><br><span class="line">        String[] danwei&#x3D;&#123;&quot;佰&quot;,&quot;拾&quot;,&quot;万&quot;,&quot;仟&quot;,&quot;佰&quot;,&quot;拾&quot;,&quot;元&quot;&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;7;i++)&#123;</span><br><span class="line">            sum&#x3D;sum+sc.charAt(i)+danwei[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    public static String convert(int num)&#123;</span><br><span class="line">        String[] s&#x3D;&#123;&quot;零&quot;,&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;&#125;;</span><br><span class="line">        return s[num];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;方法2</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入您的金额：&quot;);</span><br><span class="line">        int n&#x3D;scanner.nextInt();</span><br><span class="line">        String[] arrNum&#x3D;&#123;&quot;零&quot;,&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;&#125;;</span><br><span class="line">        String[] arrUnit&#x3D;&#123;&quot;佰&quot;,&quot;拾&quot;,&quot;万&quot;,&quot;仟&quot;,&quot;佰&quot;,&quot;拾&quot;,&quot;元&quot;&#125;;</span><br><span class="line">        String s&#x3D;&quot;&quot;;</span><br><span class="line">        for (int unit&#x3D;arrUnit.length-1;unit&gt;&#x3D;0;unit--) &#123;</span><br><span class="line">            String bigNum&#x3D;arrNum[n%10];</span><br><span class="line">            String bigUnit&#x3D;arrUnit[unit];</span><br><span class="line">            String sum&#x3D;bigNum+bigUnit;</span><br><span class="line">            s&#x3D;sum+s;</span><br><span class="line">            n&#x2F;&#x3D;10;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;输入身份证号打印如下信息：</span><br><span class="line">&#x2F;&#x2F;出生日期：xxxx年X月X日</span><br><span class="line">&#x2F;&#x2F;性别：男&#x2F;女</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner s &#x3D; new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入您的身份证号:&quot;);</span><br><span class="line">        String id &#x3D; s.next();</span><br><span class="line">        System.out.println(&quot;出生日期：&quot; + id.substring(6, 10) + &quot;年&quot; + id.substring(10, 12) + &quot;月&quot; + id.substring(12, 14) + &quot;日&quot;);</span><br><span class="line">        if ((id.charAt(16) - 48) % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            System.out.println(&quot;性别：女&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;性别：男&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;游戏敏感词替换</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String[] s&#x3D;&#123;&quot;cnm&quot;,&quot;lj&quot;,&quot;mlgb&quot;,&quot;nt&quot;,&quot;fw&quot;&#125;;</span><br><span class="line">        Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入你要说的话：&quot;);</span><br><span class="line">        String talk&#x3D;sc.next();</span><br><span class="line">        for(int i&#x3D;0;i&lt;s.length;i++)&#123;</span><br><span class="line">            talk&#x3D;talk.replace(s[i],&quot;***&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(talk);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p><strong>StringBuilder</strong>可看成一个容器，创建之后里面内容可变。<br><strong>使用场景</strong>：</p><ul><li>字符串拼接</li><li>字符串反转</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>public StringBuilder()</p><ul><li>创建一个空白可变字符串对象，不含有任何内容</li><li>StringBuilder sb=new StringBuilder()</li></ul><p>public StringBuilder(String str)</p><ul><li>根据字符串的内容，创建可变字符串对象</li><li>StringBuilder sb=new StringBuilder(“ljsblog”)</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>public StringBuilder append()<br>添加数据，返回对象本身</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>public StringBuilder reverse()<br>反转内容</p><h4 id="length-1"><a href="#length-1" class="headerlink" title="length"></a>length</h4><p>public int length()<br>返回字符串长度</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>public String toString()<br>将StringBuilder转换为String</p><h4 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建对象</span><br><span class="line">        StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">        &#x2F;&#x2F;添加字符串</span><br><span class="line">        sb.append(&quot;ljsblog&quot;);</span><br><span class="line">        sb.append(123);</span><br><span class="line">        sb.append(12.3);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        &#x2F;&#x2F;反转字符串</span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        &#x2F;&#x2F;求字符串长度</span><br><span class="line">        int len&#x3D;sb.length();</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        &#x2F;&#x2F;将StringBuilder变为String</span><br><span class="line">        String s&#x3D;sb.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h2><p>StringJoiner跟StringBuilder一样，也可以看做一个可修改的容器，创建之后里面的内容是可变的。<br><strong>作用</strong>：提高字符串的操作效率，代码编写简洁，JDK8出现</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>public StringJoiner(间隔符号)</p><ul><li>创建一个StringJoiner对象，指定拼接时的间隔符号</li></ul><p>public StringJoiner(间隔符号,开始符号,结束符号)</p><ul><li>创建一个StringJoiner对象，指定拼接时的间隔符号,开始符号，结束符号</li></ul><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>public StringJoiner add(添加的内容)<br>添加数据，并返回对象本身</p><h4 id="length-2"><a href="#length-2" class="headerlink" title="length"></a>length</h4><p>public int length()<br>返回字符串长度(包括间隔符)</p><h4 id="toString"><a href="#toString" class="headerlink" title="toString"></a>toString</h4><p>public String toString()<br>返回拼接之后的字符串</p><h4 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建对象</span><br><span class="line">        StringJoiner sj&#x3D;new StringJoiner(&quot;,&quot;,&quot;[&quot;,&quot;]&quot;);</span><br><span class="line">        &#x2F;&#x2F;添加内容</span><br><span class="line">        sj.add(&quot;aaa&quot;);</span><br><span class="line">        sj.add(&quot;bbb&quot;);</span><br><span class="line">        sj.add(&quot;bbb&quot;);</span><br><span class="line">        System.out.println(sj);</span><br><span class="line">        &#x2F;&#x2F;求长度</span><br><span class="line">        int len&#x3D;sj.length();</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        &#x2F;&#x2F;将StringJoiner转换为String</span><br><span class="line">        String s&#x3D;sj.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[aaa,bbb,bbb]</span><br><span class="line">13</span><br><span class="line">[aaa,bbb,bbb]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>调用一个方法时，不需要用变量接收结果，可以继续调用其他方法。<br><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        StringBuilder sb&#x3D;new StringBuilder();</span><br><span class="line">        sb.append(&quot;ljs&quot;).append(&quot;blog&quot;).append(1).reverse();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1golbsjl</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;输入一个字符串，判断是否对称</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner s&#x3D;new Scanner(System.in);</span><br><span class="line">        String s1&#x3D;s.next();</span><br><span class="line">        String s2&#x3D;new StringBuilder(s1).reverse().toString();</span><br><span class="line">        if(s1.equals(s2))&#123;</span><br><span class="line">            System.out.println(&quot;对称字符串&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;非对称字符串&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将int[] arr&#x3D;&#123;1,2,3,4,5,6&#125;里面的内容转换成[1,2,3,4,5,6]输出</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">        String s&#x3D;joiner(arr);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static String joiner(int[] arr)&#123;</span><br><span class="line">        StringJoiner sj&#x3D;new StringJoiner(&quot;,&quot;,&quot;[&quot;,&quot;]&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            sj.add(&quot;&quot;+arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[1,2,3,4,5,6]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="字符串底层原理"><a href="#字符串底层原理" class="headerlink" title="字符串底层原理"></a>字符串底层原理</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><ul><li>字符串拼接时，若有变量:<ul><li>JDK8前：系统底层会自动创建一个StringBuilder对象，再调用append方法完成拼接，拼接后，再调用toString方法转换成String类型，而toString方法的底层原理是直接new了一个字符串对象</li><li>JDK8:系统预估字符串拼接后的大小，把拼接的内容放在数组中，此时也产生一个新的字符串</li></ul></li><li>若无变量：<ul><li>字符串直接相加，编译之后就是拼接后的结果，会复用串池中的字符串</li></ul></li></ul><h3 id="StringBuilder提高效率"><a href="#StringBuilder提高效率" class="headerlink" title="StringBuilder提高效率"></a>StringBuilder提高效率</h3><p>所有要拼接的内容都会往StringBuilder中放，不会创造无用的空间，节约内存</p><h3 id="StringBuilder源码分析"><a href="#StringBuilder源码分析" class="headerlink" title="StringBuilder源码分析"></a>StringBuilder源码分析</h3><ol><li>默认创建一个容量为16的字节数组（注：容量是最多装多少，长度是实际装了多少）</li><li>添加的内容小于当前容量，直接存</li><li>大于当前容量，则扩大容量，原来的容量*2+2</li><li>若还不够，则以实际长度为准</li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象（五）</title>
      <link href="2022/09/07/J5/"/>
      <url>2022/09/07/J5/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象（五）"><a href="#面向对象（五）" class="headerlink" title="面向对象（五）"></a>面向对象（五）</h1><p>面向对象编程就是拿东西来做对应的事，就比如人要洗衣服会拿洗衣机洗。  </p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>类</strong>：是对象共同特征的描述。<br><strong>对象</strong>：是真实存在的具体东西。<br>在java中，必须先设计类，才能获得对象。<br>类是对象的抽象，对象是类的实例。  </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义:"></a>类的定义:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">    1.成员变量(代表属性，一般是名词)</span><br><span class="line">    2.成员方法(代表动作，一般是动词)</span><br><span class="line">    3.构造器</span><br><span class="line">    4.代码块</span><br><span class="line">    5.内部类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的对象"><a href="#类的对象" class="headerlink" title="类的对象"></a>类的对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 &#x3D; new 类名();</span><br></pre></td></tr></table></figure><h3 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h3><p><strong>访问属性</strong>：<br>对象名.成员变量<br><strong>访问行为</strong>:<br>对象名.方法名(……)</p><h3 id="定义类的注意事项"><a href="#定义类的注意事项" class="headerlink" title="定义类的注意事项"></a>定义类的注意事项</h3><p>类名首字母建议大写，见名知意，驼峰模式。<br>一个java文件可定义多个class类，但只能一个类是public修饰，public修饰的类名必须成为代码文件名。<br>实际开发中建议一个文件定义一个class类。<br>成员变量的完整定义格式：<br>修饰符 数据类型 变量名称=初始值;<br>一般无需指定初始化值，存在默认值<br>用来描述一类事物的类，叫做：<strong>javabean类</strong>。在<strong>javabean类</strong>中，是不写main方法的。<br>编写main方法的类，叫做<strong>测试类</strong>。可以在测试类中创建<strong>javabean类</strong>的对象并进行复制调用</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    int grade;</span><br><span class="line">    public void play()&#123;</span><br><span class="line">        System.out.println(name+&quot;在玩&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(name+&quot;在学习&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student&#x3D;new Student();</span><br><span class="line">        student.name&#x3D;&quot;张三&quot;;</span><br><span class="line">        student.sex&#x3D;&quot;男&quot;;</span><br><span class="line">        student.grade&#x3D;60;</span><br><span class="line">        student.play();</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><strong>封装</strong>便是告诉我们，如何正确设计对象的属性和方法。<br>对象代表什么，就要封装相应的数据，并提供数据相应的行为。</p><h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><p><strong>private</strong>是一个权限修饰符，可以修饰成员（成员变量和成员方法），被private修饰的成员只能在本类中才能访问。<br>针对private修饰的成员变量，若需被其他类使用，要提高响应的操作。<br>提供”setXXX(参数)”方法，用于给成员变量赋值，方法用public修饰。<br>提供”getXXX()”方法，用于获取成员变量的值，方法用public修饰。<br><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int grade;</span><br><span class="line">    public void setName(String n)&#123;</span><br><span class="line">        name&#x3D;n;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setSex(String s)&#123;</span><br><span class="line">        sex&#x3D;s;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getSex()&#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setGrade(int g)&#123;</span><br><span class="line">        if(g&gt;&#x3D;0 &amp;&amp; g&lt;&#x3D;100)&#123;</span><br><span class="line">            grade&#x3D;g;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;参数非法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getGrade()&#123;</span><br><span class="line">        return grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student&#x3D;new Student();</span><br><span class="line">        student.setName(&quot;zhangsan&quot;);</span><br><span class="line">        student.setSex(&quot;男&quot;);</span><br><span class="line">        student.setGrade(56);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(student.getSex());</span><br><span class="line">        System.out.println(student.getGrade());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>当成员变量和局部变量重名时，就会触发<strong>就近原则</strong>（谁离我近，我就用谁）<br><strong>this</strong>可以区别成员变量和局部变量。<br><strong>this的本质</strong>：代表所在方法调用者的地址值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Student&#123;</span><br><span class="line">    private int age;&#x2F;&#x2F;成员变量</span><br><span class="line">    public void method(int age)&#123;</span><br><span class="line">        int age&#x3D;10;&#x2F;&#x2F;局部变量</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        &#x2F;&#x2F;触发就近原则，打印局部变量age,10</span><br><span class="line">        System.out.println(this.age);</span><br><span class="line">        &#x2F;&#x2F;此时age是成员变量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int grade;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setSex(String sex)&#123;</span><br><span class="line">        this.sex&#x3D;sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getSex()&#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setGrade(int grade)&#123;</span><br><span class="line">        if(grade&gt;&#x3D;0 &amp;&amp; grade&lt;&#x3D;100)&#123;</span><br><span class="line">            this.grade&#x3D;grade;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;参数非法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getGrade()&#123;</span><br><span class="line">        return grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student&#x3D;new Student();</span><br><span class="line">        &#x2F;&#x2F;this代表的是student的地址值</span><br><span class="line">        student.setName(&quot;zhangsan&quot;);</span><br><span class="line">        &#x2F;&#x2F;this.name&#x3D;name;</span><br><span class="line">        &#x2F;&#x2F;等号右边name遵循就近原则，为形参，接收zhangsan</span><br><span class="line">        &#x2F;&#x2F;等号左边this为student的地址值，取的成员变量name</span><br><span class="line">        student.setSex(&quot;男&quot;);</span><br><span class="line">        student.setGrade(56);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(student.getSex());</span><br><span class="line">        System.out.println(student.getGrade());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><strong>构造方法</strong>也就做构造器，构造函数。<br><strong>作用</strong>：在创建对象时给成员变量进行赋值。<br><strong>分类</strong>：<strong>无参数构造方法</strong>和<strong>有参数构造方法</strong></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">    &#x2F;&#x2F;空参构造方法</span><br><span class="line">    修饰符 类名()&#123;</span><br><span class="line">        方法体</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;带全部参数构造方法</span><br><span class="line">    修饰符 类名(参数)&#123;</span><br><span class="line">        方法体;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>方法名与类名相同，大小写也一致</li><li>无返回值类型，也没有void</li><li>也不能由return带回结果数据</li></ul><h3 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h3><ul><li>创建对象时由虚拟机调用，不能手动调用构造方法</li><li>每创建一次对象，就会调用一次构造方法。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>构造方法的定义<ul><li>若未定义构造方法，系统将给出一个默认的无参数构造方法</li><li>若定义了构造方法，系统不再给出默认的无参数构造方法</li></ul></li><li>构造方法的重载<ul><li>带参和无参构造方法，两者方法名相同，参数不同，称为构造方法的重载</li></ul></li><li>无论是否使用，都尽量写无参和带参的构造方法</li></ol><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    &#x2F;&#x2F;无参构造方法</span><br><span class="line">    public Student()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;带参构造方法</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student&#x3D;new Student(&quot;zhangsan&quot;,16);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准的javabean类"><a href="#标准的javabean类" class="headerlink" title="标准的javabean类"></a>标准的javabean类</h2><ul><li>类名需见名知意。</li><li>成员变量使用private修饰</li><li>提供至少两种构造方法<ul><li>无参构造方法</li><li>带全部参数构造方法</li></ul></li><li>成员方法<ul><li>提供每一个成员变量的对应的setXXX()/getXXX()</li><li>若有其他行为，也写上</li></ul></li></ul><h2 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h2><ul><li>类中位置不同：<ul><li>成员变量在类中，方法外</li><li>局部变量在方法内，方法声明上</li></ul></li><li>初始化值不同：<ul><li>成员变量有默认初始化值</li><li>局部变量没有</li></ul></li><li>内存位置不同：<ul><li>成员变量在堆内存</li><li>局部变量在栈内存</li></ul></li><li>生命周期不同：<ul><li>成员变量随着对象创建而存在，随着对象消失而消失</li><li>局部变量随着方法的调用而存在，随着方法的运行结束而消失</li></ul></li><li>作用域不同<ul><li>整个类中有效</li><li>当前方法有效</li></ul></li></ul><h2 id="对象内存"><a href="#对象内存" class="headerlink" title="对象内存"></a>对象内存</h2><p>在创建对象时系统最少会做七件事</p><ol><li>加载class文件</li><li>申明局部变量</li><li>在堆内存中开辟一个空间</li><li>默认初始化</li><li>显示初始化</li><li>构造方法初始化</li><li>将堆内存中的地址值赋值给左边的局部变量</li></ol><h3 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h3><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    &#x2F;&#x2F;无参构造方法</span><br><span class="line">    public Student()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;带参构造方法</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student&#x3D;new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先StudentTest.java的字节码文件加载到方法区，main方法在方法区临时存储。随后，虚拟机自动调用程序的主入口main方法，main方法会被压入栈内，然后利用代码 Student student=new Student(“zhangsan”,16);创建对象student，执行上述的七步，具体为：</p><ol><li>加载class文件：<ul><li>将Student.java加载到方法区，包括其中所有成员变量和方法</li></ul></li><li>申明局部变量<ul><li>Student student=new Student();执行“=”左边的代码，在栈内存的main方法中创建变量student，student能够存储Student类对象的地址值</li></ul></li><li>在堆内存中开辟一个空间<ul><li>Student student=new Student();执行“=”右边的代码。会将所有类中的成员变量和成员方法的地址值存储到堆内存</li></ul></li><li>默认初始化<ul><li>将成员变量初始化。name为null，age为0</li></ul></li><li>显示初始化<ul><li>若在定义成员变量时直接赋值（比如priavte String name=”zhangsan”;private int age=15;）这就叫做显示初始化，不过范例中并未初始化，所以这步可忽略</li></ul></li><li>构造方法初始化<ul><li>范例中是空参构造，可以忽略；若是有参构造创建对象，name和age便会被赋值</li></ul></li><li>将堆内存中的地址值赋值给左边的局部变量<ul><li>Student student=new Student();将右边代码在堆中创建的对象的地址赋给student</li></ul></li></ol><p><strong>注</strong>：当main方法执行完毕，便会出栈，出栈后main方法的所有变量都会被释放，其中包括存储对象地址的变量，即范例中student变量被释放，若没有变量指向对象在堆内存中所处的空间，该空间便会消失。</p><h3 id="多个对象"><a href="#多个对象" class="headerlink" title="多个对象"></a>多个对象</h3><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    &#x2F;&#x2F;无参构造方法</span><br><span class="line">    public Student()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;带参构造方法</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student1&#x3D;new Student();</span><br><span class="line">        Student student2&#x3D;new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>student1创建步骤与上面创建单个对象的步骤大致相同。<br>student2不需要再次加载class文件，相对于student少了一步，而其他步骤与创建student1大致相同</p><h3 id="多个引用指向同一对象"><a href="#多个引用指向同一对象" class="headerlink" title="多个引用指向同一对象"></a>多个引用指向同一对象</h3><p><strong>范例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;javabean类</span><br><span class="line">&#x2F;&#x2F;Student.java</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    &#x2F;&#x2F;无参构造方法</span><br><span class="line">    public Student()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;带参构造方法</span><br><span class="line">    public Student(String name,int age)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试类</span><br><span class="line">&#x2F;&#x2F;StudentTest.java</span><br><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Student student1&#x3D;new Student();</span><br><span class="line">        Student student2&#x3D;student1;</span><br><span class="line">        student1.setName(&quot;ljs&quot;);</span><br><span class="line">        student1.setAge(15);</span><br><span class="line">        System.out.println(student1.getName());</span><br><span class="line">        System.out.println(student2.getName());</span><br><span class="line">        System.out.println(student1.getAge());</span><br><span class="line">        System.out.println(student2.getAge());</span><br><span class="line">        student2.setName(&quot;sjl&quot;);</span><br><span class="line">        student2.setAge(16);</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        System.out.println(student1.getName());</span><br><span class="line">        System.out.println(student2.getName());</span><br><span class="line">        System.out.println(student1.getAge());</span><br><span class="line">        System.out.println(student2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">ljs</span><br><span class="line">ljs</span><br><span class="line">15</span><br><span class="line">15</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">sjl</span><br><span class="line">sjl</span><br><span class="line">16</span><br><span class="line">16</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>创建student1对象的步骤与创建单个对象的步骤大致相同，student2被赋值了student1存储的对象地址，student1和student2的存储的对象地址相同，也就是这两个变量指向同一个对象的地址，所以当其中一个对象的成员变量被改变，另一个也会跟着改变,比如student1.name改为sjl，student1.age被改为16，则student2.name和student2.age也会发生改变，变为sjl和16。<br>当student1和student2都不再存储对象在堆内存中所处的地址时，该对象会消失。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法（四）</title>
      <link href="2022/09/02/J4/"/>
      <url>2022/09/02/J4/</url>
      
        <content type="html"><![CDATA[<h1 id="方法（四）"><a href="#方法（四）" class="headerlink" title="方法（四）"></a>方法（四）</h1><p><strong>方法</strong>：封装某种功能，提高代码的复用性和可维护性，方法是程序中最小的执行单元。<br>在<strong>面向过程</strong>中，称方法为<strong>函数</strong>；在<strong>面向对象</strong>中，称为方法。<br><strong>方法定义</strong>:将一些代码打包在一起，该过程为<strong>方法定义</strong>。<br><strong>方法调用</strong>:方法定义后不是直接运行的，需要手动调用才能执行，该过程名为<strong>方法调用</strong>。<br>平时用的main也是一个方法，main方法可以被jvm识别。<br><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 其他修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h2><p>void表无返回值，有返回值则使用数据类型（基本数据类型+引用数据类型）。<br><strong>return关键字</strong>：  </p><ul><li>方法无返回值：return可以省略不写，如果要写return，后面不能跟具体数据,表示结束方法。  </li><li>方法有返回值：必须要写return，表结束方法和返回结果</li></ul><p><strong>无返回值的例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void p()&#123;</span><br><span class="line">        System.out.println(&quot;方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;&#x2F;&#x2F;void表示无返回值</span><br><span class="line">        &#x2F;&#x2F;第一次调用方法</span><br><span class="line">        p();</span><br><span class="line">        &#x2F;&#x2F;第二次调用方法</span><br><span class="line">        p();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">方法</span><br><span class="line">方法</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>有返回值的例子</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;调用方法，返回1-10的总和</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static int s()&#123;&#x2F;&#x2F;返回值为整型</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;10;i++)&#123;</span><br><span class="line">            sum+&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;直接打印</span><br><span class="line">        System.out.println(s());</span><br><span class="line">        &#x2F;&#x2F;也可以将方法返回值用整型变量接收</span><br><span class="line">        &#x2F;&#x2F;例如:</span><br><span class="line">        int i&#x3D;s();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">55</span><br><span class="line">55</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p><strong>参数</strong>：</p><ul><li>实际参数：实际参加运算的值。基本数据类型是值，引用数据类型是地址值。</li><li>形式参数：定义方法时，参数列表的参数</li></ul><p><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;调用方法计算两个值的和，并返回</span><br><span class="line">public class Test&#123;</span><br><span class="line">    &#x2F;&#x2F;x，y为形参,实际调用方时传入的值为方法的实参</span><br><span class="line">    public static int sum(int x,int y)&#123;</span><br><span class="line">        return x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int s1&#x3D;sum(10,30);</span><br><span class="line">        System.out.println(&quot;传入的两个数值和为:&quot;+s1);</span><br><span class="line">        int s2&#x3D;sum(30,40);</span><br><span class="line">        System.out.println(&quot;传入的两个数值和为:&quot;+s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">传入的两个数值和为:40</span><br><span class="line">传入的两个数值和为:70</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><p><strong>调用格式</strong>:<br>方法名(实参列表);<br><strong>实参列表的注意事项</strong>：实参列表的参数个数，类型，顺序需与形参完全相同。<br><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static int s1(int x,int y)&#123;</span><br><span class="line">        return x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    public static String s2(int x,String s)&#123;</span><br><span class="line">        return x+s;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(s1(10,20));&#x2F;&#x2F;调用s1</span><br><span class="line">        System.out.println(s2(10,&quot;ljsblog&quot;));&#x2F;&#x2F;调用s2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">30</span><br><span class="line">10ljsblog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p><strong>定义</strong>：同一个类中出现多个方法名相同，参数列表不同的多个方法，这种现象称为<strong>方法重载</strong>（overloading）<br><strong>参数列表</strong>:</p><ul><li>参数个数不同</li><li>参数类型不同</li><li>不同类型的参数顺序不同（不建议）</li></ul><p><strong>注</strong>：方法的重载与访问权限修饰符和返回值类型无关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static int add(int a) &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;参数个数不同</span><br><span class="line">    public static int add(int a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;参数类型不同</span><br><span class="line">    public static int add(double a, int b) &#123;</span><br><span class="line">        return (int) a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;不同类型参数顺序不同</span><br><span class="line"></span><br><span class="line">    public static int add(int a, double b) &#123;</span><br><span class="line">        return a + (int) b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(add(10));&#x2F;&#x2F;调用add(int a)</span><br><span class="line">        System.out.println(add(10, 20));&#x2F;&#x2F;调用add(int a,int b)</span><br><span class="line">        System.out.println(add(20.5, 30));&#x2F;&#x2F;调用add(double a,int b)</span><br><span class="line">        System.out.println(add(30, 15.5));&#x2F;&#x2F;调用add(int a,double b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">10</span><br><span class="line">30</span><br><span class="line">50</span><br><span class="line">45</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h2><p>方法调用自身称为<strong>递归</strong>，使用递归时要设置终止条件。<br><strong>递归条件</strong>：存在限制条件，当满足这个限制条件时，递归不再继续，每次递归调用后越来越接近这个限制条件。<br><strong>例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">&#x2F;&#x2F;输入一个数，计算其阶乘</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static int f(int num)&#123;</span><br><span class="line">        if(num&#x3D;&#x3D;1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return num*f(num-1);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        int n&#x3D;scanner.nextInt();</span><br><span class="line">        System.out.println(n+&quot;的阶乘为&quot;+f(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">5</span><br><span class="line">5的阶乘为120</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="方法范例"><a href="#方法范例" class="headerlink" title="方法范例"></a>方法范例</h2><h3 id="求数组最大值"><a href="#求数组最大值" class="headerlink" title="求数组最大值"></a>求数组最大值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;45,47,57,16,44,79&#125;;</span><br><span class="line">        System.out.println(&quot;最大值为&quot;+Max(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    public static int Max(int[] arr)&#123;</span><br><span class="line">        int max&#x3D;arr[0];</span><br><span class="line">        for(int i&#x3D;1;i&lt;arr.length;i++)&#123;</span><br><span class="line">            if(max&lt;arr[i])&#123;</span><br><span class="line">                max&#x3D;arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">最大值为79</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;45,47,57,16,44,78&#125;;</span><br><span class="line">        boolean flag&#x3D;f(arr,57);</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            System.out.println(&quot;存在&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean f(int[] arr,int num)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            if(num&#x3D;&#x3D;arr[i])&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">存在</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将数组下标from到to(不包括to)的数据拷贝到arr2，并返回打印</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr1&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">        int[] arr2&#x3D;copy(arr1,2,5);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr2.length;i++)&#123;</span><br><span class="line">            System.out.println(arr2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int[] copy(int[] arr1,int from,int to)&#123;</span><br><span class="line">        int[] arr2&#x3D;new int[to-from];</span><br><span class="line">        for(int i&#x3D;from,j&#x3D;0;i&lt;to;i++,j++)&#123;</span><br><span class="line">            arr2[j]&#x3D;arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return arr2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="方法的内存"><a href="#方法的内存" class="headerlink" title="方法的内存"></a>方法的内存</h2><p>方法被调用后就会进栈执行，先进后出。  </p><ul><li>基本数据类型<ul><li>数据值存储在自己的空间中，赋值给其他变量，赋的真实的值。</li><li>方法传递基本数据类型时，传递的是真实的数据，形参改变不影响实际参数的值</li></ul></li><li>引用数据类型<ul><li>数据值存储在其他的空间中，自己空间存储的是地址值，赋值给其他变量，赋的是地址值</li><li>方法传递引用数据类型时，传递的是地址值，形参改变，影响实际参数的值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组（三）</title>
      <link href="2022/09/02/J3/"/>
      <url>2022/09/02/J3/</url>
      
        <content type="html"><![CDATA[<h1 id="数组（三）"><a href="#数组（三）" class="headerlink" title="数组（三）"></a>数组（三）</h1><p><strong>数组</strong>里面存着<strong>相同数据类型</strong>的多个元素。  </p><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;格式1</span><br><span class="line">数组类型[] 数组名</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;格式2</span><br><span class="line">数组类型 数组名[]</span><br></pre></td></tr></table></figure><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><p>就是在内存中，为数组容器开辟空间，并将数据存入容器的功能<br><strong>方式</strong></p><ul><li>静态初始化</li><li>动态初始化</li></ul><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><h4 id="完整格式"><a href="#完整格式" class="headerlink" title="完整格式"></a>完整格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 &#x3D; new 数据类型[]&#123;元素1,元素2……&#125;;</span><br></pre></td></tr></table></figure><h4 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式"></a>简化格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组类型[] 数组名 &#x3D; &#123;元素1,元素2……&#125;;</span><br></pre></td></tr></table></figure><h4 id="两种格式的范例"><a href="#两种格式的范例" class="headerlink" title="两种格式的范例"></a>两种格式的范例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr1&#x3D;new int[]&#123;1,2,3&#125;;</span><br><span class="line">        int[] arr2&#x3D;&#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">        double[] arr3&#x3D;new double[]&#123;1.0,2.0,30&#125;;</span><br><span class="line">        double[] arr4&#x3D;&#123;1.0,2.0,3.0&#125;;</span><br><span class="line"></span><br><span class="line">        String[] arr5&#x3D;new String[]&#123;&quot;abc&quot;,&quot;efa&quot;,&quot;sdf&quot;&#125;;</span><br><span class="line">        String[] arr6&#x3D;&#123;&quot;abc&quot;,&quot;efa&quot;,&quot;sdf&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>创建时，自己制定数组长度，由虚拟机给出默认的初始化值。<br><strong>默认初始化值</strong>:  </p><ul><li>整数类型:0</li><li>小数类型:0.0</li><li>字符类型:空格</li><li>布尔类型:false</li><li>引用数据类型:null</li></ul><p><strong>格式</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组类型[] 数组名 &#x3D; new 数组类型[数组长度];</span><br></pre></td></tr></table></figure><h3 id="静态0和动态初始化的区别"><a href="#静态0和动态初始化的区别" class="headerlink" title="静态0和动态初始化的区别"></a>静态0和动态初始化的区别</h3><p><strong>静态初始化</strong>：手动指定数组元素，系统会根据元素个数算出数组长度。<br><strong>动态初始化</strong>：只确定元素个数，不确定元素值。</p><h2 id="数组的地址值"><a href="#数组的地址值" class="headerlink" title="数组的地址值"></a>数组的地址值</h2><p>数组的地址值表示数组在内存的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr1&#x3D;&#123;1,2,3&#125;;</span><br><span class="line">        double[] arr2&#x3D;&#123;1.0,2.0,3.0&#125;;</span><br><span class="line">        System.out.println(arr1);</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">[I@14ae5a5</span><br><span class="line">[D@7f31245a</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;解释地址值</span><br><span class="line">&#x2F;&#x2F;[表示当前是一个数组</span><br><span class="line">&#x2F;&#x2F;D表示数组元素是double类型；I表示数组元素是int类型</span><br><span class="line">&#x2F;&#x2F;@间隔符号，固定</span><br><span class="line">&#x2F;&#x2F;14ae5a5和7f31245a，数组地址，以十六进制体现</span><br></pre></td></tr></table></figure><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><h3 id="获取数组的元素"><a href="#获取数组的元素" class="headerlink" title="获取数组的元素"></a>获取数组的元素</h3><p><strong>格式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引];&#x2F;&#x2F;索引又称为下标，角标，从0开始</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">        &#x2F;&#x2F;获取一个元素，索引为0</span><br><span class="line">        &#x2F;&#x2F;直接打印</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        &#x2F;&#x2F;赋值给变量，再打印</span><br><span class="line">        int i&#x3D;arr[0];</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="给数组元素赋值"><a href="#给数组元素赋值" class="headerlink" title="给数组元素赋值"></a>给数组元素赋值</h3><p><strong>格式</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]&#x3D;具体数据&#x2F;变量;</span><br></pre></td></tr></table></figure><p>原本的数据会被覆盖<br><strong>范例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">        arr[0]&#x3D;10;</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><p><strong>数组变量</strong>将数组所有元素取出进行操作。<br><strong>获取数组的长度属性</strong>:<br>数组名.length  </p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;idea提供自动生成数组的遍历</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">        &#x2F;&#x2F;输入数组名.fori，并回车，会自动生成遍历循环</span><br><span class="line">        &#x2F;&#x2F;比如：</span><br><span class="line">        &#x2F;&#x2F;arr.fori</span><br><span class="line">        &#x2F;&#x2F;自动生成以下代码</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><h4 id="遍历数组打印"><a href="#遍历数组打印" class="headerlink" title="遍历数组打印"></a>遍历数组打印</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="遍历数组求和"><a href="#遍历数组求和" class="headerlink" title="遍历数组求和"></a>遍历数组求和</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            sum+&#x3D;arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;sum&#x3D;&quot;+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">sum&#x3D;55</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="数组范例"><a href="#数组范例" class="headerlink" title="数组范例"></a>数组范例</h2><h3 id="求最值"><a href="#求最值" class="headerlink" title="求最值"></a>求最值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求最大值最小值并打印</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;34,67,152,45,42&#125;;</span><br><span class="line">        int max&#x3D;arr[0];</span><br><span class="line">        int min&#x3D;arr[0];</span><br><span class="line">        for(int i&#x3D;1;i&lt;arr.length;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;max)&#123;</span><br><span class="line">                max&#x3D;arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            if(arr[i]&lt;min)&#123;</span><br><span class="line">                min&#x3D;arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;最大值&quot;+max);</span><br><span class="line">        System.out.println(&quot;最小值&quot;+min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">最大值152</span><br><span class="line">最小值34</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="数组逆序"><a href="#数组逆序" class="headerlink" title="数组逆序"></a>数组逆序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">        System.out.println(&quot;逆序前：&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;0,j&#x3D;arr.length-1;i&lt;j;i++,j--)&#123;</span><br><span class="line">            int t&#x3D;arr[i];</span><br><span class="line">            arr[i]&#x3D;arr[j];</span><br><span class="line">            arr[j]&#x3D;t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n逆序后：&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">逆序前：</span><br><span class="line">12345678910</span><br><span class="line">逆序后：</span><br><span class="line">10987654321</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="数组打乱"><a href="#数组打乱" class="headerlink" title="数组打乱"></a>数组打乱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[] arr&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">        System.out.println(&quot;打乱前：&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Random r&#x3D;new Random();</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            int j&#x3D;r.nextInt(arr.length);</span><br><span class="line">            int t&#x3D;arr[i];</span><br><span class="line">            arr[i]&#x3D;arr[j];</span><br><span class="line">            arr[j]&#x3D;t;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n打乱后：&quot;);</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">打乱前：</span><br><span class="line">12345678910</span><br><span class="line">打乱后：</span><br><span class="line">34810719562</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="数组的内存分配"><a href="#数组的内存分配" class="headerlink" title="数组的内存分配"></a>数组的内存分配</h2><p>数组名指向的是数组的地址。<br><strong>Java内存分配</strong></p><ul><li>栈:方法运行时使用的内存，比如main方法运行，进入方法栈中执行</li><li>堆:存储对象或数组，new来创建的，都存储在堆内存</li><li>本地方法栈:JVM使用操作系统功能时使用</li><li>方法区（从JDK8开始，取消方法区，新增元空间）:存储可运行的class文件</li><li>寄存器:给CPU使用</li></ul><p>new来创建的，一定在堆中开辟了一个小空间。若是new了多次，堆中有多个小空间，每个小空间中都有各自的数据。<br>当两个数组指向同一小空间时，其中一数组对小空间的值发生改变，则其他数组再次访问时就是修改之后的结果了。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本结构（二）</title>
      <link href="2022/09/01/J2/"/>
      <url>2022/09/01/J2/</url>
      
        <content type="html"><![CDATA[<h1 id="基本结构（二）"><a href="#基本结构（二）" class="headerlink" title="基本结构（二）"></a>基本结构（二）</h1><p><strong>结构分类</strong>：</p><ul><li>顺序结构：从上向下，依次执行</li><li>选择结构：根据实际情况选择一条分支执行</li><li>循环结构：在满足一定条件下，可以重复执行的语句</li></ul><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><p><strong>分类</strong>：</p><ul><li>if语句</li><li>switch语句</li></ul><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p><strong>格式1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if(布尔值的表达式)&#123;</span><br><span class="line">    &#x2F;&#x2F;要执行的语句</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;布尔表达式值为true。则执行；为false，不执行</span><br><span class="line">&#x2F;&#x2F;例：</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        int age&#x3D;scanner.nextInt();</span><br><span class="line">        if(age &gt; 18)&#123;</span><br><span class="line">            System.out.println(&quot;已成年&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if(布尔值的表达式)&#123;</span><br><span class="line">    &#x2F;&#x2F;布尔表达式为true,要执行的语句</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;布尔表达式为false,要执行的语句</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;例：</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        int age&#x3D;scanner.nextInt();</span><br><span class="line">        if(age &gt; 18)&#123;</span><br><span class="line">            System.out.println(&quot;已成年&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;未成年&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式3</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if(布尔值表达式)&#123;</span><br><span class="line">    &#x2F;&#x2F;语句体1</span><br><span class="line">&#125;else if&#123;</span><br><span class="line">    &#x2F;&#x2F;语句体2</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;语句体3</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;例：</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入年龄：&quot;);</span><br><span class="line">        int age&#x3D;scanner.nextInt();</span><br><span class="line">        if(age &lt; 18)&#123;</span><br><span class="line">            System.out.println(&quot;未成年&quot;);</span><br><span class="line">        &#125;else if(age &gt;&#x3D; 18 &amp;&amp; age &lt; 30)&#123;</span><br><span class="line">            System.out.println(&quot;青年&quot;);</span><br><span class="line">        &#125;else if(age &gt;&#x3D; 30 &amp;&amp; age &lt; 50)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;中年&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;老年&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><strong>格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch(值)&#123;</span><br><span class="line">    case 值1:</span><br><span class="line">        语句</span><br><span class="line">        break;</span><br><span class="line">    case 值2:</span><br><span class="line">        语句</span><br><span class="line">        break;</span><br><span class="line">    ……</span><br><span class="line">    default:</span><br><span class="line">        语句</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong>：先看switch括号的值，然后与case后值匹配，有则执行相关case后语句，否则执行default控制的语句。<br><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入数字：&quot;);</span><br><span class="line">        int a&#x3D;scanner.nextInt();</span><br><span class="line">        switch(a)&#123;</span><br><span class="line">            case 0:</span><br><span class="line">                System.out.println(&quot;zero&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                System.out.println(&quot;one&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                System.out.println(&quot;two&quot;);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(&quot;其他&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>case后必须是常量</li><li>switch后面的值只能是byte,short,int,字符，字符串，枚举</li><li>break可加可不加，当程序执行到某个case后的代码，未遇到break时，就会一直执行</li><li>default可省，但尽量加上</li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li>for循环语句</li><li>while循环语句</li><li>do…while循环语句</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><strong>格式</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(初始化表达式1;判断表达式（boolean）2;迭代部分4)</span><br><span class="line">&#123;</span><br><span class="line">    循环体3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="打印0-10"><a href="#打印0-10" class="headerlink" title="打印0-10"></a>打印0-10</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class He&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;&#x3D;10;i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*运行结果</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h5 id="打印1-100之间偶数的和"><a href="#打印1-100之间偶数的和" class="headerlink" title="打印1-100之间偶数的和"></a>打印1-100之间偶数的和</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;100;i++)&#123;</span><br><span class="line">            if(i%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                sum+&#x3D;i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*运行结果</span><br><span class="line">2550</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h5 id="打印100-999之间的所有水仙花数"><a href="#打印100-999之间的所有水仙花数" class="headerlink" title="打印100-999之间的所有水仙花数"></a>打印100-999之间的所有水仙花数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int a&#x3D;0;</span><br><span class="line">        int b&#x3D;0;</span><br><span class="line">        int c&#x3D;0;</span><br><span class="line">        for(int i&#x3D;100;i&lt;&#x3D;999;i++)&#123;</span><br><span class="line">            a&#x3D;i%10;</span><br><span class="line">            b&#x3D;i&#x2F;10%10;</span><br><span class="line">            c&#x3D;i&#x2F;100;</span><br><span class="line">            if((a*a*a+b*b*b+c*c*c)&#x3D;&#x3D; i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*运算结果</span><br><span class="line">153</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">407</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><strong>格式</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while(循环条件)&#123;</span><br><span class="line">    循环体</span><br><span class="line">    迭代部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><h5 id="打印1-10"><a href="#打印1-10" class="headerlink" title="打印1-10"></a>打印1-10</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int i&#x3D;1;</span><br><span class="line">        while(i&lt;&#x3D;10)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p><strong>格式</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">    控制条件语句;</span><br><span class="line">&#125;while(boolean);</span><br></pre></td></tr></table></figure><h3 id="while循环和do…while循环的区别"><a href="#while循环和do…while循环的区别" class="headerlink" title="while循环和do…while循环的区别"></a>while循环和do…while循环的区别</h3><p>while语句先判断后执行，循环体可能不执行。<br>do…while语句先执行后判断，循环体至少执行一次。</p><h2 id="关键字continue-break和return"><a href="#关键字continue-break和return" class="headerlink" title="关键字continue,break和return"></a>关键字continue,break和return</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ol><li>跳出switch语句。</li><li>当break关键字用于循环时，会终止循环</li><li>可用于父循环，给父循环起别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        b:for(int i&#x3D;1;i&lt;&#x3D;5;i++)&#123;</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;5;j++)&#123;</span><br><span class="line">                if(j%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    break b;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j+&quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">12</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ol><li>continue作用是结束本次循环，进入下一次循环。</li><li>可用于父循环，给父循环起别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        b:for(int i&#x3D;1;i&lt;&#x3D;5;i++)&#123;</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;5;j++)&#123;</span><br><span class="line">                if(j%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    continue b;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j+&quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1212121212</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ol><li>结束当前方法</li><li>结束当前方法并返回指定结果</li></ol><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>一个循环当另一个循环的循环体</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;九九乘法表</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        for(int i&#x3D;1;i&lt;&#x3D;9;i++)&#123;</span><br><span class="line">            for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;</span><br><span class="line">                System.out.print(j+&quot;*&quot;+i+&quot;&#x3D;&quot;+i*j+&quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*运算结果</span><br><span class="line">1*1&#x3D;1</span><br><span class="line">1*2&#x3D;22*2&#x3D;4</span><br><span class="line">1*3&#x3D;32*3&#x3D;63*3&#x3D;9</span><br><span class="line">1*4&#x3D;42*4&#x3D;83*4&#x3D;124*4&#x3D;16</span><br><span class="line">1*5&#x3D;52*5&#x3D;103*5&#x3D;154*5&#x3D;205*5&#x3D;25</span><br><span class="line">1*6&#x3D;62*6&#x3D;123*6&#x3D;184*6&#x3D;245*6&#x3D;306*6&#x3D;36</span><br><span class="line">1*7&#x3D;72*7&#x3D;143*7&#x3D;214*7&#x3D;285*7&#x3D;356*7&#x3D;427*7&#x3D;49</span><br><span class="line">1*8&#x3D;82*8&#x3D;163*8&#x3D;244*8&#x3D;325*8&#x3D;406*8&#x3D;487*8&#x3D;568*8&#x3D;64</span><br><span class="line">1*9&#x3D;92*9&#x3D;183*9&#x3D;274*9&#x3D;365*9&#x3D;456*9&#x3D;547*9&#x3D;638*9&#x3D;729*9&#x3D;81</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印1000内所有素数，每行5个</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int count&#x3D;0;</span><br><span class="line">        for(int i&#x3D;2;i&lt;&#x3D;1000;i++)&#123;</span><br><span class="line">            boolean flag&#x3D;true;</span><br><span class="line">            for(int j&#x3D;2;j&lt;&#x3D;i&#x2F;2;j++)&#123;</span><br><span class="line">                if(i%j&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    flag&#x3D;false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag&#x3D;&#x3D;true)&#123;</span><br><span class="line">                System.out.print(i+&quot;\t&quot;);</span><br><span class="line">                count++;</span><br><span class="line">                if(count%5&#x3D;&#x3D;0)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    count&#x3D;0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">235711</span><br><span class="line">1317192329</span><br><span class="line">3137414347</span><br><span class="line">5359616771</span><br><span class="line">7379838997</span><br><span class="line">101103107109113</span><br><span class="line">127131137139149</span><br><span class="line">151157163167173</span><br><span class="line">179181191193197</span><br><span class="line">199211223227229</span><br><span class="line">233239241251257</span><br><span class="line">263269271277281</span><br><span class="line">283293307311313</span><br><span class="line">317331337347349</span><br><span class="line">353359367373379</span><br><span class="line">383389397401409</span><br><span class="line">419421431433439</span><br><span class="line">443449457461463</span><br><span class="line">467479487491499</span><br><span class="line">503509521523541</span><br><span class="line">547557563569571</span><br><span class="line">577587593599601</span><br><span class="line">607613617619631</span><br><span class="line">641643647653659</span><br><span class="line">661673677683691</span><br><span class="line">701709719727733</span><br><span class="line">739743751757761</span><br><span class="line">769773787797809</span><br><span class="line">811821823827829</span><br><span class="line">839853857859863</span><br><span class="line">877881883887907</span><br><span class="line">911919929937941</span><br><span class="line">947953967971977</span><br><span class="line">983991997</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA概述（一）</title>
      <link href="2022/08/30/J1/"/>
      <url>2022/08/30/J1/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA概述（一）"><a href="#JAVA概述（一）" class="headerlink" title="JAVA概述（一）"></a>JAVA概述（一）</h1><h2 id="输出hello-world"><a href="#输出hello-world" class="headerlink" title="输出hello world"></a>输出hello world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>public</strong>：关键字，公共访问权限<br><strong>class</strong>：关键字，声明一个类<br><strong>HelloWorld</strong>:类名，与文件名一致<br>{} ：作用域，当前类的代码范围<br><strong>static</strong>：关键字，静态的<br><strong>void</strong>:关键字，返回结果为空<br><strong>main</strong>：方法名字，java程序入口方法<br>(String[] args):参数列表，表形参<br>System.out.println(“hello world”)：  </p><p>System.out.println()是将传递参数打印到控制台，并换行，这里参数为”hello world”   </p><p>System是<strong>final类</strong>，out是System的<strong>静态成员变量（静态成员字段）</strong>，类型为PrintStream，println是PrintStream类的一个方法，表示输出括号里的内容</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>若类是用public修饰，类名需与文件名一致；不是public修饰，可不一致。<br>一个java文件中可有多个类，但至多一个public类。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释不参与编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;单行注释</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">多行注释</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">文档注释（生成外部文档:javadoc -d 文件名.java）</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="关键字和标识符"><a href="#关键字和标识符" class="headerlink" title="关键字和标识符"></a>关键字和标识符</h2><p><strong>关键字</strong>被java赋予特定含义的单词<br><strong>标识符</strong>：给类，接口，变量等起名时使用的字符序列，由字母，数字，$和_组成，不能以数字开头，不能是关键字，区别大小写。<br><strong>标识符的规范</strong>：</p><ul><li>包名：包名要求全部小写</li><li>类名：首字母大写，多个单词相连，每个单词首字母要大写</li><li>方法和变量：一个单词首字母小写，多个单词除了第一个单词，其余单词首字母全部大写</li><li>常量：所有字母大写，用_连接</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是一个可以改变的量，可存放数据。<br><strong>变量的组成</strong>：数据类型，变量名，值  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建变量的方式</span><br><span class="line">        &#x2F;&#x2F;1.先声明再赋值</span><br><span class="line">        &#x2F;&#x2F;数据类型 变量名</span><br><span class="line">        &#x2F;&#x2F;变量名&#x3D;值；</span><br><span class="line">        &#x2F;&#x2F;例</span><br><span class="line">        int a;&#x2F;&#x2F;int表示整型，占用4个字节</span><br><span class="line">        a &#x3D; 10;</span><br><span class="line">        &#x2F;&#x2F;2.声明赋值同时进行</span><br><span class="line">        &#x2F;&#x2F;数据类型 变量名 &#x3D; 值；</span><br><span class="line">        &#x2F;&#x2F;例</span><br><span class="line">        int b &#x3D; 20;</span><br><span class="line">        &#x2F;&#x2F;变量的使用</span><br><span class="line">        a&#x3D;a+b;&#x2F;&#x2F;将a和b的值加起来再赋给a</span><br><span class="line">        System.out.println(a);&#x2F;&#x2F;30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p><strong>成员变量</strong>：变量定义在类的内部，方法的外部。<br><strong>局部变量</strong>：定义在类的方法内部的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    &#x2F;&#x2F;成员变量</span><br><span class="line">    int a&#x3D;10;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;局部变量</span><br><span class="line">        String blog&#x3D;&quot;ljsblog&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区别</strong>：</p><ol><li>定义的位置的不同，因此作用域不同</li><li>成员变量有初始值，局部变量没有</li><li>成员变量有访问权限修饰符，局部变量没有，局部变量的权限即所在方法的权限</li></ol><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>常量</strong>不可以改变的量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public final int WEEKDAYS&#x3D;7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型<ul><li>整数：byte(占用1个字节) short(2) int(4) long(8)</li><li>小数: float(4) double(8)</li><li>布尔: boolean(1)</li><li>字符：char(2)</li></ul></li><li>引用数据类型<ul><li>数组</li><li>类</li><li>接口</li></ul></li></ul><p><strong>注</strong>：存放long数据时，需在数据后加L或l；存放float数据时，需在数据后加F或f。</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ol><li>自动类型转换<ul><li>顺序：byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</li></ul></li><li>强制类型转换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;1.自动类型转换</span><br><span class="line">        int a&#x3D;10;</span><br><span class="line">        long b&#x3D;a;&#x2F;&#x2F;int类型的10，自动变为long型</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2. 强制类型转换</span><br><span class="line">        byte c&#x3D;(byte)a;&#x2F;&#x2F;有可能因为精度的损失导致数据不准确</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;算数运算符</span><br><span class="line">+   -   *   &#x2F;   &#x2F;&#x2F;加减乘除</span><br><span class="line">%               &#x2F;&#x2F;取模（余数）</span><br><span class="line">++  --          &#x2F;&#x2F;若是放在变量前面，则先运算，后自增（减），若是放在变量后面，则先自增（减），后运算</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;赋值运算符</span><br><span class="line">&#x3D;               &#x2F;&#x2F;直接赋值</span><br><span class="line">+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;  &#x2F;&#x2F;其中a+&#x3D;b等价于a&#x3D;a+b,其他同理</span><br><span class="line">&#x2F;&#x2F;+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;不会做类型转换</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;关系运算符</span><br><span class="line">&#x2F;&#x2F;会产生布尔值的结果</span><br><span class="line">&gt;大于   &lt;小于   &gt;&#x3D;大于等于  &lt;&#x3D;小于等于</span><br><span class="line">&#x3D;&#x3D;等于&#x2F;&#x2F;判断是否等于不是&#x3D;，而是&#x3D;&#x3D;</span><br><span class="line">!&#x3D;不等于</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;逻辑运算符，两个布尔类型的操作数或表达式进行逻辑比较</span><br><span class="line">&amp;   &#x2F;&#x2F;逻辑与，只有两边都是true，结果才是true，只有有一边是false，结果就是false</span><br><span class="line">|   &#x2F;&#x2F;逻辑或，只要有一遍是true，结果就是true</span><br><span class="line">^   &#x2F;&#x2F;异或，两边结果相同为false，不同为true</span><br><span class="line">!   &#x2F;&#x2F;逻辑非，false变true,true变false</span><br><span class="line">&amp;&amp;  &#x2F;&#x2F;短路与，与逻辑与运算逻辑相同，区别在于短路与只要做左边为false，不会执行右边表达式，结果一定是false，相比之下效率更高</span><br><span class="line">||  &#x2F;&#x2F;短路或，与逻辑或运算逻辑相同，区别在于，只要左边是true，结果就是true，右边不执行</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三元运算符</span><br><span class="line">布尔表达式？结果1：结果2    &#x2F;&#x2F;表达式结果为真，获得结果1；表达式结果为假，获得结果2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;位运算符，运算符两边不是布尔值表达式，而是数值，则此时是位运算，0为false，1为true</span><br><span class="line">&amp;   &#x2F;&#x2F;按位与</span><br><span class="line">|   &#x2F;&#x2F;按位或</span><br><span class="line">^   &#x2F;&#x2F;异或</span><br><span class="line">~   &#x2F;&#x2F;按位取反，0变1,1变0</span><br><span class="line">&lt;&lt;  &#x2F;&#x2F;有符号的左移，低位补0</span><br><span class="line">&gt;&gt;  &#x2F;&#x2F;有符号的右移，高位补符号位</span><br><span class="line">&gt;&gt;&gt; &#x2F;&#x2F;无符号的右移，高位补0</span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>使用运算符连接变量或字面值，可得到一个最终结果</p><h2 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符+"></a>字符串连接符+</h2><p>运算的两边都是数值时，+为算数运算符。<br>当运算符的两边有一个是字符串，+为字符串连接符，会把另一边变成字符串连接，形成新的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int a&#x3D;1;</span><br><span class="line">        int b&#x3D;2;</span><br><span class="line">        int c&#x3D;3;</span><br><span class="line">        String word&#x3D;&quot;hello&quot;;</span><br><span class="line">        System.out.println(word + a + b + c);&#x2F;&#x2F;hello123</span><br><span class="line">        System.out.println(a + word + b + c);&#x2F;&#x2F;1hello23</span><br><span class="line">        System.out.println(a + b + c + word);&#x2F;&#x2F;6hello</span><br><span class="line">        System.out.println(word + (a + b + c));&#x2F;&#x2F;hello6</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><p>程序运行中，可在控制台（终端）手动录入数据，再让程序继续运行。<br><strong>导包语法</strong>：<br>import 包名.类名;<br>将外部class文件的功能引入到自身文件中。<br><strong>顺序</strong>：</p><ol><li>导入import java.util.Scanner</li><li>声明Scanner类型的变量</li><li>使用Scanner类中对应的方法：<ul><li>.nextInt()  获得整数</li><li>.nextDouble()   //获得小数</li><li>.next()   //获得字符串</li><li>.next().charAt(0) //获得单个字符</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class HelloWorld&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;输入整型</span><br><span class="line">&#x2F;&#x2F;        Scanner scanner1&#x3D;new Scanner(System.in);</span><br><span class="line">&#x2F;&#x2F;        System.out.print(&quot;请输入整数:&quot;);</span><br><span class="line">&#x2F;&#x2F;        int a&#x3D;scanner1.nextInt();</span><br><span class="line">&#x2F;&#x2F;        System.out.println(&quot;整数为&quot;+a);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;输入小数</span><br><span class="line">&#x2F;&#x2F;        Scanner scanner2&#x3D;new Scanner(System.in);</span><br><span class="line">&#x2F;&#x2F;        System.out.print(&quot;请输入小数：&quot;);</span><br><span class="line">&#x2F;&#x2F;        double d&#x3D;scanner2.nextDouble();</span><br><span class="line">&#x2F;&#x2F;        System.out.println(&quot;小数为&quot;+d);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;输入字符串</span><br><span class="line">&#x2F;&#x2F;        Scanner scanner3&#x3D;new Scanner(System.in);</span><br><span class="line">&#x2F;&#x2F;        System.out.print(&quot;请输入字符串:&quot;);</span><br><span class="line">&#x2F;&#x2F;        String s&#x3D;scanner3.next();</span><br><span class="line">&#x2F;&#x2F;        System.out.println(&quot;字符串为&quot;+s);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;输入字符</span><br><span class="line">        Scanner scanner4 &#x3D; new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入字符：&quot;);</span><br><span class="line">        char c &#x3D; scanner4.next().charAt(0);</span><br><span class="line">        System.out.println(&quot;字符为&quot; + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预处理（十二-终）</title>
      <link href="2021/07/07/c12/"/>
      <url>2021/07/07/c12/</url>
      
        <content type="html"><![CDATA[<h1 id="预处理（十二-终）"><a href="#预处理（十二-终）" class="headerlink" title="预处理（十二-终）"></a>预处理（十二-终）</h1><h2 id="翻译环境和执行环境"><a href="#翻译环境和执行环境" class="headerlink" title="翻译环境和执行环境"></a>翻译环境和执行环境</h2><h3 id="翻译环境"><a href="#翻译环境" class="headerlink" title="翻译环境"></a>翻译环境</h3><p>在这个环境中源代码被转换为可执行的机器指令,就是把(.c)文件翻译成(.exe)文件。<br>一个C语言程序需要经过的四个步骤：编辑(.c)、编译(.obj)、链接(.exe)、运行。<br>而其中编译又分为:预编译（预处理）、编译、汇编。<br><img src="/2021/07/07/c12/%E8%BF%87%E7%A8%8B.png" alt="过程"><br><strong>预编译（预处理）</strong><br>源码中的所有预处理语句（#号开头的语句便是预处理语句，例如:#include）得到处理并删除注释。<br><strong>编译</strong><br>就是把C语言代码翻译成汇编代码。<br><strong>汇编</strong><br>把汇编代码翻译成二进制代码。<br><strong>链接</strong><br>但机器代码还是不能直接运行。所以链接器将处理合并目标代码，生成一个可执行目标文件，可以被加载到内存中，由系统执行。</p><h3 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h3><p>这个环境用于实际执行代码。  </p><ol><li>程序必须载入内存中。在有操作系统的环境中，一般这个由操作系统完成。在独立的环境中，程序的载入必须由手工安排，也可能是通过可执行代码置入只读内存来完成。</li><li>程序的执行开始。接着便调用main函数。</li><li>开始执行程序代码。这个时候程序将使用一个运行时堆栈（stack），存储函数的局部变量和返回地址。程序同时也可以使用静态（static）内存，存储在静态内存中的变量在程序的整个执行过程一直保留他们的值。</li><li>终止程序。正常终止main函数；也有可能是意外终止。</li></ol><h2 id="预编译（预处理）详解"><a href="#预编译（预处理）详解" class="headerlink" title="预编译（预处理）详解"></a>预编译（预处理）详解</h2><h3 id="预定义符号"><a href="#预定义符号" class="headerlink" title="预定义符号"></a>预定义符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__FILE__&#x2F;&#x2F;源文件的绝对路径</span><br><span class="line">__LINE__&#x2F;&#x2F;文件当前的行号</span><br><span class="line">__DATE__&#x2F;&#x2F;文件被编译的日期</span><br><span class="line">__TIME__&#x2F;&#x2F;文件被编译的时间</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%s\n&quot;,__FILE__);</span><br><span class="line">  printf(&quot;%d\n&quot;,__LINE__);</span><br><span class="line">  printf(&quot;%s\n&quot;,__DATE__);</span><br><span class="line">  printf(&quot;%s\n&quot;,__TIME__);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">d:\vc++2010\prac\prac\ss.c</span><br><span class="line">5</span><br><span class="line">Feb  7 2021</span><br><span class="line">22:29:26</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开头的就是预处理指令例如:  </span><br><span class="line">#define,#include,#pragma pack(),#if,#endif,#ifdef,#line</span><br></pre></td></tr></table></figure><h4 id="define定义标识符"><a href="#define定义标识符" class="headerlink" title="#define定义标识符"></a>#define定义标识符</h4><p>#define name stuff<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAX 100</span><br><span class="line">#define STR &quot;blog&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a&#x3D;MAX;</span><br><span class="line">  &#x2F;&#x2F;预处理完后变为</span><br><span class="line">  &#x2F;&#x2F;int a&#x3D;100;</span><br><span class="line">  printf(&quot;%d\n&quot;,a);&#x2F;&#x2F;100</span><br><span class="line">  printf(&quot;%s\n&quot;,STR);&#x2F;&#x2F;blog</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:在define定义标识符时，最后不要加;</p><h4 id="define定义宏"><a href="#define定义宏" class="headerlink" title="#define定义宏"></a>#define定义宏</h4><p>#define可以把参数替换到文本中，这种实现称为宏(macro)或定义宏(define macro)。<br><strong>宏的申明方式</strong>：<br>#define name(parament-list) stuff<br>parament-list是一个由逗号隔开的符号表，这些符号可能出现在stuff中。<br>参数列表的左括号必须与name紧邻<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SQU(x) x*x</span><br><span class="line">&#x2F;&#x2F;接收一个参数x</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a&#x3D;SQU(3);</span><br><span class="line">  &#x2F;&#x2F;预处理器会将3*3代替SQU(3)</span><br><span class="line">  printf(&quot;%d\n&quot;,a);&#x2F;&#x2F;9</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：宏的参数不是传参，而是替换<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SQU(x) x*x</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a&#x3D;SQU(3+1);</span><br><span class="line">  &#x2F;&#x2F;预处理将 3+1*3+1 代替SQU(3+1)，并不是(3+1)*(3+1)</span><br><span class="line">  &#x2F;&#x2F;所以a的值为7，而不是16</span><br><span class="line">  printf(&quot;%d\n&quot;,a);&#x2F;&#x2F;7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以为了避免这个问题，我们要给stuff加上括号(stuff)以及stuff中每个参数也加上括号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SQU(x) ((x)*(x))</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;SQU(3+1);</span><br><span class="line">&#x2F;&#x2F;预处理将 ((3+1)*(3+1)) 代替SQU(3+1)</span><br><span class="line">&#x2F;&#x2F;所以这次a的值为16</span><br><span class="line">printf(&quot;%d\n&quot;,a);&#x2F;&#x2F;16</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ol><li>宏参数和#define定义中可以出现其他#define的变量，但宏不能出现递归。</li><li>预处理器搜索#define定义的符号时，字符串常量的内容并不被搜索，通俗点讲，就是字符串常量的内容不会被替换。</li></ol><p><strong>#和##的区别</strong><br>#是将其后面的宏参数进行字符串化操作,并不替换。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define PRINT(x) printf(#x&quot;的值为%d\n&quot;,x)</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a&#x3D;10;</span><br><span class="line">  int b&#x3D;20;</span><br><span class="line">  PRINT(a);</span><br><span class="line">  &#x2F;&#x2F;printf(“a”“的值为%d\n”,x)替换PRINT(a)</span><br><span class="line">  PRINT(b);</span><br><span class="line">  &#x2F;&#x2F;printf(“b”“的值为%d\n”,x)替换PRINT(a)</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">a的值为10</span><br><span class="line">b的值为20</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>##是将它两边的符号合成一个符号。<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define CON(x,y) x##y</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int myblog2021&#x3D;100;</span><br><span class="line">  printf(&quot;%d\n&quot;,CON(myblog,2021));&#x2F;&#x2F;100</span><br><span class="line">  &#x2F;&#x2F;CON(myblog,2021)</span><br><span class="line">  &#x2F;&#x2F;myblog##2021</span><br><span class="line">  &#x2F;&#x2F;myblog2021</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="宏和函数"><a href="#宏和函数" class="headerlink" title="宏和函数"></a>宏和函数</h4><p><strong>区别</strong>  </p><ol><li>宏的参数与类型是无关的，只要对参数的操作合法,就可以使用于任何类型；函数的参数类型是固定的，如果参数的类型不同，就需要使用不同的函数，即使他们执行的任务是相同的。</li><li>宏可能会带来运算优先级的问题，导致运算结果出错；</li><li>宏的参数替换是直接替换的；而函数调用时会将实参的值传给形参；</li><li>宏是不方便调试的，因为宏是在编译之前进行（先用宏体替换宏名，再进行编译）；而函数是可以逐语句调试；</li><li>宏的参数是不占内存空间的，因为只做字符串的替换；而函数调用时参数之间的传递，所以占用内存；</li><li>宏的速度比函数速度快，因为函数有调用和返回时间的开销；</li><li>宏在传参时可以传类型，但是函数不能传类型；</li><li>宏不能递归，函数可以递归；</li><li>宏的代码长度很长（除去非常小的宏），每次使用时，宏代码都被插入到程序中，使得程序的长度大幅度增加；</li></ol><p><strong>命名约定</strong><br>宏名全部大写，函数名不要全部大写。</p><h4 id="undef"><a href="#undef" class="headerlink" title="#undef"></a>#undef</h4><p>用于移除一个宏定义。<br>#undef name<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAX 100</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%d\n&quot;,MAX);&#x2F;&#x2F;100</span><br><span class="line">#undef MAX</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h4><p>选择性的按照某种条件编译代码。<br>常见的条件编译指令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1</span><br><span class="line">#if 常量表达式</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">#endif</span><br><span class="line">&#x2F;&#x2F;常量表达式由预处理器求值。如：</span><br><span class="line">#define __DEBUG__ 1</span><br><span class="line">#if __DEBUG__</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2 多分支的条件编译</span><br><span class="line">#if</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">#elif</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3 判断是否被定义</span><br><span class="line">#if defined(symbol)</span><br><span class="line">&#x2F;&#x2F;等同于</span><br><span class="line">#ifdef symbol</span><br><span class="line"></span><br><span class="line">#if !defined(symbol)</span><br><span class="line">&#x2F;&#x2F;等同于</span><br><span class="line">#ifndef symbol</span><br></pre></td></tr></table></figure><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>#include指令可以使另外一个文件被编译。就像它实际出现于#include指令的地方一样。<br>替换方式:预处理器先删除这条指令,并用包含文件的内容替换。这样一个源文件被包含10次,那就实际被编译10次。</p><h5 id="头文件被包含方式"><a href="#头文件被包含方式" class="headerlink" title="头文件被包含方式"></a>头文件被包含方式</h5><p><strong>本地文件包含</strong><br><code>#include &quot;filename.h&quot;</code><br>先在源文件所在目录下查找,如果该头文件未找到,编译器就像查找库函数头文件一样在标准位置查找头文件。如果找不到就提示编译错误。<br><strong>库文件包含</strong><br><code>#include &lt;filename.h&gt;</code><br>编译器直接在标准位置查找头文件。如果找不到就提示编译错误。  </p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作（十一）</title>
      <link href="2021/07/05/c11/"/>
      <url>2021/07/05/c11/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作（十一）"><a href="#文件操作（十一）" class="headerlink" title="文件操作（十一）"></a>文件操作（十一）</h1><p>磁盘上的文件就是文件。<br>在程序设计中，我们所说的文件有两种：</p><ol><li>程序文件：包括源程序文件(后缀为.c),目标文件(.obj),可执行程序(.exe)。</li><li>数据文件：文件的内容是程序运行是读写的数据，比如程序运行需要从中读取数据的文件，或者输出内容的文件。</li></ol><p>本篇以数据文件为主</p><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>为了区分计算机中不同的文件，而给每个文件设定一个指定的名称，就是<strong>文件名</strong>。<br>文件名由<strong>文件主名</strong>和<strong>扩展名</strong>组成。  </p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>根据数据的组织形式，数据文件被称为<strong>文本文件</strong>或<strong>二进制文件</strong>。<br><strong>文本文件</strong>：如果要求在外存上一ASCII码的形式存储，则需要在存储前转换。以ASCII字符的形式存储的文件就是文本文件。<br><strong>二进制文件</strong>：数据在内存中以二进制的形式存储，如果不加转换的输出到外存，就是二进制文件。<br>字符在内存中以ASCII码的形式存储，数值型数据既可以用ASCII码的形式存储，也可以用二进制的形式存储。<br>如有整数10000，以ASCII码的形式输出到磁盘，每个字符一个字节，在磁盘中共占五个字节；以二进制的形式输出，则占4个字节。</p><h2 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h2><p>ANSIC(美国国家标准协会对C语言发布的标准)标准采用“缓冲文件系统”处理的数据文件的。<br><strong>缓冲文件系统</strong>是指系统自动地在内存中为程序中每一个正在使用的文件开辟一块<strong>文件缓冲区</strong>。<br>从内存向磁盘输出数据会先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘上；从磁盘向计算机读入数据，则从磁盘文件中读取数据输入到内存缓冲区（充满缓冲区），然后再从缓冲区逐个地将数据送到程序数据区（程序变量等）。<br>缓冲区的大小根据C编译系统决定的。<br><img src="/2021/07/05/c11/File-buffer.PNG" alt="File-buffer"></p><h2 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h2><p>文件指针即<strong>文件类型指针</strong>。<br>每个被使用的文件都在内存中开辟了一个相应的文件信息区，用来存放文件的相关信息（如文件名，文件状态，文件位置等），这些信息被放在一个结构体变量中。该结构体类型有系统声明的，FILE。<br>每打开一个文件，系统会根据文件的情况自动创建一个FILE结构的变量，并填充其中的信息。<br>一般都是通过一个FILE的指针来维护这个FILE结构的变量，这样使用其起来更加方便。<br>创建一个FILE*的指针变量：<br><code>FILE* pf;</code><br>pf是一个指向FILE类型数据的指针变量，可以使pf指向某个文件的文件信息区（结构体变量），通过文件信息区中的信息就能够访问该文件，也就是说，可以通过文件指针变量能够找到与它关联的文件。</p><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><p>文件在读写前应先打开文件，使用结束后应关闭文件。<br>fopen函数打开文件，fclose关闭文件。</p><h3 id="fopen函数"><a href="#fopen函数" class="headerlink" title="fopen函数"></a>fopen函数</h3><p>打开文件，在打开文件的同时，会返回一个FILE<em>的指针变量指向该文件,打开失败，返回空指针。<br><strong>格式</strong>：<br>FILE *fopen(const char *filename, const char *mode)<br>*</em>filename<strong>：要打开的文件名称<br>**mode</strong>：文件访问模式  </p><h3 id="fclose函数"><a href="#fclose函数" class="headerlink" title="fclose函数"></a>fclose函数</h3><p>关闭文件。<br><strong>格式</strong>：<br>int fclose(FILE *stream)<br><strong>stream</strong>：这是指向FILE对象的指针，该FILE对象指定了要被关闭的流。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br><span class="line">    &#x2F;&#x2F;以写的形式打开test.txt文件，若没有该文件，则系统自动创建一个</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)&#x2F;&#x2F;判断打开文件是否失败</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));&#x2F;&#x2F;打印失败原因</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pf);&#x2F;&#x2F;关闭文件</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件访问模式"><a href="#文件访问模式" class="headerlink" title="文件访问模式"></a>文件访问模式</h3><ul><li>“r”：打开一个用于读取的文件。该文件必须存在。  </li><li>“w”：创建一个用于写入的空文件。如果文件名称与已存在的文件相同，则会删除已有文件的内容，文件被视为一个新的空文件。  </li><li>“a”：追加到一个文件。写操作向文件末尾追加数据。如果文件不存在，则创建文件。  </li><li>“r+”：打开一个用于更新的文件，可读取也可写入。该文件必须存在。  </li><li>“w+”：创建一个用于读写的空文件。  </li><li>“a+”：打开一个用于读取和追加的文件。  </li></ul><h2 id="文件的顺序读写"><a href="#文件的顺序读写" class="headerlink" title="文件的顺序读写"></a>文件的顺序读写</h2><h3 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h3><p>把一个无符号字符写入到指定文件中，并把位置标识符往前移动。<br>int fputc(int char, FILE *stream)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    FILE* pfw&#x3D;fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br><span class="line">    if(pfw&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fputc(&#39;b&#39;,pfw);</span><br><span class="line">    fputc(&#39;l&#39;,pfw);</span><br><span class="line">    fputc(&#39;o&#39;,pfw);</span><br><span class="line">    fputc(&#39;g&#39;,pfw);</span><br><span class="line">    fclose(pfw);</span><br><span class="line">    pfw&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*test.txt内容：</span><br><span class="line">blog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h3><p>从指定的文件一个无符号字符，并把位置标识符往前移动。<br><strong>格式</strong>：<br>int fgetc(FILE *stream)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    FILE* pfr&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pfr&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%c&quot;,fgetc(pfr));</span><br><span class="line">    printf(&quot;%c&quot;,fgetc(pfr));</span><br><span class="line">    printf(&quot;%c&quot;,fgetc(pfr));</span><br><span class="line">    printf(&quot;%c&quot;,fgetc(pfr));</span><br><span class="line">    fclose(pfr);</span><br><span class="line">    pfr&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">blog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h3><p>从指定的文件读取一行。<br><strong>格式</strong>：<br>char *fgets(char <em>str, int n, FILE *stream)<br>*</em>str**:指向字符数组的指针，该数组存储了要读取的字符串。<br><strong>n</strong>:这是要读取的最大字符数（包括最后的空字符）。通常是使用以str传递的数组长度。<br><strong>stream</strong>:这是指向FILE对象的指针，该FILE对象标识了要从中读取字符的流。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[100]&#x3D;&#123;0&#125;;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(s,100,pf);</span><br><span class="line">    printf(&quot;%s\n&quot;,s);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">blog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：fgets读取时会将换行也读进来</p><h3 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h3><p>把字符串写入到指定的流stream中。<br><strong>格式</strong>：<br>int fputs(const char *str, FILE *stream)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[100]&#x3D;&#123;0&#125;;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fputs(&quot;my&quot;,pf);</span><br><span class="line">    fputs(&quot;blog&quot;,pf);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*test.txt内容：</span><br><span class="line">myblog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h3><p>sprintf是把格式化数据输出成字符串<br><strong>格式</strong>:<br>int fprintf(FILE *stream, const char *format, …)<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    char s[10];</span><br><span class="line">    float f;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct A a1&#x3D;&#123;10,&quot;myblog&quot;,3.14&#125;;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;    </span><br><span class="line">    fprintf(pf,&quot;%d %s %f&quot;,a1.i,a1.s,a1.f);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*test.txt内容：</span><br><span class="line">10 myblog 3.140000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h3><p>sscanf是从字符串中读取格式化的数据<br><strong>格式</strong>:<br>int fscanf(FILE *stream, const char *format, …)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    char s[10];</span><br><span class="line">    float f;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct A a1&#x3D;&#123;0&#125;;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fscanf(pf,&quot;%d %s %f&quot;,&amp;(a1.i),a1.s,&amp;(a1.f));</span><br><span class="line">    printf(&quot;%d %s %f\n&quot;,a1.i,a1.s,a1.f);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">10 myblog 3.140000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h2><h3 id="fseek和ftell"><a href="#fseek和ftell" class="headerlink" title="fseek和ftell"></a>fseek和ftell</h3><p><strong>fseek</strong>根据文件指针的位置和偏移量来定位文件指针。<br><em>格式</em>：<br>int fseek(FILE *stream, long int offset, int origin);<br><strong>fell</strong>返回文件指针相对于起始位置的偏移量。<br><em>格式</em>：<br>long int ftell(FILE *stream)<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文件内容为：myblog</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(pf,-3,SEEK_END);&#x2F;&#x2F;SEEL_END表示文件末尾</span><br><span class="line">    i&#x3D;ftell(pf);</span><br><span class="line">    printf(&quot;%d\n&quot;,i);&#x2F;&#x2F;3</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h3><p>让文件指针回到起始位置。<br>void rewind(FILE *stream)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(pf,-3,SEEK_END);</span><br><span class="line">    rewind(pf);</span><br><span class="line">    i&#x3D;ftell(pf);</span><br><span class="line">    printf(&quot;%d\n&quot;,i);&#x2F;&#x2F;0</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件结束判断feof函数"><a href="#文件结束判断feof函数" class="headerlink" title="文件结束判断feof函数"></a>文件结束判断feof函数</h2><p>feof函数应用于当文件读取结束时，判断是读取失败结束，还是遇到文件尾结束。  </p><ol><li>文本文件读取是否结束，看返回值是否为EOF(fgetc)或NULL(fgets)。</li><li>二进制文件的读取结束判断，判断返回值是否小于实际要读的个数。</li></ol><p>int feof(FILE *stream)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文件内容为myblog</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">    char s;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    while((s&#x3D;fgetc(pf))!&#x3D;EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(s);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    if(ferror(pf))</span><br><span class="line">    &#x2F;&#x2F;ferror:如果设置了与流关联的错误标识符，该函数返回一个非零值，否则返回一个零值。</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;error\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(feof(pf))</span><br><span class="line">    &#x2F;&#x2F;feof:如果设置了与流关联的文件结束标识符时，该函数返回一个非零值，否则返回零。</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;end of file\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">myblog</span><br><span class="line"></span><br><span class="line">end of file</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态内存分配(十)</title>
      <link href="2021/07/01/c10/"/>
      <url>2021/07/01/c10/</url>
      
        <content type="html"><![CDATA[<h1 id="动态内存分配-十"><a href="#动态内存分配-十" class="headerlink" title="动态内存分配(十)"></a>动态内存分配(十)</h1><p>在不知道所需要的空间大小的情况下，这时就可以使用动态内存开辟。<br>当开辟的空间不再使用时，用free函数来释放calloc、malloc或realloc所分配的内存空间。</p><h2 id="动态内存函数"><a href="#动态内存函数" class="headerlink" title="动态内存函数"></a>动态内存函数</h2><h3 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h3><p>free函数是用来释放动态开辟的空间<br><strong>格式</strong>:<br>void free(void *ptr)<br><strong>free函数的头文件</strong>: stdlib.h</p><h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><p>malloc函数会在内存开辟一块连续可用的空间，并返回一个指向它的指针，若开辟失败，则返回NULL，所以malloc的返回值一定要检查。<br><strong>格式</strong>:<br>void *malloc(size_t size)<br><strong>头文件</strong>: stdlib.h<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    &#x2F;&#x2F;向内存申请10个整形空间</span><br><span class="line">    &#x2F;&#x2F;因为malloc的返回值的类型是void*，所以需要用(int*)将其转换化为int*类型</span><br><span class="line">    int* p&#x3D;(int*)malloc(10*sizeof(int));</span><br><span class="line">    &#x2F;&#x2F;检查开辟成功还是失败</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)&#x2F;&#x2F;判断指针是否为空，为空则代表开辟空间失败</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;打印错误原因</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;赋值并打印</span><br><span class="line">        for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i)&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,*(p+i));&#x2F;&#x2F;0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;释放空间</span><br><span class="line">    free(p);</span><br><span class="line">    &#x2F;&#x2F;此时，虽然空间被释放掉，但p依然指向那个地址，所以需要将p赋一个空指针</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><p>calloc函数会在内存开辟一块连续可用的空间，并返回一个指向它的指针。<br>与malloc的不同是，calloc会把开辟的空间的每个字节初始化为零。<br><strong>格式</strong>：<br>void *calloc(size_t nitems, size_t size)<br><strong>nitems</strong>：元素个数。<br><strong>size</strong>：元素大小。<br><strong>头文件</strong>： stdlib.h<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int* p&#x3D;(int*)calloc(10,sizeof(int));</span><br><span class="line">    &#x2F;&#x2F;向内存申请10个大小为int的空间并将每个字节初始化为0</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,*(p+i));&#x2F;&#x2F;0 0 0 0 0 0 0 0 0 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h3><p>realloc函数可以调整动态开辟空间的大小。<br>使用realloc函数的注意事项：  </p><ol><li>原有空间后有足够大的空间，就直接在原有内存后追加空间，原来空间内容不发生变化。</li><li>原有空间后没有足够大的空间，则另找一个合适大小的连续空间来使用，并将原内存的数据移动到新的空间，释放旧的内存，函数返回的将是一个新空间的地址。</li><li>需要用一个新的指针变量来接受realloc函数的返回值。</li></ol><p><strong>格式</strong>:<br>void <em>realloc(void *ptr, size_t size)<br>*</em>ptr<strong>：之前开辟的内存块地址<br>**size</strong>：调整后新大小<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int* p&#x3D;(int*)malloc(20);</span><br><span class="line">    &#x2F;&#x2F;使用malloc开辟了20个字节空间</span><br><span class="line">    int* p1&#x3D;NULL;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        for(i&#x3D;0;i&lt;5;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i)&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;希望有40个字节空间</span><br><span class="line">    p1&#x3D;(int*)realloc(p,40);</span><br><span class="line">    &#x2F;&#x2F;使用realloc调整内存空间为40个字节</span><br><span class="line">    if(p1!&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        p&#x3D;p1;</span><br><span class="line">        for(i&#x3D;5;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i)&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,*(p+i));&#x2F;&#x2F;0 1 2 3 4 5 6 7 8 9</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;释放内存</span><br><span class="line">    free(p);</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见的动态内存错误"><a href="#常见的动态内存错误" class="headerlink" title="常见的动态内存错误"></a>常见的动态内存错误</h3><p><strong>1.对NULL指针解引用操作</strong><br>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int* p&#x3D;(int*)malloc(40);</span><br><span class="line">    &#x2F;&#x2F;有可能malloc开辟空间失败返回的NULL</span><br><span class="line">    *p&#x3D;10;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.对动态开辟空间的越界访问</strong><br>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int* p&#x3D;(int*)malloc(10*sizeof(int));&#x2F;&#x2F;10个int</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;10;i++)&#x2F;&#x2F;越界</span><br><span class="line">    &#123;</span><br><span class="line">        *(p+i)&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.对非动态开辟的内存使用free释放</strong><br>错误示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdilb.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;10;</span><br><span class="line">    int* p&#x3D;&amp;a;</span><br><span class="line">    free(p);&#x2F;&#x2F;对非动态开辟的内存使用free释放</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.使用free函数释放动态开辟内存的一部分</strong><br>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int* p&#x3D;(int*)malloc(10*sizeof(int));</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *p++&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;p已经不在原来的位置了</span><br><span class="line">    free(p);</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.对同一块动态内存多次释放</strong><br>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int* p&#x3D;(int*)malloc(10*sizeof(int));</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    free(p);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.忘记释放动态开辟内存</strong><br>错误示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc(1);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柔性数组（C99）"><a href="#柔性数组（C99）" class="headerlink" title="柔性数组（C99）"></a>柔性数组（C99）</h2><p>在结构体内，结构体中的最后一个元素可以是未知大小的数组，而且有特定的形式[]或者[0]，叫做<strong>柔型数组</strong>成员<br><strong>注</strong>：  </p><ul><li>结构体中柔性数组成员前面必须至少有一个成员</li><li>在计算结构体大小时，不包含柔性数组成员</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int arr[];</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    struct S* p&#x3D;(struct S*)malloc(sizeof(struct S)+5*sizeof(int));</span><br><span class="line">    struct S* p1&#x3D;NULL;</span><br><span class="line">p-&gt;n&#x3D;1;</span><br><span class="line">    if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;arr[i]&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">    p1&#x3D;(struct S*)realloc(p,44);</span><br><span class="line">    if(p1!&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        p&#x3D;p1;</span><br><span class="line">        for(i&#x3D;5;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;arr[i]&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,p-&gt;arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    p&#x3D;NULL;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><h3 id="1-栈区（stack）"><a href="#1-栈区（stack）" class="headerlink" title="1.栈区（stack）"></a>1.栈区（stack）</h3><p>栈区是一种先进后出的内存结构，由编译器自动分配释放，存放函数的返回值、局部变量、函数参数、返回地址等。  </p><h3 id="2-堆区-heap"><a href="#2-堆区-heap" class="headerlink" title="2.堆区(heap)"></a>2.堆区(heap)</h3><p>用于动态内存分配。一般由程序员分配释放，若程序员不释放，程序结束时由操作系统回收。  </p><h3 id="3-数据段-静态区-static"><a href="#3-数据段-静态区-static" class="headerlink" title="3.数据段(静态区)(static)"></a>3.数据段(静态区)(static)</h3><p>存放全局变量，静态数据，程序结束时由操作系统释放。  </p><h3 id="4-代码段"><a href="#4-代码段" class="headerlink" title="4.代码段"></a>4.代码段</h3><p>存放函数体的二进制代码。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类型（九）</title>
      <link href="2021/06/20/c9/"/>
      <url>2021/06/20/c9/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义类型（九）"><a href="#自定义类型（九）" class="headerlink" title="自定义类型（九）"></a>自定义类型（九）</h1><p><strong>自定义类型</strong>：结构体，枚举，联合</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。<br>结构体成员可以是标量，数组，指针，其他结构体。 </p><h3 id="结构的声明"><a href="#结构的声明" class="headerlink" title="结构的声明"></a>结构的声明</h3><p><strong>形式1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct 结构体名</span><br><span class="line">&#123;</span><br><span class="line">    成员列表;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例如描述一个学生</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct Stu</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;定义一个结构体类型</span><br><span class="line">    char name[20];&#x2F;&#x2F;姓名</span><br><span class="line">    short age;&#x2F;&#x2F;年龄</span><br><span class="line">    char sex[5];&#x2F;&#x2F;性别</span><br><span class="line">&#125;s1,s2,s3;&#x2F;&#x2F;创建了三个全局的结构体变量：s1,s2,s3</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct Stu s;&#x2F;&#x2F;创建局部结构体变量</span><br><span class="line">    return 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>形式2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">typedef struct 结构体名</span><br><span class="line">&#123;</span><br><span class="line">    成员列表;</span><br><span class="line">&#125;结构体别名;</span><br><span class="line">&#x2F;&#x2F;例如描述一个学生</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct Stu</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;定义一个结构体类型</span><br><span class="line">    char name[20];&#x2F;&#x2F;姓名</span><br><span class="line">    short age;&#x2F;&#x2F;年龄</span><br><span class="line">    char sex[5];&#x2F;&#x2F;性别</span><br><span class="line">&#125;Stu;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Stu s1;&#x2F;&#x2F;等同于struct Stu s1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊的声明(不建议用)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;匿名结构体类型</span><br><span class="line">struct</span><br><span class="line">&#123;</span><br><span class="line">    char name[20];</span><br><span class="line">    short age;</span><br><span class="line">    char sex[5];</span><br><span class="line">&#125;s;&#x2F;&#x2F;匿名结构体类型只能在这里创建变量</span><br></pre></td></tr></table></figure><h3 id="结构体的自引用"><a href="#结构体的自引用" class="headerlink" title="结构体的自引用"></a>结构体的自引用</h3><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误实例</span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    struct S next;&#x2F;&#x2F;死递归</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;正确实例</span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    struct S* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h3><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    char s[20];    </span><br><span class="line">&#125;;</span><br><span class="line">struct B</span><br><span class="line">&#123;</span><br><span class="line">    char c[20];</span><br><span class="line">    struct A a1;</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct B b1&#x3D;&#123;&quot;hello&quot;,&#123;30,&quot;hello world&quot;&#125;,50&#125;;&#x2F;&#x2F;初始化</span><br><span class="line">    &#x2F;&#x2F;访问结构体成员：</span><br><span class="line">    &#x2F;&#x2F;结构体变量.结构体成员</span><br><span class="line">    printf(&quot;%s\n&quot;,b1.c);</span><br><span class="line">    printf(&quot;%d\n&quot;,b1.a1.a);</span><br><span class="line">    printf(&quot;%s\n&quot;,b1.a1.s);</span><br><span class="line">    printf(&quot;%d\n&quot;,b1.d);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">hello</span><br><span class="line">30</span><br><span class="line">hello world</span><br><span class="line">50</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="结构体成员的访问"><a href="#结构体成员的访问" class="headerlink" title="结构体成员的访问"></a>结构体成员的访问</h3><ol><li>结构体变量.结构体成员</li><li>结构体指针-&gt;成员名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct Stu</span><br><span class="line">&#123;</span><br><span class="line">    char name[20];</span><br><span class="line">    int age;</span><br><span class="line">    char sex[5];</span><br><span class="line">&#125;Stu;</span><br><span class="line">void print1(Stu s)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,s.name);</span><br><span class="line">    printf(&quot;%d\n&quot;,s.age);</span><br><span class="line">    printf(&quot;%s\n&quot;,s.sex);</span><br><span class="line">&#125;</span><br><span class="line">void print2(Stu* p)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,p-&gt;name);</span><br><span class="line">    printf(&quot;%d\n&quot;,p-&gt;age);</span><br><span class="line">    printf(&quot;%s\n&quot;,p-&gt;sex);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Stu s1&#x3D;&#123;&quot;张三&quot;,20,&quot;男&quot;&#125;;&#x2F;&#x2F;初始化</span><br><span class="line">    print1(s1);</span><br><span class="line">    print2(&amp;s1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">张三</span><br><span class="line">20</span><br><span class="line">男</span><br><span class="line">张三</span><br><span class="line">20</span><br><span class="line">男</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;以上print1和print2两个函数尽量用print2</span><br><span class="line">&#x2F;&#x2F;传值时，相当于拷贝了一份结构体过去，传址时，是拷贝了一份地址，所以传址性能更高</span><br><span class="line">&#x2F;&#x2F;所以结构体传参时，尽量选择传结构体的地址</span><br></pre></td></tr></table></figure><h3 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h3><p><strong>对齐数</strong>就是编译器默认的对齐数与该成员大小的较小值。<br>vs默认对齐数为8。<br>gcc没有默认对齐数,直接将成员大小作为对齐数。<br><strong>对齐规则</strong>：  </p><ul><li>结构体第一个成员在与结构体变量偏移量为0的地址处。</li><li>其他成员要对齐到对齐数的整数倍的地址处。</li><li>结构体总大小为最大对齐数的整数倍。</li><li>嵌套结构体对齐到自己的最大对齐数的整数倍处，结构体的大小就是最大对齐数（含嵌套结构体的对齐数）的整数倍</li></ul><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    double d;&#x2F;&#x2F;double类型大小为8,vs默认对齐数为8，所以对齐数8</span><br><span class="line">    char a;&#x2F;&#x2F;char类型大小为1,vs默认对齐数为8，所以对齐数1</span><br><span class="line">    int i;&#x2F;&#x2F;int类型大小为4,vs默认对齐数为8，所以对齐数4</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct A));&#x2F;&#x2F;16</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int n;&#x2F;&#x2F;4&#x2F;8 4</span><br><span class="line">    char ch;&#x2F;&#x2F;1&#x2F;8 1</span><br><span class="line">    int t;&#x2F;&#x2F;4&#x2F;8 4</span><br><span class="line">&#125;;</span><br><span class="line">struct B</span><br><span class="line">&#123;</span><br><span class="line">    double d;&#x2F;&#x2F;8&#x2F;8 8</span><br><span class="line">    char a;&#x2F;&#x2F;1&#x2F;8 1</span><br><span class="line">    int i;&#x2F;&#x2F;4&#x2F;8 4</span><br><span class="line">    struct A a1;&#x2F;&#x2F;4&#x2F;8 4</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct B));&#x2F;&#x2F;32</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:为节省空间，在创建结构体时，尽量让占用空间小的成员集中在一起。</p><h3 id="pragma-pack"><a href="#pragma-pack" class="headerlink" title="#pragma pack()"></a>#pragma pack()</h3><p>当结构在对齐方式不合适时，可以更改默认对齐数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;#pragma pack()用来修改默认对齐数</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    double d;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct A));&#x2F;&#x2F;16</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改默认对齐数后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#pragma pack(2)&#x2F;&#x2F;设置默认对齐数为2，一般设的对齐数是2,4,8,16这样的数字</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    double d;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line">#pragma pack()&#x2F;&#x2F;恢复到原来默认的对齐数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct A));&#x2F;&#x2F;10</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C库宏-offsetof"><a href="#C库宏-offsetof" class="headerlink" title="C库宏:offsetof()"></a>C库宏:offsetof()</h3><p>offsetof()可以给出一个结构成员相对于结构开头的字节偏移量。<br><strong>头文件</strong>：stddef.h<br>offsetof(结构体名字, 成员名字)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stddef.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    double d;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,offsetof(struct A,d));&#x2F;&#x2F;0</span><br><span class="line">    printf(&quot;%d\n&quot;,offsetof(struct A,c));&#x2F;&#x2F;8</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h2><p>位段的声明和结构体类似，但有两点不同：</p><ol><li>位段的成员必须是int,unsigned int,signed int或者char。</li><li>位段的成员名后边有一个冒号和一个数字，数字代表多少二进制位。</li></ol><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><ol><li>位段的成员可以是int,unsigned int,signed int或者char。</li><li>位段的空间上是按照需要以4个字节(int)或者1个字节(char)的方式来开辟的。</li><li>位段不具有跨平台性,注意可移植的程序应该避免使用位段。</li></ol><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">    int a:5;</span><br><span class="line">    int b:10;</span><br><span class="line">    int c:15;</span><br><span class="line">    int d:20;</span><br><span class="line">&#125;;</span><br><span class="line">struct B</span><br><span class="line">&#123;</span><br><span class="line">    char a:2;</span><br><span class="line">    char b:4;</span><br><span class="line">    char c:5;</span><br><span class="line">    char d:7;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct A));&#x2F;&#x2F;8</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(struct B));&#x2F;&#x2F;3</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：与结构体相比，位段可以很好的节省空间，但有跨平台的问题存在</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举就是一一列举。 </p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum　枚举名</span><br><span class="line">&#123;</span><br><span class="line">    枚举成员1,</span><br><span class="line">    枚举成员2,</span><br><span class="line">    ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第一个枚举成员的默认值为整型的0，后续枚举成员的值在前一个成员上加1。<br>也可以在定义枚举类型时改变枚举元素的值。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">enum Sex</span><br><span class="line">&#123;</span><br><span class="line">    MALE,&#x2F;&#x2F;0</span><br><span class="line">    FEMALE,&#x2F;&#x2F;1</span><br><span class="line">    SECRET&#x2F;&#x2F;2</span><br><span class="line">&#125;;</span><br><span class="line">enum color</span><br><span class="line">&#123;</span><br><span class="line">   BLUE,&#x2F;&#x2F;0</span><br><span class="line">   RED&#x3D;3,&#x2F;&#x2F;3</span><br><span class="line">   GREEN &#x2F;&#x2F;4</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d %d %d\n&quot;,MALE,FEMALE,SECRET);&#x2F;&#x2F;0 1 2</span><br><span class="line">    printf(&quot;%d %d %d\n&quot;,BLUE,RED,GREEN);&#x2F;&#x2F;0 3 4</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h2><p>联合是一种特殊的自定义数据类型，联合定义的变量包含一系列的成员,这些成员公用同一块空间，任何时候只能有一个成员带有值。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">union 联合名</span><br><span class="line">&#123;</span><br><span class="line">   成员列表;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判断大端小端</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int check()</span><br><span class="line">&#123;</span><br><span class="line">    union un</span><br><span class="line">    &#123;</span><br><span class="line">        int i;</span><br><span class="line">        char c;</span><br><span class="line">    &#125;u1;</span><br><span class="line">    u1.i&#x3D;1;</span><br><span class="line">    return u1.c;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int ret&#x3D;check();</span><br><span class="line">    if(ret&#x3D;&#x3D;1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;小端\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;大端\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="联合体的大小"><a href="#联合体的大小" class="headerlink" title="联合体的大小"></a>联合体的大小</h3><ul><li>联合的大小至少是最大成员的大小</li><li>当最大成员的大小不是最大对齐数的整数倍时，对齐到最大对齐数的整数倍</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">union un</span><br><span class="line">&#123;</span><br><span class="line">    int a;&#x2F;&#x2F;大小为4,对齐数为:4&#x2F;8 4</span><br><span class="line">    char s[7];&#x2F;&#x2F;数组的对齐数看数组元素</span><br><span class="line">    &#x2F;&#x2F;大小为7,对齐数为:1&#x2F;8 1</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(union un));&#x2F;&#x2F;8</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符函数和内存函数（八）</title>
      <link href="2021/06/17/c8/"/>
      <url>2021/06/17/c8/</url>
      
        <content type="html"><![CDATA[<h1 id="字符函数和内存函数（八）"><a href="#字符函数和内存函数（八）" class="headerlink" title="字符函数和内存函数（八）"></a>字符函数和内存函数（八）</h1><ul><li>求字符串长度<ul><li>strlen</li></ul></li><li>长度不受限制的字符串函数<ul><li>strcpy</li><li>strcat</li><li>strcmp</li></ul></li><li>字符串查找<ul><li>strstr</li><li>strtok</li></ul></li><li>字符操作</li><li>内存操作函数<ul><li>memcpy</li><li>memmove</li><li>memset</li><li>memcmp</li></ul></li></ul><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="求字符串长度的字符串函数"><a href="#求字符串长度的字符串函数" class="headerlink" title="求字符串长度的字符串函数"></a>求字符串长度的字符串函数</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p><strong>格式</strong>：<br>size_t strlen(const char*str)<br>其中<strong>size_t</strong>是无符号整型<br>从字符串的开头位置依次向后计数，遇见\0结束，最终计算的字符串长度不包括\0。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int len&#x3D;strlen(&quot;myblog&quot;);</span><br><span class="line">    printf(&quot;%d\n&quot;,len);&#x2F;&#x2F;6</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：strlen函数的返回类型是无符号整型（unsigned int）<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    if(strlen(&quot;my&quot;)-strlen(&quot;myblog&quot;)&gt;0)</span><br><span class="line">    &#x2F;&#x2F;两个无符号数相减依然是无符号数</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;大于零\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;小于等于零\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;大于零</span><br></pre></td></tr></table></figure><h5 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">unsigned int my_strlen(const char* str)</span><br><span class="line">&#123;</span><br><span class="line">int c&#x3D;0;</span><br><span class="line">while(*str!&#x3D;&#39;\0&#39;)</span><br><span class="line">&#123;</span><br><span class="line">str++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int len&#x3D;0;</span><br><span class="line">len&#x3D;my_strlen(&quot;ljsblog&quot;);&#x2F;&#x2F;7</span><br><span class="line">printf(&quot;%d\n&quot;,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长度不受限的字符串函数"><a href="#长度不受限的字符串函数" class="headerlink" title="长度不受限的字符串函数"></a>长度不受限的字符串函数</h3><h4 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h4><p>对字符串进行复制<br><strong>格式</strong><br>char* strcpy(char* strDestination, const char* strSource);<br>注：  </p><ul><li>源字符串必须以’\0’结束</li><li>目标空间必须足够大</li><li>目标空间可以修改</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a1[]&#x3D;&quot;abcdef&quot;;</span><br><span class="line">    &#x2F;&#x2F;a1: &#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;d&#39; &#39;e&#39; &#39;f&#39; &#39;\0</span><br><span class="line">    char a2[]&#x3D;&quot;my&quot;;</span><br><span class="line">    &#x2F;&#x2F;a2: &#39;m&#39; &#39;y&#39; &#39;\0&#39;</span><br><span class="line">    strcpy(a1,a2);</span><br><span class="line">    &#x2F;&#x2F;a1变为&#39;m&#39; &#39;y&#39; &#39;\0&#39; &#39;d&#39; &#39;e&#39; &#39;f&#39; &#39;\0&#39;</span><br><span class="line">    printf(&quot;%s\n&quot;,a1);&#x2F;&#x2F;my</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟实现-1"><a href="#模拟实现-1" class="headerlink" title="模拟实现"></a>模拟实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char* my_strcpy(char *dest,const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char* cp&#x3D;dest;</span><br><span class="line">while( *dest++ &#x3D; *src++ )</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">return cp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr1[]&#x3D;&quot;ljsblog&quot;;</span><br><span class="line">char arr2[]&#x3D;&quot;mybl&quot;;</span><br><span class="line">my_strcpy(arr1,arr2);</span><br><span class="line">printf(&quot;%s\n&quot;,arr1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h4><p>将两个字符串连接起来，目的字符串末尾的\0会被覆盖，源字符串末尾的\0会一起被复制过去，最终的字符串只有一个\0。<br><strong>格式</strong>:<br>char* strcat(char* strDestination, const char* strSource);<br>注：</p><ul><li>目的空间必须足够大</li><li>源字符串必须以’\0’结束</li><li>目标空间可以修改</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a1[10]&#x3D;&quot;my&quot;;</span><br><span class="line">    &#x2F;&#x2F;a1: &#39;m&#39; &#39;y&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39;</span><br><span class="line">    char a2[]&#x3D;&quot;blog&quot;;</span><br><span class="line">    &#x2F;&#x2F;a2: &#39;b&#39; &#39;l&#39; &#39;o&#39; &#39;g&#39; &#39;\0&#39;</span><br><span class="line">    strcat(a1,a2);</span><br><span class="line">    &#x2F;&#x2F;a1: &#39;m&#39; &#39;y&#39; &#39;b&#39; &#39;l&#39; &#39;o&#39; &#39;g&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39; &#39;\0&#39;</span><br><span class="line">    printf(&quot;%s\n&quot;,a1);&#x2F;&#x2F;myblog</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟实现-2"><a href="#模拟实现-2" class="headerlink" title="模拟实现"></a>模拟实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char* my_strcat(char *dest,const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char* cp&#x3D;dest;</span><br><span class="line">while(*dest !&#x3D;0 )</span><br><span class="line">&#123;</span><br><span class="line">dest++;</span><br><span class="line">&#125;</span><br><span class="line">while( *dest++ &#x3D; *src++ )</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">return cp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr1[256]&#x3D;&quot;ljs&quot;;</span><br><span class="line">char arr2[]&#x3D;&quot;blog&quot;;</span><br><span class="line">my_strcat(arr1,arr2);</span><br><span class="line">printf(&quot;%s\n&quot;,arr1);&#x2F;&#x2F;ljsblog</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><p>对两个字符串进行比较，据ASCII编码依次比较str1和str2的每一个字符，直到出现不等的字符，或者遇到\0。<br><strong>格式</strong>:<br>int strcmp(const char* stri1，const char* str2);<br>返回值：</p><ul><li>返回值&lt;0，表示str1小于str2。</li><li>返回值&gt;0，表示str2小于str1。</li><li>返回值=0，表示str1等于str2。</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char* a1&#x3D;&quot;abcd&quot;;</span><br><span class="line">    char* a2&#x3D;&quot;bbcd&quot;;</span><br><span class="line">    int ret&#x3D;strcmp(a1,a2);</span><br><span class="line">    printf(&quot;%d\n&quot;,ret);</span><br><span class="line">    &#x2F;&#x2F;在vs编译器下返回值为-1，其他编译器结果可能有所不同</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟实现-3"><a href="#模拟实现-3" class="headerlink" title="模拟实现"></a>模拟实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int my_strcmp(const char *str1,const char *str2)</span><br><span class="line">&#123;</span><br><span class="line">while(*str1 &#x3D;&#x3D; *str2)</span><br><span class="line">&#123;</span><br><span class="line">if(*str1 &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line">return (*str1 - *str2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr1[]&#x3D;&quot;ljsblog&quot;;</span><br><span class="line">char arr2[]&#x3D;&quot;ljmblog&quot;;</span><br><span class="line">int ret&#x3D;0;</span><br><span class="line">ret&#x3D;my_strcmp(arr1,arr2);</span><br><span class="line">printf(&quot;%d\n&quot;,ret);&#x2F;&#x2F;6</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长度受限的字符串函数"><a href="#长度受限的字符串函数" class="headerlink" title="长度受限的字符串函数"></a>长度受限的字符串函数</h3><h4 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h4><p>把源字符串复制到目的字符串，最多复制n个字符。<br>当源字符串的长度小于n时，复制完字符串后，在目标的后边追加0，直到n个。<br><strong>格式</strong>:<br>char *strncpy(char *dest, const char *src, size_t n)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a1[]&#x3D;&quot;abblog&quot;;</span><br><span class="line">    char a2[]&#x3D;&quot;my&quot;;</span><br><span class="line">    strncpy(a1,a2,2);</span><br><span class="line">    printf(&quot;%s\n&quot;,a1);&#x2F;&#x2F;myblog</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h4><p>把源字符串所指向的字符串的前n个字符追加到目标字符串的结尾并自动补0。<br>注：若次数n大于源字符串长度，将源字符串追加到目标字符串并且补0后，剩下的次数忽略不计。<br>例如:<br>char *strncat(char *dest, const char *src, size_t n)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a1[10]&#x3D;&quot;my&quot;;</span><br><span class="line">    char a2[]&#x3D;&quot;blog&quot;;</span><br><span class="line">    strncat(a1,a2,4);</span><br><span class="line">    printf(&quot;%s\n&quot;,a1);&#x2F;&#x2F;myblog</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h4><p>把str1和str2进行比较，比较到出现不一样的字符或者一个字符串结束或者n个字符全部比较完。<br><strong>格式</strong>：<br>int strncmp(const char *str1, const char *str2, size_t n)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char* a1&#x3D;&quot;abcdsd&quot;;</span><br><span class="line">    char* a2&#x3D;&quot;abcdef&quot;;</span><br><span class="line">    int ret&#x3D;strncmp(a1,a2,4);</span><br><span class="line">    printf(&quot;%d\n&quot;,ret);&#x2F;&#x2F;0</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><p>返回在字符串str1中查找第一次出现字符串str2的位置。<br>如果str1中不存在str2，则返回NULL。<br><strong>格式</strong>：<br>char *strstr(const char *str1, const char *str2)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr1[]&#x3D;&quot;ljsblogblog&quot;;</span><br><span class="line">char arr2[]&#x3D;&quot;bl&quot;;</span><br><span class="line">char *ret&#x3D;strstr(arr1,arr2);</span><br><span class="line">if(ret &#x3D;&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不存在\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%s\n&quot;,ret);&#x2F;&#x2F;blogblog</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模拟实现-4"><a href="#模拟实现-4" class="headerlink" title="模拟实现"></a>模拟实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char* my_strstr(char* str1,char* str2)</span><br><span class="line">&#123;</span><br><span class="line">    char *s1&#x3D;str1;</span><br><span class="line">    char *s2&#x3D;str2;</span><br><span class="line">    char *s&#x3D;str1;</span><br><span class="line">    if(*str2&#x3D;&#x3D;0)</span><br><span class="line">    &#123;</span><br><span class="line">        return s1;</span><br><span class="line">    &#125;</span><br><span class="line">    while(*s)</span><br><span class="line">    &#123;</span><br><span class="line">        s1&#x3D;s;</span><br><span class="line">        s2&#x3D;str2;</span><br><span class="line">        while((*s1 !&#x3D; 0) &amp;&amp; (*s2 !&#x3D; 0) &amp;&amp; (*s1&#x3D;&#x3D;*s2))</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            s2++;</span><br><span class="line">        &#125;</span><br><span class="line">        if(*s2&#x3D;&#x3D;0)</span><br><span class="line">        &#123;</span><br><span class="line">            return s;            </span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char arr1[]&#x3D;&quot;ljsblogblog&quot;;</span><br><span class="line">char arr2[]&#x3D;&quot;bl&quot;;</span><br><span class="line">char *ret&#x3D;my_strstr(arr1,arr2);</span><br><span class="line">if(ret &#x3D;&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不存在\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%s\n&quot;,ret);&#x2F;&#x2F;blogblog</span><br><span class="line">&#125;</span><br><span class="line">    return 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h4><p>分解字符串为一组字符串,str为要分解的字符串，delim为分隔符字符（如果传入字符串，则传入的字符串中每个字符均为分割符）。<br>首次调用时，str指向要分解的字符串，之后的调用要把str设成NULL。<br>如果字符串中不存在标记或者不存在更多的标记，则返回NULL指针。<br><strong>格式</strong>：<br>char *strtok(char *str, const char *delim)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a1[]&#x3D;&quot;ab.cd#ef.gh&quot;;</span><br><span class="line">    char* a2&#x3D;&quot;.#&quot;;</span><br><span class="line">char* ret&#x3D;NULL;</span><br><span class="line">    for(ret&#x3D;strtok(a1,a2);ret!&#x3D;NULL;ret&#x3D;strtok(NULL,a2))</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ef</span><br><span class="line">gh</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="错误信息报告"><a href="#错误信息报告" class="headerlink" title="错误信息报告"></a>错误信息报告</h3><h4 id="strerror"><a href="#strerror" class="headerlink" title="strerror"></a>strerror</h4><p>返回错误码所对应的错误信息<br><strong>格式</strong>：<br>char *strerror(int errnum)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf&#x3D;fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">    if(pf&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,strerror(errno));</span><br><span class="line">        &#x2F;&#x2F;errno用来存储错误代码，当库函数在执行过程中发生错误时，就会将错误码写入到errno中</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;打开成功\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">No such file or directory</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="内存函数"><a href="#内存函数" class="headerlink" title="内存函数"></a>内存函数</h2><h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><p>从str2复制n个字节到str1。<br><strong>格式</strong>：<br>void *memcpy(void *str1, const void *str2, size_t n)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a1[]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">    int a2[5]&#x3D;&#123;0&#125;;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    memcpy(a2,a1,sizeof(a1));</span><br><span class="line">    for(i&#x3D;0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;a2[%d]&#x3D;%d\n&quot;,i,a2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">a2[0]&#x3D;1</span><br><span class="line">a2[1]&#x3D;2</span><br><span class="line">a2[2]&#x3D;3</span><br><span class="line">a2[3]&#x3D;4</span><br><span class="line">a2[4]&#x3D;5</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h3><p>从str2复制n个字符到str1，但与memcpy不同的是，memmove可以处理重叠内存的复制。<br><strong>格式</strong>：<br>void *memmove(void *str1, const void *str2, size_t n)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    memmove(arr+2,arr,16);</span><br><span class="line">    for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;arr[%d]&#x3D;%d\n&quot;,i,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">arr[0]&#x3D;1</span><br><span class="line">arr[1]&#x3D;2</span><br><span class="line">arr[2]&#x3D;1</span><br><span class="line">arr[3]&#x3D;2</span><br><span class="line">arr[4]&#x3D;3</span><br><span class="line">arr[5]&#x3D;4</span><br><span class="line">arr[6]&#x3D;7</span><br><span class="line">arr[7]&#x3D;8</span><br><span class="line">arr[8]&#x3D;9</span><br><span class="line">arr[9]&#x3D;10</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp"></a>memcmp</h3><p>把str1和str2的前n个字节进行比较。<br><strong>格式</strong>：<br>int memcmp(const void *str1, const void *str2, size_t n)<br>返回值：</p><ul><li>返回值&lt;0，表示str1小于str2。</li><li>返回值&gt;0，表示str1大于str2。</li><li>返回值=0，表示str1等于str2。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a1[]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">    int a2[]&#x3D;&#123;1,2,4,4,5&#125;;</span><br><span class="line">    int ret&#x3D;memcmp(a1,a2,sizeof(a1));</span><br><span class="line">    printf(&quot;%d\n&quot;,ret);&#x2F;&#x2F;-1</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><p>将字符c复制到参数str所指向的空间的前n个字节。<br><strong>格式</strong>：<br>void *memset(void *str, int c, size_t n)<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[8]&#x3D;&quot;myblog&quot;;</span><br><span class="line">memset(a,&#39;c&#39;,7);</span><br><span class="line">printf(&quot;%s\n&quot;,a);</span><br><span class="line">    &#x2F;&#x2F;ccccccc</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-指针练习</title>
      <link href="2021/06/05/pointer-practice/"/>
      <url>2021/06/05/pointer-practice/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言-指针练习"><a href="#C语言-指针练习" class="headerlink" title="C语言-指针练习"></a>C语言-指针练习</h1><p>以下皆在32位平台，地址的大小在32位平台下是4个字节，在64位平台下是8个字节<br>数组名是首元素的地址，但以下两种情况例外：  </p><ol><li>sizeof(数组名) - 数组名表示整个数组</li><li>&amp;数组名 - 数组名表示整个数组  </li></ol><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="整型数组"><a href="#整型数组" class="headerlink" title="整型数组"></a>整型数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int a[]&#x3D;&#123;1,2,3,4&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;sizeof(数组名)，数组名表示整个数组，4*4&#x3D;16。</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a+0));&#x2F;&#x2F;4 </span><br><span class="line">&#x2F;&#x2F;数组名表示首元素地址，a+0还是数组首元素地址，地址的大小在32位平台下是4个字节。</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*a));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;数组名表示首元素地址,*a表示首元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;数组名表示首元素地址，a+1表示第二个元素的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[1]));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;下标从0开始，a[1]表示第二个元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;数组名，数组名表示整个数组，&amp;a表示整个数组的地址，但只要是地址，在32位平台下就是4个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*&amp;a));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;&amp;a表示整个数组的地址，*&amp;a表示整个数组，整个数组的大小为16</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a表示整个数组的地址,&amp;a+1表示跳过这个数组，但还是地址，所以是4个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a[0]));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;首元素地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;第二个元素地址</span><br></pre></td></tr></table></figure><h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">char a[]&#x3D;&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a));&#x2F;&#x2F;6</span><br><span class="line">&#x2F;&#x2F;sizeof计算整个数组大小 6*1&#x3D;6</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a+0));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;a是首元素地址，a+0还是首元素地址，地址的大小在32位平台下是4个字节。</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*a));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;数组名表示数组首元素地址，*a表示首元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[1]));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;a[1]第二个元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a整个数组的地址，但还是地址，4个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a+1跳过整个数组后的地址，还是地址，4个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a[0]+1第二个元素地址，4个字节</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;strlen函数从字符串的开头位置依次向后计数，遇见\0结束，最终计算的字符串长度不包括\0，strlen的参数是地址。</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a+0));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(*a));&#x2F;&#x2F;错误，strlen要的参数是地址</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a[1]));&#x2F;&#x2F;错误，strlen要的参数是地址</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a+1));&#x2F;&#x2F;随机值-6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a[0]+1));&#x2F;&#x2F;随机值-1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">char a[]&#x3D;&quot;abcdef&quot;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a));&#x2F;&#x2F;7</span><br><span class="line">&#x2F;&#x2F;sizeof(a)计算整个数组的大小,&quot;&quot;里面的字符串最后自动加\0,所以为7个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a+0));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;a+0首元素地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*a));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;*a首元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[1]));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;a[1]第二个元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a整个数组的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a+1跳过整个数组后的地址，只要是地址，在32位平台下就是4个字节</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;a[0]第一个元素的地址，&amp;a[0]+1第二个元素的地址</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;strlen函数从字符串的开头位置依次向后计数，遇见\0结束，最终计算的字符串长度不包括\0，strlen的参数是地址。</span><br><span class="line">&#x2F;&#x2F;&quot;&quot;里面的字符串最后自动加\0</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a+0));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(*a));&#x2F;&#x2F;错误，strlen要的参数是地址</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(a[1]));&#x2F;&#x2F;错误，strlen要的参数是地址</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a+1));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;a[0]+1));&#x2F;&#x2F;5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">char *p&#x3D;&quot;abcdef&quot;;&#x2F;&#x2F;把常量字符串的第一个字符&#39;a&#39;的地址存放到p中。</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(p));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;指针变量p的大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(p+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;p+1得到&#39;b&#39;的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*p));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;*p 第一个字符&#39;a&#39;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(p[0]));&#x2F;&#x2F;1</span><br><span class="line">&#x2F;&#x2F;p[0] 第一个字符&#39;a&#39;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;p));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;取出p的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;p+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;跳过p后的地址还是地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;p[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;&amp;p[0]：&#39;a&#39;的地址，&amp;p[0]+1：&#39;b&#39;的地址，还是地址</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;,strlen(p));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(p+1));&#x2F;&#x2F;5</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(*p));&#x2F;&#x2F;错误</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(p[0]));&#x2F;&#x2F;错误</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;p));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;p+1));&#x2F;&#x2F;随机值</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(&amp;p[0]+1));&#x2F;&#x2F;5</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int a[3][4]&#x3D;&#123;0&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a));&#x2F;&#x2F;48</span><br><span class="line">&#x2F;&#x2F;数组总大小3*4*4</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[0][0]));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;数组第一行第一个元素的大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[0]));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;数组第一行的总大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;a[0]表示第一行的数组名，数组名代表数组首元素地址，所以a[0]就是第一行第一个元素的地址，所以a[0]+1代表数组第一行第二个元素的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*(a[0]+1)));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;数组第一行第二个元素</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;a表示数组第一行（首元素）的地址，a+1表示数组的第二行的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*(a+1)));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;a+1表示数组的第二行的地址，*a数组第二行的总大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&amp;a[0]+1));&#x2F;&#x2F;4</span><br><span class="line">&#x2F;&#x2F;数组第二行的地址</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*(&amp;a[0]+1)));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;数组第二行的总大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(*a));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;数组第一行的总大小</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(a[3]));&#x2F;&#x2F;16</span><br><span class="line">&#x2F;&#x2F;sizeof里面的内容不参与运算，只看里面内容的类型</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构体A类型的变量大小为20字节</span><br><span class="line">&#x2F;&#x2F;p值为0x100000。下方表达式的值为多少</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct A</span><br><span class="line">&#123;</span><br><span class="line">  int n;</span><br><span class="line">  char *pc;</span><br><span class="line">  short sh;</span><br><span class="line">  char a[2];</span><br><span class="line">  short s[4];</span><br><span class="line">&#125;* p;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  p&#x3D;(struct A*)0x100000;</span><br><span class="line">  printf(&quot;%p\n&quot;,p+0x1);&#x2F;&#x2F;0x100014</span><br><span class="line">  &#x2F;&#x2F;结构体A类型的变量大小为20字节,20转为16进制为0x14</span><br><span class="line">  &#x2F;&#x2F;0x100000+0x14&#x3D;&#x3D;0x100014</span><br><span class="line">  printf(&quot;%p\n&quot;,(unsigned long)p+0x1);&#x2F;&#x2F;0x100001</span><br><span class="line">  &#x2F;&#x2F;0x100000转化为十进制为1048576</span><br><span class="line">  &#x2F;&#x2F;1048576+1&#x3D;&#x3D;1048577转化为16进制为0x100001</span><br><span class="line">  printf(&quot;%p\n&quot;,(unsigned int*)p+0x1);&#x2F;&#x2F;0x100004</span><br><span class="line">  &#x2F;&#x2F;unsigned int类型为4个字节</span><br><span class="line">  &#x2F;&#x2F;0x100000+4&#x3D;&#x3D; 0x100004</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当前机器为小端存储模式</span><br><span class="line">&#x2F;&#x2F;打印结果是什么？</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a[4] &#x3D; &#123;1,2,3,4&#125;;</span><br><span class="line">  &#x2F;&#x2F;小端存储模式，数组存放在内存中的样子为：</span><br><span class="line">  &#x2F;&#x2F;01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00</span><br><span class="line">  int *ptr1 &#x3D; (int*)(&amp;a+1);</span><br><span class="line">  int *ptr2 &#x3D; (int*)((int)a+1);</span><br><span class="line">  &#x2F;&#x2F;(int)a将a强制转换成整数，(int)a+1就是整数+1</span><br><span class="line">  &#x2F;&#x2F;(int*)((int)a+1)相当于地址向后偏移一个字节</span><br><span class="line">  &#x2F;&#x2F;00 00 00 02</span><br><span class="line">  printf(&quot;%x,%x\n&quot;,ptr1[-1],*ptr2);&#x2F;&#x2F;4,2000000</span><br><span class="line">  &#x2F;&#x2F;ptr1[-1]&#x3D;&#x3D;*(ptr1+(-1))&#x3D;&#x3D;*(ptr1-1)</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印结果是什么？</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a[3][2]&#x3D;&#123;(0,1),(2,3),(4,5)&#125;;</span><br><span class="line">  &#x2F;&#x2F;逗号表达式    1     3     5</span><br><span class="line">  int *p;</span><br><span class="line">  p&#x3D;a[0];</span><br><span class="line">  &#x2F;&#x2F;a[0]代表a[0][0]地址</span><br><span class="line">  printf(&quot;%d&quot;,p[0]);&#x2F;&#x2F;1</span><br><span class="line">  &#x2F;&#x2F;p[0]&#x3D;&#x3D;*(p+0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印结果是什么？</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a[2][5]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  int *ptr1&#x3D;(int*)(&amp;a+1);</span><br><span class="line">  &#x2F;&#x2F;&amp;a取整个数组的地址，&amp;a+1跳过数组的地址</span><br><span class="line">  int *ptr2&#x3D;(int*)(*(a+1));</span><br><span class="line">  &#x2F;&#x2F;a是a[0]的地址，a+1是a[1]的地址，*(a+1)表示a[1]</span><br><span class="line">  &#x2F;&#x2F;a[1]表示a[1][0]的地址</span><br><span class="line">  printf(&quot;%d,%d\n&quot;,*(ptr1-1),*(ptr2-1));&#x2F;&#x2F;10，5</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印结果是什么？</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char* a[]&#x3D;&#123;&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;&#125;;</span><br><span class="line">char** ap[]&#x3D;&#123;a+3,a+2,a+1,a&#125;;</span><br><span class="line">char*** app&#x3D;ap;</span><br><span class="line">printf(&quot;%s\n&quot;,**++app);&#x2F;&#x2F;third</span><br><span class="line">  &#x2F;&#x2F;++app是ap[1]的地址，*++app是ap[1]:a+2，a+2是a[2]的地址，**++app是a[2]</span><br><span class="line">printf(&quot;%s\n&quot;,*--*++app+3);&#x2F;&#x2F;st</span><br><span class="line">  &#x2F;&#x2F;此时app是ap[1]的地址</span><br><span class="line">  &#x2F;&#x2F;++app是ap[2]的地址,*++app是ap[2]:a+1,a+1是a[1]的地址，--*++app是a[0]的地址</span><br><span class="line">  &#x2F;&#x2F;*--*++app是a[0]:first,*--*++app+3是st</span><br><span class="line">printf(&quot;%s\n&quot;,*app[-2]+3);&#x2F;&#x2F;rth</span><br><span class="line">  &#x2F;&#x2F;此时app是ap[2]的地址</span><br><span class="line">  &#x2F;&#x2F;*app[-2]等同于*(*(app-2)),*app[-2]为a[3]:fourth,*app[-2]+3为rth</span><br><span class="line">printf(&quot;%s\n&quot;,app[-1][-1]+1);&#x2F;&#x2F;econd</span><br><span class="line">  &#x2F;&#x2F;此时app是ap[2]的地址</span><br><span class="line">  &#x2F;&#x2F;app[-1][-1]等同于*(*(app-1)-1),app[-1][-1]为a[1]:second,app[-1][-1]+1是econd</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针（七）</title>
      <link href="2021/05/27/c7/"/>
      <url>2021/05/27/c7/</url>
      
        <content type="html"><![CDATA[<h1 id="指针（七）"><a href="#指针（七）" class="headerlink" title="指针（七）"></a>指针（七）</h1><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针</strong>就是变量，用来存放内存单元的地址<br>存放在指针中的值都被当成地址处理<br>指针在32位平台大小是4个字节，指针在64位平台大小是8个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%d\n&quot;,sizeof(char*));&#x2F;&#x2F;4</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(short*));&#x2F;&#x2F;4</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(int*));&#x2F;&#x2F;4</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(float*));&#x2F;&#x2F;4</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(double*));&#x2F;&#x2F;4</span><br></pre></td></tr></table></figure><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>一.指针类型决定了指针进行解引用操作的时候，能访问空间的大小。<br>例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int* p;    *p能访问4个字节</span><br><span class="line">char* p;   *p能访问1个字节 </span><br><span class="line">double* p; *p能访问8个字节</span><br></pre></td></tr></table></figure><p>二.指针类型决定了指针向前或者向后走一步的距离。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;0;</span><br><span class="line">int *pi&#x3D;&amp;a;</span><br><span class="line">char *pc&#x3D;&amp;a;</span><br><span class="line">printf(&quot;%p\n&quot;,pi);&#x2F;&#x2F;010FFEC4</span><br><span class="line">printf(&quot;%p\n&quot;,pi+1);&#x2F;&#x2F;010FFEC8</span><br><span class="line">printf(&quot;%p\n&quot;,pc);&#x2F;&#x2F;010FFEC4</span><br><span class="line">printf(&quot;%p\n&quot;,pc+1);&#x2F;&#x2F;010FFEC5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int* p;    p+1--&gt;4 </span><br><span class="line">char* p;   p+1--&gt;1</span><br><span class="line">double* p; p+1--&gt;8</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>void* 类型的指针可以接受任意类型的地址</li><li>void* 类型的指针不能进行解引用操作</li><li>void* 类型的指针不能进行加减整数的操作</li></ul><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>野指针就是指针指向的位置是不可知的（随机的，不正确的，没有明确限制的）  </p><h4 id="野指针由来"><a href="#野指针由来" class="headerlink" title="野指针由来"></a>野指针由来</h4><p>一.局部变量没有初始化  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误示例</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int *p;&#x2F;&#x2F;指针变量如果未初始化，其值是随机的</span><br><span class="line">*p&#x3D;20;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二.指针越界访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误示例</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[10]&#x3D;&#123;0&#125;;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">int* p&#x3D;arr;</span><br><span class="line">for(i&#x3D;0;i&lt;11;i++)</span><br><span class="line">&#123;</span><br><span class="line">*(p+i)&#x3D;i;&#x2F;&#x2F;当指针指向超出arr范围时，p就是野指针</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三.指针指向的空间释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误示例</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int* Wild_Pointer()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;1;</span><br><span class="line">    return &amp;a;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int *p&#x3D;Wild_Pointer();&#x2F;&#x2F;空间已经被释放了</span><br><span class="line">    *p&#x3D;10;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何规避野指针"><a href="#如何规避野指针" class="headerlink" title="如何规避野指针"></a>如何规避野指针</h4><ol><li>指针初始化  </li><li>小心指针越界  </li><li>指针指向空间释放即使置NULL(NULL和0的值都是一样的，但是为了目的和用途及容易识别的原因，NULL用于指针和对象，0用于数值)  </li><li>指针使用之前检查有效性</li></ol><h3 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h3><h4 id="指针加减整数"><a href="#指针加减整数" class="headerlink" title="指针加减整数"></a>指针加减整数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">    int *p&#x3D;arr;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int sz&#x3D;sizeof(arr)&#x2F;sizeof(arr[0]);</span><br><span class="line">    for(i&#x3D;0;i&lt;sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;a[%d]&#x3D;%d\n&quot;,i,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*结果为</span><br><span class="line">a[0]&#x3D;1</span><br><span class="line">a[1]&#x3D;2</span><br><span class="line">a[2]&#x3D;3</span><br><span class="line">a[3]&#x3D;4</span><br><span class="line">a[4]&#x3D;5</span><br><span class="line">a[5]&#x3D;6</span><br><span class="line">a[6]&#x3D;7</span><br><span class="line">a[7]&#x3D;8</span><br><span class="line">a[8]&#x3D;9</span><br><span class="line">a[9]&#x3D;10</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="指针减指针"><a href="#指针减指针" class="headerlink" title="指针减指针"></a>指针减指针</h4><p>指针减指针时，两个指针必须在同一个空间内，例如；在一个数组内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">    int *p&#x3D;arr;</span><br><span class="line">    printf(&quot;%d\n&quot;,&amp;arr[9]-&amp;arr[0]);&#x2F;&#x2F;9</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针的关系运算"><a href="#指针的关系运算" class="headerlink" title="指针的关系运算"></a>指针的关系运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">    int *p&#x3D;arr;</span><br><span class="line">for(p&#x3D;&amp;arr[10];p&gt;&amp;arr[0];)</span><br><span class="line">&#123;</span><br><span class="line">*--p&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h3><p>一般用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a&#x3D;&#39;m&#39;;</span><br><span class="line">    char* p&#x3D;&amp;a;</span><br><span class="line">    *p&#x3D;&#39;y&#39;;</span><br><span class="line">    printf(&quot;%c\n&quot;,a);&#x2F;&#x2F;y</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char* p&#x3D;&quot;myblog&quot;;</span><br><span class="line">    &#x2F;&#x2F;这里是将常量字符串&quot;myblog&quot;首字符的地址放到了p中。</span><br><span class="line">    printf(&quot;%c\n&quot;,*p);</span><br><span class="line">    printf(&quot;%s\n&quot;,p);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果为</span><br><span class="line">m</span><br><span class="line">myblog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>指针数组就是存放指针的<strong>数组</strong>。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr1[]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">    int arr2[]&#x3D;&#123;6,5,4,6,7&#125;;</span><br><span class="line">    int arr3[]&#x3D;&#123;5,6,7,4,8&#125;;</span><br><span class="line">    int* arr[]&#x3D;&#123;arr1,arr2,arr3&#125;;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;5;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,*(arr[i]+j));</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">1 2 3 4 5</span><br><span class="line">6 5 4 6 7</span><br><span class="line">5 6 7 4 8</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>数组指针就是<strong>指针</strong>,指向数组的指针就是<strong>数组指针</strong>。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;int arr[10]&#x3D;&#123;0&#125;;</span><br><span class="line">    &#x2F;&#x2F;arr首元素地址</span><br><span class="line">    &#x2F;&#x2F;&amp;arr[0]首元素地址</span><br><span class="line">    &#x2F;&#x2F;&amp;arr整个数组的地址</span><br><span class="line">    int arr[5]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">    int (*p)[5]&#x3D;&amp;arr;&#x2F;&#x2F;p就是一个数组指针</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int* p1[10];&#x2F;&#x2F;存放指针的数组 </span><br><span class="line">int (*p2)[10];&#x2F;&#x2F;指向数组的指针</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char* arr[5];&#x2F;&#x2F;指针数组</span><br><span class="line">    char* (*pa)[5]&#x3D;&amp;arr;&#x2F;&#x2F;数组指针</span><br><span class="line">    &#x2F;&#x2F;*pa说明pa是个指针</span><br><span class="line">    &#x2F;&#x2F;[5]说明pa指向的数组有五个元素</span><br><span class="line">    &#x2F;&#x2F;char* 说明pa指向的数组的元素类型是char*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组指针的使用"><a href="#数组指针的使用" class="headerlink" title="数组指针的使用"></a>数组指针的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;参数是数组</span><br><span class="line">void print1(int arr[3][5],int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;5;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;参数是指针</span><br><span class="line">void print2(int (*pa)[5],int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;5;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,*(*(pa+i)+j));</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d &quot;,*(pa[i]+j));</span><br><span class="line">            &#x2F;&#x2F;printf(&quot;%d &quot;,(*(pa+i))[j]);</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d &quot;,pa[i][j]);</span><br><span class="line">            &#x2F;&#x2F; *(*(pa+i)+j) &#x3D;&#x3D; *(pa[i]+j) &#x3D;&#x3D; (*(pa+i)[j]) &#x3D;&#x3D; pa[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[3][5]&#x3D;&#123;&#123;3,5,7,4,1&#125;,&#123;5,6,7,6,4&#125;,&#123;6,7,3,5,6&#125;&#125;;</span><br><span class="line">    print1(arr,3,5);&#x2F;&#x2F;arr数组名，数组名就是首元素地址</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">print2(arr,3,5);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">3 5 7 4 1</span><br><span class="line">5 6 7 6 4</span><br><span class="line">6 7 3 5 6</span><br><span class="line"></span><br><span class="line">3 5 7 4 1</span><br><span class="line">5 6 7 6 4</span><br><span class="line">6 7 3 5 6</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><code>int arr[5];</code><br>arr是一个5个元素的整型数组<br><code>int *parr1[10];</code><br>parr1是一个指针数组，10个元素，每个元素的类型是int*<br><code>int (*parr2)[10];</code><br>parr2是一个指向数组的指针，该数组有10个元素，元素的类型是int，parr2是数组指针<br><code>int (*parr3[5])[10];</code><br>parr3是一个数组，数组有5个元素，每个元素是一个数组指针，数组指针指向的数组有10个元素，元素类型为int  </p><h3 id="数组传参"><a href="#数组传参" class="headerlink" title="数组传参"></a>数组传参</h3><h4 id="一维数组传参"><a href="#一维数组传参" class="headerlink" title="一维数组传参"></a>一维数组传参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;传参方式一</span><br><span class="line">void test(int arr[])</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;传参方式二</span><br><span class="line">void test(int arr[10])</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;传参方式三</span><br><span class="line">void test(int* arr)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10]&#x3D;&#123;0&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;传参方式一</span><br><span class="line">void test(int* arr[])</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;传参方式二</span><br><span class="line">void test(int **arr)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int* arr[10]&#x3D;&#123;0&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组传参"><a href="#二维数组传参" class="headerlink" title="二维数组传参"></a>二维数组传参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;传参方式一</span><br><span class="line">void test(int arr[3][5])</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;传参方式二</span><br><span class="line">void test(int arr[][5])</span><br><span class="line">&#x2F;&#x2F;注：二维数组传参时，行可以省略，列不能省略</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;传参方式三</span><br><span class="line">void test(int (*arr)[5])</span><br><span class="line">&#123;&#125;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[3][5]&#x3D;&#123;0&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针传参"><a href="#指针传参" class="headerlink" title="指针传参"></a>指针传参</h3><h4 id="一级指针传参"><a href="#一级指针传参" class="headerlink" title="一级指针传参"></a>一级指针传参</h4><p>当函数的参数为一级指针时，函数能接收什么参数？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void test(int *p)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    int* p&#x3D;&amp;a;</span><br><span class="line">    test(p);</span><br><span class="line">    test(&amp;a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void test(char *p)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a&#x3D;&#39;w&#39;;</span><br><span class="line">    char* p&#x3D;&amp;a;</span><br><span class="line">    test(p);</span><br><span class="line">    test(&amp;a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二级指针传参"><a href="#二级指针传参" class="headerlink" title="二级指针传参"></a>二级指针传参</h4><p>当函数的参数为二级指针时，函数能接收什么参数？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void test(int **p)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    int* p&#x3D;&amp;a;</span><br><span class="line">    int** pp&#x3D;&amp;p;</span><br><span class="line">    int* arr[10];</span><br><span class="line">    test(pp);</span><br><span class="line">    test(&amp;p);</span><br><span class="line">    test(arr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void test(char **p)</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a&#x3D;&#39;w&#39;;</span><br><span class="line">    char* p&#x3D;&amp;a;</span><br><span class="line">    char** pp&#x3D;&amp;p;</span><br><span class="line">    char* arr[10];</span><br><span class="line">    test(pp);</span><br><span class="line">    test(&amp;p);</span><br><span class="line">    test(arr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>指向函数的<strong>指针</strong>就是<strong>函数指针</strong>。<br><strong>&amp;函数名</strong>和<strong>函数名</strong>都是函数的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void test()</span><br><span class="line">&#123;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;%p\n&quot;,&amp;test);</span><br><span class="line">    printf(&quot;%p\n&quot;,test);</span><br><span class="line">    &#x2F;&#x2F;打印结果一样</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int (*pf)(int,int)&#x3D;add;</span><br><span class="line">    printf(&quot;%d\n&quot;,(*pf)(10,20));&#x2F;&#x2F;30</span><br><span class="line">    printf(&quot;%d\n&quot;,pf(10,20));&#x2F;&#x2F;30</span><br><span class="line">    &#x2F;&#x2F;pf前面的 * 没多大意义，加不加都一样</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void print(char* str)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;,str);&#x2F;&#x2F;myblog    </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    void (*p)(char*)&#x3D;print;</span><br><span class="line">    (*p)(&quot;myblog&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int sub(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x-y;</span><br><span class="line">&#125;</span><br><span class="line">int mul(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x*y;</span><br><span class="line">&#125;</span><br><span class="line">int div(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x&#x2F;y;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int (*pfa[4])(int,int)&#x3D;&#123;add,sub,mul,div&#125;;</span><br><span class="line">    for(i&#x3D;0;i&lt;4;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,pfa[i](6,3));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">18</span><br><span class="line">2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int (*pfa[4])(int,int);&#x2F;&#x2F;pfa是一个函数指针数组</span><br><span class="line">    int (*(*ppfa)[4])(int,int)&#x3D;&amp;pfa;</span><br><span class="line">    &#x2F;&#x2F;ppfa是一个数组指针，指针指向的数组有4个元素</span><br><span class="line">    &#x2F;&#x2F;每个元素的类型是一个函数指针int(*)(int,int)</span><br><span class="line">    &#x2F;&#x2F;ppfa是一个指向函数指针数组的指针</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void print(char* str)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;haha:%s\n&quot;,str);</span><br><span class="line">&#125;</span><br><span class="line">void test(void (*p)(char*))</span><br><span class="line">&#123;</span><br><span class="line">    p(&quot;myblog&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    test(print);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">haha:myblog</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据存储（六）</title>
      <link href="2021/05/22/c6/"/>
      <url>2021/05/22/c6/</url>
      
        <content type="html"><![CDATA[<h1 id="数据存储（六）"><a href="#数据存储（六）" class="headerlink" title="数据存储（六）"></a>数据存储（六）</h1><h3 id="C语言内置类型"><a href="#C语言内置类型" class="headerlink" title="C语言内置类型"></a>C语言内置类型</h3><p><code>char   //字符类型</code><br><code>short  //短整型类型</code><br><code>int    //整型类型</code><br><code>long   //长整型类型</code><br><code>float  //单精度浮点类型</code><br><code>double //双精度浮点类型</code><br><strong>类型的意义</strong>  </p><ol><li>决定数据在内存中所占的字节数</li><li>数据在内存中的存储方式</li></ol><h3 id="类型的基本归类"><a href="#类型的基本归类" class="headerlink" title="类型的基本归类"></a>类型的基本归类</h3><h4 id="整型类型"><a href="#整型类型" class="headerlink" title="整型类型"></a>整型类型</h4><p>char<br>char在内存中存储的是ASCII码，ASCII码是整数，所以char是整型  </p><blockquote><p>unsigned char<br>signed char  </p></blockquote><p>short  </p><blockquote><p>unsigned short [int]<br>signed short [int]  </p></blockquote><p>int  </p><blockquote><p>unsigned int<br>signed int  </p></blockquote><p>long  </p><blockquote><p>unsigned long [int]<br>signed long [int]  </p></blockquote><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>float,double</p><h4 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h4><blockquote><p>数组类型<br>结构体类型 struct<br>枚举类型 enum<br>联合类型 union  </p></blockquote><h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><blockquote><p>int* pi<br>char* pc<br>float* pf<br>void* pv  </p></blockquote><h4 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h4><p>void表示空类型（无类型）<br>通常用与函数返回类型，函数的参数，指针类型</p><h3 id="整型在内存中的存储"><a href="#整型在内存中的存储" class="headerlink" title="整型在内存中的存储"></a>整型在内存中的存储</h3><p>只要是整数，内存中存储的都是二进制的补码<br><strong>正数</strong>：<br>原码 反码 补码相同<br><strong>负数</strong>：<br>原码（直接列出该数的二进 制） -&gt; 反码（符号位不变，其他位按位取反） -&gt; 补码（反码+1）  </p><h3 id="大端小端存储模式"><a href="#大端小端存储模式" class="headerlink" title="大端小端存储模式"></a>大端小端存储模式</h3><p><strong>大端存储模式</strong>，别名<strong>大端字节序存储模式</strong>，是指数据的低位保存在内存的高地址中,而数据的高位,保存在内存的低地址中<br><strong>小端存储模式</strong>，别名<strong>小端字节序存储模式</strong>，是指数据的低位保存在内存的低地址中,而数据的高位,保存在内存的高地址中<br>例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判断当前机器是大端还是小端</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int sys()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;1;</span><br><span class="line">    return *(char*)&amp;a;</span><br><span class="line">    &#x2F;&#x2F;指针类型决定了指针解引用操作能访问几个字节，char*访问一个字节</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    if(sys()&#x3D;&#x3D;1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;小端\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;大端\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升"></a>整型提升</h3><p>C的整型算术运算总是至少以缺省整型类型的精度来进行的。为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为“整型提升”。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><strong>例1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a&#x3D;-1;</span><br><span class="line">    &#x2F;&#x2F;11111111</span><br><span class="line">    signed char b&#x3D;-1;</span><br><span class="line">    &#x2F;&#x2F;11111111</span><br><span class="line">    unsigned char c&#x3D;-1;</span><br><span class="line">    &#x2F;&#x2F;11111111</span><br><span class="line">    printf(&quot;a&#x3D;%d,b&#x3D;%d,c&#x3D;%d\n&quot;,a,b,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;a&#x3D;-1,b&#x3D;-1,c&#x3D;255</span><br></pre></td></tr></table></figure><p><strong>例2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a&#x3D;-128;</span><br><span class="line">    &#x2F;&#x2F;原：10000000000000000000000010000000</span><br><span class="line">    &#x2F;&#x2F;反：11111111111111111111111101111111</span><br><span class="line">    &#x2F;&#x2F;补：11111111111111111111111110000000</span><br><span class="line">    &#x2F;&#x2F;a为10000000</span><br><span class="line">    &#x2F;&#x2F;%u为无符号整型数</span><br><span class="line">    &#x2F;&#x2F;a整型提升后11111111111111111111111110000000</span><br><span class="line">    printf(&quot;%u\n&quot;,a);&#x2F;&#x2F;4294967168</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;-20;</span><br><span class="line">    &#x2F;&#x2F;原：100000000000000000000000000010100</span><br><span class="line">    &#x2F;&#x2F;反：111111111111111111111111111101011</span><br><span class="line">    &#x2F;&#x2F;补：111111111111111111111111111101100</span><br><span class="line">    unsigned int j&#x3D;10;</span><br><span class="line">    &#x2F;&#x2F;000000000000000000000000000001010</span><br><span class="line">    &#x2F;&#x2F;i+j为</span><br><span class="line">    &#x2F;&#x2F;111111111111111111111111111110110</span><br><span class="line">    &#x2F;&#x2F;%d有符号整数，所以将i+j的值格式化为有符号整数</span><br><span class="line">    &#x2F;&#x2F;补：111111111111111111111111111110110</span><br><span class="line">    &#x2F;&#x2F;反：111111111111111111111111111110101</span><br><span class="line">    &#x2F;&#x2F;原：100000000000000000000000000001010</span><br><span class="line">    printf(&quot;%d\n&quot;,i+j);&#x2F;&#x2F;-10</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数在内存中的存储"><a href="#浮点数在内存中的存储" class="headerlink" title="浮点数在内存中的存储"></a>浮点数在内存中的存储</h3><p>根据国际标准IEEE 754(IEEE二进位浮点数算术标准),任意一个二进制浮点数V可以表示成下面形式：  </p><blockquote><p>(-1)^S<em>M</em>2^E<br>(-1)^S表示符号位，当S为0，V为正数，当S为1，V为负数<br>M表有效数字，范围1&lt;=M&lt;2<br>2^E表指数位  </p></blockquote><p>举例：</p><blockquote><p>9.0<br>1001.0<br>(-1)^S * M * 2^E<br>(-1)^0 * 1.001 * 2^3   </p></blockquote><p><strong>IEEE 754规定</strong>：<br>对于32位的浮点数，最高1位是符号位S，接着8位是E，剩下23位为有效数字M<br>对于64位的浮点数，最高1位是符号位S，接着11位是E，剩下52位为有效数字M<br><img src="/2021/05/22/c6/IEEE754.jpg" alt="IEEE754"><br><strong>有效数字M</strong>：<br>IEEE 754规定,在计算机内部保存M时,默认这个数的第一位总是1,因此可以被舍去,只保存后面的xxxxxx分。比如保存1.01的时候,只保存01 ,等到读取的时候,再把第一位的1加上去。<br><strong>指数E</strong>：<br>E为一个无符号整数这意味着,如果E为8位,它的取值范围为0-255;<br>如果E为11位,它的取值范围为0-2047<br>但科学计数法中的E是可以出现负数的,所以IEEE 754规定,存入内存时E的真实值必须再加上一个中间数,对于8位的E,这个中间数是127;<br>对于11位的E,这个中间数是1023,比如,2^-1的E是-1,所以保存成32位浮点数时,必须保存成-1+127=126,即01111110。<br>例:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    float f&#x3D;5.5;</span><br><span class="line">    &#x2F;&#x2F;5.5</span><br><span class="line">    &#x2F;&#x2F;101.1</span><br><span class="line">    &#x2F;&#x2F;(-1)^0*1.011*2^2</span><br><span class="line">    &#x2F;&#x2F;S&#x3D;0,M&#x3D;1.011,E&#x3D;2</span><br><span class="line">    &#x2F;&#x2F;0 10000001 01100000000000000000000 </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指数E从内存中取出还可以在分成三种情况：</strong><br><strong>E不全为0或不全为1：</strong>即指数E的计算值减去127(或1023),得到真实值,再将有效数字M前加上第一位的1。<br><strong>E全为0：</strong>浮点数的指数E等于-126(或者-1022)即为真实值,有效数字M不再加上第一位的1,而是还原为0.xxxxxx小数。这样做是为了表示±0,以及接近于0的很小的数字。<br><strong>E全为0：</strong>表示±无穷大(正负取决于符号位s)。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n&#x3D;9;</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000001001</span><br><span class="line">    float* p&#x3D;(float*)&amp;n;</span><br><span class="line">    printf(&quot;n的值为:%d\n&quot;,n);&#x2F;&#x2F;9</span><br><span class="line">    &#x2F;&#x2F;0 00000000 00000000000000000001001</span><br><span class="line">    &#x2F;&#x2F;(-1)^0*0.00000000000000000001001*2^-126</span><br><span class="line">    printf(&quot;*p的值为:%f\n&quot;,*p);&#x2F;&#x2F;0.000000</span><br><span class="line">    *p&#x3D;9.0;</span><br><span class="line">    &#x2F;&#x2F;1001.0</span><br><span class="line">    &#x2F;&#x2F;(-1)^0*1.001*2^3</span><br><span class="line">    &#x2F;&#x2F;0 10000010 00100000000000000000000</span><br><span class="line">    &#x2F;&#x2F;1091567616</span><br><span class="line">    printf(&quot;n的值为:%d\n&quot;,n);&#x2F;&#x2F;1091567616</span><br><span class="line">    printf(&quot;*p的值为:%f\n&quot;,*p);&#x2F;&#x2F;9.000000</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*结果为</span><br><span class="line">n的值为:9</span><br><span class="line">*p的值为:0.000000</span><br><span class="line">n的值为:1091567616</span><br><span class="line">*p的值为:9.000000</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符（五）</title>
      <link href="2021/05/16/c5/"/>
      <url>2021/05/16/c5/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符（五）"><a href="#运算符（五）" class="headerlink" title="运算符（五）"></a>运算符（五）</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>算术操作符</li><li>移位操作符</li><li>位操作符</li><li>赋值操作符</li><li>单目操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>条件操作符</li><li>逗号表达式</li><li>其他操作符</li></ul><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><p><code>+  -   *   /   %</code><br>这几个操作符都是最基本的操作符，不做过多介绍，但要注意%只能用于整型。</p><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p><code>&gt;&gt;(右移操作符)     &lt;&lt;(左移操作符)</code><br>移位操作符移动的是二进制位  </p><h4 id="右移操作符"><a href="#右移操作符" class="headerlink" title="右移操作符"></a>右移操作符</h4><ol><li>算术右移：需要考虑符号位，右边丢弃，左边补原符号位  </li><li>逻辑右移，不需要考虑符号位，右边丢弃，左边补0</li></ol><p><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;16;</span><br><span class="line">    &#x2F;&#x2F;a</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000010000</span><br><span class="line">    &#x2F;&#x2F;a&gt;&gt;1</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000001000</span><br><span class="line">printf(&quot;%d\n&quot;,a&gt;&gt;1);&#x2F;&#x2F;打印结果为8</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左移操作符"><a href="#左移操作符" class="headerlink" title="左移操作符"></a>左移操作符</h4><p>左边丢弃。右边补0<br><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;6;</span><br><span class="line">    &#x2F;&#x2F;a</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000110</span><br><span class="line">    &#x2F;&#x2F;a&lt;&lt;1</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000001100</span><br><span class="line">    printf(&quot;%d\n&quot;,a&lt;&lt;1);&#x2F;&#x2F;12</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：  </p><ol><li>移位运算符的操作数必须是整数  </li><li>不要移动负数位</li></ol><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p><code>&amp;(按位与)   |(按位或)   ^(按位异或)</code><br>位操作符的操作数必须是整数<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&amp;按二进制位与</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;4;</span><br><span class="line">    int b&#x3D;6;</span><br><span class="line">    int c&#x3D;a&amp;b;</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000100</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000110</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000100</span><br><span class="line">    printf(&quot;%d\n&quot;,c);&#x2F;&#x2F;4</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;|按二进制位或</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;4;</span><br><span class="line">    int b&#x3D;6;</span><br><span class="line">    int c&#x3D;a|b;</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000100</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000110</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000110</span><br><span class="line">    printf(&quot;%d\n&quot;,c);&#x2F;&#x2F;6</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;^按二进制位异或</span><br><span class="line">&#x2F;&#x2F;相同为0，不同为1</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;4;</span><br><span class="line">    int b&#x3D;6;</span><br><span class="line">    int c&#x3D;a^b;</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000100</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000110</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000010</span><br><span class="line">    printf(&quot;%d\n&quot;,c);&#x2F;&#x2F;2</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;交换两个int变量，不能使用第三个变量</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    int b&#x3D;0;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    a&#x3D;a^b;</span><br><span class="line">    b&#x3D;a^b;</span><br><span class="line">    a&#x3D;a^b;</span><br><span class="line">    printf(&quot;a&#x3D;%d,b&#x3D;%d\n&quot;,a,b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">36 96</span><br><span class="line">a&#x3D;96,b&#x3D;36</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><p><code>=、 +=、 -=、 *=、 /=、 %=、 &amp;=、 ^=、 |=、 &lt;&lt;=、 &gt;&gt;=</code><br>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;10;</span><br><span class="line">a+&#x3D;2;&#x2F;&#x2F;相当于a&#x3D;a+2</span><br><span class="line">a&gt;&gt;&#x3D;1;&#x2F;&#x2F;相当于a&#x3D;a&gt;&gt;1</span><br><span class="line">a&amp;&#x3D;1;&#x2F;&#x2F;相当于a&#x3D;a&amp;1</span><br></pre></td></tr></table></figure><h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><p>只有一个操作数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!       &#x2F;&#x2F;逻辑反操作  </span><br><span class="line">-       &#x2F;&#x2F;负值   </span><br><span class="line">+       &#x2F;&#x2F;正值   </span><br><span class="line">&amp;       &#x2F;&#x2F;取地址</span><br><span class="line">sizeof  &#x2F;&#x2F;操作数的类型长度，以字节为单位</span><br><span class="line">~       &#x2F;&#x2F;对一个数的二进制按位取反  </span><br><span class="line">--      &#x2F;&#x2F;前置、后置--  </span><br><span class="line">++      &#x2F;&#x2F;前置、后置++  </span><br><span class="line">*       &#x2F;&#x2F;间接访问操作符，解引用操作符</span><br><span class="line">(类型)  &#x2F;&#x2F;强制类型转换</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>&amp;是取地址符，%p打印地址</li><li>++，–的前置和后置</li><li>数据在内存以补码形式存储，打印出来的是原码</li></ul><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&amp;，*p</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    int *p&#x3D;&amp;a;</span><br><span class="line">    printf(&quot;%p\n&quot;,p);&#x2F;&#x2F;打印a的地址</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;前置后置</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;10,b&#x3D;10;</span><br><span class="line">    printf(&quot;%d\n&quot;,a++);&#x2F;&#x2F;打印结果为10</span><br><span class="line">    printf(&quot;%d\n&quot;,++a);&#x2F;&#x2F;打印结果为12</span><br><span class="line">    printf(&quot;%d\n&quot;,b--);&#x2F;&#x2F;打印结果为10</span><br><span class="line">    printf(&quot;%d\n&quot;,--b);&#x2F;&#x2F;打印结果为8</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;取反</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000000000</span><br><span class="line">    &#x2F;&#x2F;按位取反后</span><br><span class="line">    &#x2F;&#x2F;11111111111111111111111111111111  -补码</span><br><span class="line">    &#x2F;&#x2F;11111111111111111111111111111110  -反码</span><br><span class="line">    &#x2F;&#x2F;10000000000000000000000000000001  -原码  -1    </span><br><span class="line">    printf(&quot;%d\n&quot;,~a);&#x2F;&#x2F;打印结果为-1 </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>这几个操作都是最基本的操作符，不多做介绍，但要注意别把=和==混淆。<br><code>==    &gt;=     &lt;=     &lt;     &gt;</code></p><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p><code>&amp;&amp;（逻辑与）   ||（逻辑或）</code><br>注意区分逻辑与和按位与，逻辑或和按位或  </p><blockquote><p>1&amp;2—&gt;0     1&amp;&amp;2—&gt;1<br>1|2—&gt;3     1||2—&gt;1  </p></blockquote><p>逻辑与若是左边为假，则结果直接为假，右边不会再算<br>逻辑或若是左边为真，则结果直接为真，右边不会再算<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;逻辑与</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;0,b&#x3D;1,c&#x3D;2,i;</span><br><span class="line">i&#x3D; a++ &amp;&amp; ++b &amp;&amp; ++c;</span><br><span class="line">printf(&quot;a&#x3D;%d,b&#x3D;%d,c&#x3D;%d\n&quot;,a,b,c);&#x2F;&#x2F;结果为a&#x3D;1,b&#x3D;1,c&#x3D;2 </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;逻辑或</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;1,b&#x3D;2,c&#x3D;3,i;</span><br><span class="line">i&#x3D; a++ || ++b || ++c;</span><br><span class="line">printf(&quot;a&#x3D;%d,b&#x3D;%d,c&#x3D;%d\n&quot;,a,b,c);&#x2F;&#x2F;结果为a&#x3D;2,b&#x3D;2,c&#x3D;3 </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><p><strong>格式</strong>:表达式1?表达式2:表达式3<br>表达式1为真，则执行表达式2，表达式1为假，则执行表达式3<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;3,b&#x3D;0;</span><br><span class="line">    b&#x3D;a&gt;5?-3:3;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    b&#x3D;a&gt;5?-3:3;</span><br><span class="line">    等同于</span><br><span class="line">    if(a&gt;5)</span><br><span class="line">    &#123;</span><br><span class="line">        b&#x3D;-3;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        b&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line">    *&#x2F;</span><br><span class="line">    printf(&quot;b&#x3D;%d\n&quot;,b);&#x2F;&#x2F;结果为3</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><p><strong>格式</strong>:表达式1,表达式2,表达式3,…表达式n<br>逗号表达式，就是用逗号隔开的多个表达式，从左向右依次执行，整个表达式的结果是最后一个表达式的结果。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;1;</span><br><span class="line">int b&#x3D;2;</span><br><span class="line">int c&#x3D;(a&gt;b,a&#x3D;b+8,a,b&#x3D;a+3);</span><br><span class="line">printf(&quot;c&#x3D;%d\n&quot;,c);&#x2F;&#x2F;c&#x3D;13</span><br></pre></td></tr></table></figure><h3 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h3><h4 id="下标引用操作符"><a href="#下标引用操作符" class="headerlink" title="[]下标引用操作符"></a>[]下标引用操作符</h4><p><strong>操作数</strong>:一个数组名+一个索引值<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[10];&#x2F;&#x2F;创建数组</span><br><span class="line">arr[9]&#x3D;10;&#x2F;&#x2F;实用下标引用操作符</span><br><span class="line">&#x2F;&#x2F;两个操作数是arr和9</span><br></pre></td></tr></table></figure><h4 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="()函数调用操作符"></a>()函数调用操作符</h4><p><strong>操作数</strong>:接受一个或者多个操作数，第一个操作数是函数名，其余操作数为传递给函数的参数。<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int max(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return (x&gt;y?x:y);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;0;</span><br><span class="line">    &#x2F;&#x2F;调用函数时的()就是函数调用操作符</span><br><span class="line">    a&#x3D;max(10,20);</span><br><span class="line">    printf(&quot;%d&quot;,a);&#x2F;&#x2F;20</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问一个结构的成员"><a href="#访问一个结构的成员" class="headerlink" title="访问一个结构的成员"></a>访问一个结构的成员</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.     结构体.成员名  </span><br><span class="line">-&gt;    结构体指针-&gt;成员名</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构体.成员名</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;创建一个结构体类型 struct Stu</span><br><span class="line">struct Stu</span><br><span class="line">&#123;</span><br><span class="line">    char name[20];</span><br><span class="line">    int age;</span><br><span class="line">    char id[15];</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;使用struct Stu这个类型创建一个结构体变量s1并初始化</span><br><span class="line">    struct Stu s1&#x3D;&#123;&quot;张三&quot;,21,&quot;6666666&quot;&#125;;</span><br><span class="line">    printf(&quot;%s\n&quot;,s1.name);</span><br><span class="line">    printf(&quot;%d\n&quot;,s1.age);</span><br><span class="line">    printf(&quot;%s\n&quot;,s1.id);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">张三</span><br><span class="line">21</span><br><span class="line">6666666</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构体指针-&gt;成员名</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;创建一个结构体类型 struct Stu</span><br><span class="line">struct Stu</span><br><span class="line">&#123;</span><br><span class="line">    char name[20];</span><br><span class="line">    int age;</span><br><span class="line">    char id[15];</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct Stu s1&#x3D;&#123;&quot;张三&quot;,21,&quot;6666666&quot;&#125;;</span><br><span class="line">    struct Stu* p&#x3D;&amp;s1;</span><br><span class="line">    printf(&quot;%s\n&quot;,p-&gt;name);</span><br><span class="line">    printf(&quot;%d\n&quot;,p-&gt;age);</span><br><span class="line">    printf(&quot;%s\n&quot;,p-&gt;id);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">张三</span><br><span class="line">21</span><br><span class="line">6666666</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组（四）</title>
      <link href="2021/05/15/c4/"/>
      <url>2021/05/15/c4/</url>
      
        <content type="html"><![CDATA[<h1 id="数组（四）"><a href="#数组（四）" class="headerlink" title="数组（四）"></a>数组（四）</h1><p>数组是一组相同类型元素的集合  </p><h3 id="一维数组的创建方式"><a href="#一维数组的创建方式" class="headerlink" title="一维数组的创建方式"></a>一维数组的创建方式</h3><p><code>数组元素类型 数组名[常量表达式];</code><br>例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;例1</span><br><span class="line">int arr1[10];</span><br><span class="line">&#x2F;&#x2F;例2</span><br><span class="line">char arr2[3];</span><br><span class="line">float arr3[5];</span><br><span class="line">double arr4[10];</span><br><span class="line">&#x2F;&#x2F;错误示例</span><br><span class="line">int n&#x3D;10;</span><br><span class="line">int arr5[n];&#x2F;&#x2F;创建数组时，[]中要给一个常量，不能使用变量</span><br></pre></td></tr></table></figure><h3 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;完全初始化,定义数组时给所有元素赋初值，例：</span><br><span class="line">int arr[5]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">&#x2F;&#x2F;不完全初始化，给数组中部分元素赋初值，其余元素自动为0：例：</span><br><span class="line">int arr1[5];&#x3D;&#123;1,2&#125;;&#x2F;&#x2F;a[0]&#x3D;1 a[1]&#x3D;2,其余元素自动为0</span><br><span class="line">&#x2F;&#x2F;如果定义数组时就给数组中所有元素赋初值，那么就可以不指定数组的长度，因为此时元素的个数已经确定了。例：</span><br><span class="line">int arr2[]&#x3D;&#123;1,2,3,4,5&#125;&#x2F;&#x2F;数组元素个数自动为5</span><br></pre></td></tr></table></figure><h3 id="sizeof和strlen"><a href="#sizeof和strlen" class="headerlink" title="sizeof和strlen"></a>sizeof和strlen</h3><p><strong>sizeof</strong>:计算变量，类型，数组的大小，单位是字节，sizeof是运算符。<br><strong>strlen</strong>:需要引入头文件string.h，求字符串长度，只能针对字符串，从字符串的开头位置依次向后计数，遇到\0返回字符串长度，字符串长度不包括\0，strlen是函数。<br>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char arr1[]&#x3D;&quot;myblog&quot;;</span><br><span class="line">char arr2[]&#x3D;&#123;&#39;m&#39;,&#39;y&#39;,&#39;b&#39;,&#39;l&#39;,&#39;o&#39;,&#39;g&#39;&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(arr1));&#x2F;&#x2F;7</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(arr2));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(arr1));&#x2F;&#x2F;6</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(arr2));&#x2F;&#x2F;随机值</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h3><p>[]是下标引用操作符，数组是使用下标来访问的，下标是从0开始，元素个数是可以通过计算得到的<br>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">int i&#x3D;0,sz&#x3D;0;</span><br><span class="line">sz&#x3D;sizeof(a)&#x2F;sizeof(a[0]);</span><br><span class="line">for(i&#x3D;0;i&lt;sz;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[]&#x3D;&quot;abcde&quot;;</span><br><span class="line">int i&#x3D;0,sz&#x3D;0;</span><br><span class="line">sz&#x3D;(int)strlen(a);&#x2F;&#x2F;strlen返回值是无符号数</span><br><span class="line">for(i&#x3D;0;i&lt;sz;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c\n&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组的存储"><a href="#一维数组的存储" class="headerlink" title="一维数组的存储"></a>一维数组的存储</h3><p>数组在内存中是连续存储的，例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;取数组每个元素地址</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">int i&#x3D;0,sz&#x3D;0;</span><br><span class="line">sz&#x3D;sizeof(a)&#x2F;sizeof(a[0]);</span><br><span class="line">for(i&#x3D;0;i&lt;sz;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;a[%d]&#x3D;%p\n&quot;,i,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*打印结果为:</span><br><span class="line">a[0]&#x3D;007DF988</span><br><span class="line">a[1]&#x3D;007DF98C</span><br><span class="line">a[2]&#x3D;007DF990</span><br><span class="line">a[3]&#x3D;007DF994</span><br><span class="line">a[4]&#x3D;007DF998</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p><code>数组元素类型 数组名[行数][列数];</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int arr[3][4];</span><br><span class="line">&#x2F;*</span><br><span class="line">定义一个3行4列的整型数组，数组名为arr，即</span><br><span class="line">a[0][0], a[0][1], a[0][2], a[0][3]</span><br><span class="line">a[1][0], a[1][1], a[1][2], a[1][3]</span><br><span class="line">a[2][0], a[2][1], a[2][2], a[2][3]</span><br><span class="line">*&#x2F;</span><br><span class="line">char arr[3][5];&#x2F;&#x2F;3行5列</span><br><span class="line">double arr[2][3];&#x2F;&#x2F;2行3列</span><br></pre></td></tr></table></figure><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a[3][4]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;</span><br><span class="line">&#x2F;*</span><br><span class="line">a[0][0]&#x3D;1  a[0][1]&#x3D;2  a[0][2]&#x3D;3  a[0][3]&#x3D;4</span><br><span class="line">a[1][0]&#x3D;5  a[1][1]&#x3D;6  a[1][2]&#x3D;7  a[1][3]&#x3D;8</span><br><span class="line">a[2][0]&#x3D;9  a[2][1]&#x3D;10 a[2][2]&#x3D;11 a[2][3]&#x3D;12</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a[3][4]&#x3D;&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;;</span><br><span class="line">&#x2F;*</span><br><span class="line">a[0][0]&#x3D;1  a[0][1]&#x3D;2  a[0][2]&#x3D;0  a[0][3]&#x3D;0</span><br><span class="line">a[1][0]&#x3D;3  a[1][1]&#x3D;4  a[1][2]&#x3D;0  a[1][3]&#x3D;0</span><br><span class="line">a[2][0]&#x3D;0  a[2][1]&#x3D;0  a[2][2]&#x3D;0  a[2][3]&#x3D;0</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;部分元素初始化，其余元素自动补0</span><br></pre></td></tr></table></figure><p>例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a[][4]&#x3D;&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;&#125;;</span><br><span class="line">&#x2F;*</span><br><span class="line">a[0][0]&#x3D;1  a[0][1]&#x3D;2  a[0][2]&#x3D;3  a[0][3]&#x3D;4</span><br><span class="line">a[1][0]&#x3D;5  a[1][1]&#x3D;6  a[1][2]&#x3D;7  a[1][3]&#x3D;8</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;创建二维数组中行可以省，列不可以省</span><br></pre></td></tr></table></figure><h3 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[3][4]&#x3D;&#123;&#123;1,2,3&#125;,&#123;4,5&#125;&#125;;</span><br><span class="line">int i&#x3D;0,j&#x3D;0;</span><br><span class="line">for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j&#x3D;0;j&lt;4;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;a[%d][%d]&#x3D;%-2d &quot;,i,j,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">打印结果</span><br><span class="line">a[0][0]&#x3D;1  a[0][1]&#x3D;2  a[0][2]&#x3D;3  a[0][3]&#x3D;0</span><br><span class="line">a[1][0]&#x3D;4  a[1][1]&#x3D;5  a[1][2]&#x3D;0  a[1][3]&#x3D;0</span><br><span class="line">a[2][0]&#x3D;0  a[2][1]&#x3D;0  a[2][2]&#x3D;0  a[2][3]&#x3D;0</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="二维数组的存储"><a href="#二维数组的存储" class="headerlink" title="二维数组的存储"></a>二维数组的存储</h3><p>二维数组在内存中也是连续存储的，例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[3][4];</span><br><span class="line">int i&#x3D;0,j&#x3D;0;</span><br><span class="line">for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j&#x3D;0;j&lt;4;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;&amp;a[%d][%d]&#x3D;%p\n&quot;,i,j,&amp;a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&amp;a[0][0]&#x3D;0076F914</span><br><span class="line">&amp;a[0][1]&#x3D;0076F918</span><br><span class="line">&amp;a[0][2]&#x3D;0076F91C</span><br><span class="line">&amp;a[0][3]&#x3D;0076F920</span><br><span class="line">&amp;a[1][0]&#x3D;0076F924</span><br><span class="line">&amp;a[1][1]&#x3D;0076F928</span><br><span class="line">&amp;a[1][2]&#x3D;0076F92C</span><br><span class="line">&amp;a[1][3]&#x3D;0076F930</span><br><span class="line">&amp;a[2][0]&#x3D;0076F934</span><br><span class="line">&amp;a[2][1]&#x3D;0076F938</span><br><span class="line">&amp;a[2][2]&#x3D;0076F93C</span><br><span class="line">&amp;a[2][3]&#x3D;0076F940</span><br><span class="line">可以看出二维数组每个元素的地址在内存中也是连续的</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;二维数组可以看作是由多个一维数组组合而成，如果一个数组的每个元素又是一个数组，那么这个数组就是二维数组。所以一个二维数组也可以分解为多个一维数组。</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>数组名是数组首元素地址，但有两种情况例外</p><ol><li>sizeof(数组名)，计算整个数组大小，sizeof内部单独放一个数组名，数组名表整个数组</li><li>&amp;数组名，取出的是整个数组的地址，数组名表整个数组</li></ol><h3 id="例子：冒泡排序"><a href="#例子：冒泡排序" class="headerlink" title="例子：冒泡排序"></a>例子：冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void Bubble_Sort(int arr[],int sz)</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0,j&#x3D;0,flag,tmp;</span><br><span class="line">for(i&#x3D;0;i&lt;sz-1;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag&#x3D;0;</span><br><span class="line">for(j&#x3D;0;j&lt;sz-1-i;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[j]&gt;arr[j+1])</span><br><span class="line">&#123;</span><br><span class="line">tmp&#x3D;arr[j];</span><br><span class="line">arr[j]&#x3D;arr[j+1];</span><br><span class="line">arr[j+1]&#x3D;tmp;</span><br><span class="line">flag&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag&#x3D;&#x3D;0)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int arr[]&#x3D;&#123;9,8,7,6,5,4,3,2,1&#125;;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">int sz&#x3D;sizeof(arr)&#x2F;sizeof(arr[0]);</span><br><span class="line">Bubble_Sort(arr,sz);</span><br><span class="line">for(i&#x3D;0;i&lt;sz;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数（三）</title>
      <link href="2021/05/09/c3/"/>
      <url>2021/05/09/c3/</url>
      
        <content type="html"><![CDATA[<h1 id="函数（三）"><a href="#函数（三）" class="headerlink" title="函数（三）"></a>函数（三）</h1><p>函数是一段可以重复使用的代码，用来独立地完成某个功能。</p><h2 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h2><ol><li>库函数：C语言本身提供给我们的函数，使用库函数必须包含#include对应的头文件  </li><li>自定义函数：自己设置的函数</li></ol><h3 id="库函数列举"><a href="#库函数列举" class="headerlink" title="库函数列举"></a>库函数列举</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>需要引用头文件string.h,用来计算字符串长度，遇\0结束，最终字符串长度不包括\0。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[]&#x3D;&quot;myblog&quot;;</span><br><span class="line">    printf(&quot;长度为%d\n&quot;,strlen(a));&#x2F;&#x2F;长度为6</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h4><p>需要引用头文件string.h，strcpy() 函数用于对字符串进行复制（拷贝）。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[]&#x3D;&quot;myblog&quot;;</span><br><span class="line">    char b[]&#x3D;&quot;##########&quot;;</span><br><span class="line">    strcpy(b,a);</span><br><span class="line">    printf(&quot;%s\n&quot;,b);&#x2F;&#x2F;myblog</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h4><p><strong>格式</strong>：<br>void *memset(void *str, int c, size_t n)<br>复制一个无符号字符到参数 str 所指向的字符串的前 n 个字符。<br>需要引用头文件string.h<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char arr[]&#x3D;&quot;C programming language&quot;;</span><br><span class="line">    memset(arr,&#39;x&#39;,5);</span><br><span class="line">    printf(&quot;%s\n&quot;,arr);&#x2F;&#x2F;xxxxxgramming language</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义函数的格式"><a href="#自定义函数的格式" class="headerlink" title="自定义函数的格式"></a>自定义函数的格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型 名称(参数声明)</span><br><span class="line">&#123;</span><br><span class="line">    语句;&#x2F;&#x2F;可以是多条语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p><strong>实际参数（实参）：</strong><br>真是传给函数的参数，会被函数内部的代码使用，所以称为实际参数，简称实参。<br><strong>形式参数（形参）：</strong><br>就是个形式上的参数，在函数定义中出现的参数可以看做是一个占位符，它没有数据，只能等到函数被调用时接收传递进来的数据，所以称为形式参数，简称形参。<br><strong>形参和实参的功能</strong><br>传递数据，发生函数调用时，实参的值会传递给形参。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求两数和</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;定义函数</span><br><span class="line">int Add(int x,int y)</span><br><span class="line">&#x2F;&#x2F;x,y为形参，当实参传给形参时，形参其实是实参的一份临时拷贝</span><br><span class="line">&#123;</span><br><span class="line">    int z&#x3D;0;</span><br><span class="line">    z&#x3D;x+y;</span><br><span class="line">    return z;&#x2F;&#x2F;返回值</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a&#x3D;3,b&#x3D;5,sum&#x3D;0;</span><br><span class="line">    &#x2F;&#x2F;使用函数</span><br><span class="line">    sum&#x3D;Add(a,b);</span><br><span class="line">    &#x2F;&#x2F;a,b为实参</span><br><span class="line">    &#x2F;&#x2F;注：实参a,b和形参x,y使用的不是同一空间，通俗点来讲，形参实例化化后其实就相当于实参的一份临时拷贝，</span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p><strong>传值调用：</strong><br>函数的形参和实参分别占有不同内存块,对形参的修改不会影响实参。<br><strong>传址调用：</strong><br>传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式。这种传参方式可以让函数和函数外边的变量建立起正真的联系,也就是函数内部可以直接操作函数外部的变量。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="打印100-200之间的素数"><a href="#打印100-200之间的素数" class="headerlink" title="打印100-200之间的素数"></a>打印100-200之间的素数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">&#x2F;&#x2F;是素数返回1，不是返回0</span><br><span class="line">int prime(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int j&#x3D;2;</span><br><span class="line">    for(j&#x3D;2;j&lt;&#x3D;sqrt(x);j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(x%j&#x3D;&#x3D;0)</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(j&gt;sqrt(x))</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(i&#x3D;100;i&lt;&#x3D;200;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(prime(i)&#x3D;&#x3D;1)&#x2F;&#x2F;调用函数，判断i是否是素数</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印1000-2000之间的闰年"><a href="#打印1000-2000之间的闰年" class="headerlink" title="打印1000-2000之间的闰年"></a>打印1000-2000之间的闰年</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int leap(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if( (x%4&#x3D;&#x3D;0 &amp;&amp; x%100!&#x3D;0) || (x%400&#x3D;&#x3D;0))</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(i&#x3D;1000;i&lt;&#x3D;2000;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(leap(i)&#x3D;&#x3D;1)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用函数，使得n每次加1"><a href="#调用函数，使得n每次加1" class="headerlink" title="调用函数，使得n每次加1"></a>调用函数，使得n每次加1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void num(int* p)</span><br><span class="line">&#123;</span><br><span class="line">    (*p)++;</span><br><span class="line">    &#x2F;&#x2F;注：++优先级比*高，所以不能*p++,要用(*p)++</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n&#x3D;0;</span><br><span class="line">    int* z&#x3D;&amp;n;</span><br><span class="line">    num(z);&#x2F;&#x2F;或者num(&amp;n)</span><br><span class="line">    printf(&quot;%d\n&quot;,n);</span><br><span class="line">    num(z);&#x2F;&#x2F;或者num(&amp;n)</span><br><span class="line">    printf(&quot;%d\n&quot;,n);</span><br><span class="line">    num(z);&#x2F;&#x2F;或者num(&amp;n)</span><br><span class="line">    printf(&quot;%d\n&quot;,n);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><p>函数的嵌套调用是指在一个C语言函数里面在执行另一个函数，这样通常称为函数的嵌套调用。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void print()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void nested()</span><br><span class="line">&#123;</span><br><span class="line">    print();</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">nested();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的递归调用（链式访问）"><a href="#函数的递归调用（链式访问）" class="headerlink" title="函数的递归调用（链式访问）"></a>函数的递归调用（链式访问）</h3><p>把一个函数的返回值作为另外一个函数的参数<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43)));&#x2F;&#x2F;4321</span><br><span class="line">    &#x2F;&#x2F;printf的返回值是打印的字符的个数</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%d&quot;, 43)打印了43，是两个字符，所以返回2</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43))，打印2，是一个字符。所以返回1</span><br><span class="line">    &#x2F;&#x2F;所以打印结果为4321</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p>C语言代码由上到下依次执行，原则上函数定义要出现在函数调用之前，否则就会报错。<br>但在实际开发中，经常会在函数定义之前使用它们，这个时候就需要提前<strong>声明</strong><br>所谓<strong>声明</strong>（Declaration），就是告诉编译器有一个<em>函数</em>叫什么,<em>参数</em>是什么,<em>返回类型</em>是什么。但是具体是不是存在无关紧要。<br>函数声明格式:<br><code>类型 名称(参数声明);</code><br>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;10,b&#x3D;5,s&#x3D;0;</span><br><span class="line">s&#x3D;sum(a,b);</span><br><span class="line">printf(&quot;%d\n&quot;,s);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">int z&#x3D;0;</span><br><span class="line">z&#x3D;x+y;</span><br><span class="line">return x+y;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;当然，如果你的编译器足够聪明那即使你没有事先声明还是能够运行成功的，但是应当尽量避免这种情况。</span><br></pre></td></tr></table></figure><p>正确示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int sum(int x,int y);&#x2F;&#x2F;声明</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;10,b&#x3D;5,s&#x3D;0;</span><br><span class="line">s&#x3D;sum(a,b);</span><br><span class="line">printf(&quot;%d\n&quot;,s);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">int z&#x3D;0;</span><br><span class="line">z&#x3D;x+y;</span><br><span class="line">return x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>递归就是程序自己调用自己<br><strong>递归条件</strong>  </p><ul><li>存在限制条件，当满足这个限制条件时，递归不再继续</li><li>每次递归调用后越来越接近这个限制条件</li></ul><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接受一个整型，按照顺序打印它的每一位，例：输入456，输出4 5 6 </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int print(int x)</span><br><span class="line">&#123;</span><br><span class="line">int s&#x3D;0;</span><br><span class="line">if(x&gt;9)</span><br><span class="line">&#123;</span><br><span class="line">print(x&#x2F;10);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d &quot;,x%10);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n&#x3D;0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);&#x2F;&#x2F;输入456</span><br><span class="line">    &#x2F;&#x2F;递归</span><br><span class="line">print(n);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4 5 6 </span><br></pre></td></tr></table></figure><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;编写函数不允许创建临时变量，求字符串的长度</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int strl(char* x)</span><br><span class="line">&#123;</span><br><span class="line">if(*x!&#x3D;&#39;\0&#39;)</span><br><span class="line">&#123;</span><br><span class="line">return 1+strl(x+1);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[]&#x3D;&quot;myblog&quot;;</span><br><span class="line">printf(&quot;len&#x3D;%d\n&quot;,strl(a));&#x2F;&#x2F;a是数组,数组传参，传过去的不是整个数组，而是第一个元素的地址</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>迭代就是重复的做一件事情<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求n的阶乘</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int fac(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x&lt;&#x3D;1)</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;        </span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return x*fac(x-1);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n&#x3D;0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    printf(&quot;%d\n&quot;,fac(n));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支和循环（二）</title>
      <link href="2021/05/03/c2/"/>
      <url>2021/05/03/c2/</url>
      
        <content type="html"><![CDATA[<h1 id="分支和循环（二）"><a href="#分支和循环（二）" class="headerlink" title="分支和循环（二）"></a>分支和循环（二）</h1><p><strong>C语言程序结构</strong>：</p><ul><li>顺序结构</li><li>选择（分支）结构</li><li>循环结构</li></ul><p><strong>顺序结构</strong>：自上向下依次执行的程序，没有分支，没有循环<br><strong>选择（分支）结构</strong>：用于判断给定的条件，根据判断的结果来控制程序的流程<br><strong>循环结构</strong>：循环结构是指在程序中需要反复执行某个功能而设置的一种程序结构。它由循环体中的条件，判断继续执行某个功能还是退出循环。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>C语言中由一个分号;隔开的就是一条语句。例：<br><code>printf(&quot;boke&quot;);</code><br><code>1+2;</code></p><h3 id="C语言中表示真假"><a href="#C语言中表示真假" class="headerlink" title="C语言中表示真假"></a>C语言中表示真假</h3><p>0表示假，非0表示真</p><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><h4 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h4><p>语法结构：<br>如果条件表达式的结果为真，则语句执行  </p><blockquote><p>单分支if语句：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">  语句组1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>双分支if语句：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">  语句组1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  语句组2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多分支选择结构：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (表达式1)</span><br><span class="line">&#123;</span><br><span class="line">  语句组1;</span><br><span class="line">&#125;</span><br><span class="line">else if (表达式2)</span><br><span class="line">&#123;</span><br><span class="line">  语句组2;</span><br><span class="line">&#125;</span><br><span class="line">else if (表达式3)</span><br><span class="line">&#123;</span><br><span class="line">  语句组3;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  语句组n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：else和离它最近的未匹配的if的匹配<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;0,b&#x3D;0;</span><br><span class="line">if(a&#x3D;&#x3D;1)</span><br><span class="line">if(b&#x3D;&#x3D;0)</span><br><span class="line">printf(&quot;1\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;2&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最终结果是什么也没打印</span><br></pre></td></tr></table></figure><h4 id="2-switch-case语句"><a href="#2-switch-case语句" class="headerlink" title="2.switch case语句"></a>2.switch case语句</h4><blockquote><p>语法结构：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#x2F;&#x2F;注：表达式必须是整形</span><br><span class="line">&#123;</span><br><span class="line">    case 整型数值1: </span><br><span class="line">    语句 1;</span><br><span class="line">    break;</span><br><span class="line">    &#x2F;&#x2F;break用来跳出 switch 语句</span><br><span class="line">    &#x2F;&#x2F;break可加可不加，视情况而定</span><br><span class="line">    case 整型数值2: </span><br><span class="line">    语句 2;</span><br><span class="line">    break;</span><br><span class="line">    ......</span><br><span class="line">    case 整型数值n: </span><br><span class="line">    语句 n;</span><br><span class="line">    break;</span><br><span class="line">    default:</span><br><span class="line">    语句 n+1;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="1-while语句"><a href="#1-while语句" class="headerlink" title="1.while语句"></a>1.while语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;语法结构</span><br><span class="line">while(表达式) &#x2F;&#x2F;while语句在表达式为假(或0)之前重复执行</span><br><span class="line">&#123; </span><br><span class="line">    循环体语句;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-do-while语句"><a href="#2-do-while语句" class="headerlink" title="2.do-while语句"></a>2.do-while语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;语法结构</span><br><span class="line">do </span><br><span class="line">&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;while(表达式); &#x2F;&#x2F;do-while语句在表达式为假(或0)之前重复执行</span><br></pre></td></tr></table></figure><h4 id="3-for语句"><a href="#3-for语句" class="headerlink" title="3.for语句"></a>3.for语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;语法结构</span><br><span class="line">for(初始化表达式;判断表达式;更新表达式) &#x2F;&#x2F;for语句在判断表达式为假(或0)之前重复执行</span><br><span class="line">&#123; </span><br><span class="line">    循环体语句;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="while，do-while，for的区别"><a href="#while，do-while，for的区别" class="headerlink" title="while，do-while，for的区别"></a>while，do-while，for的区别</h4><ul><li>while语句先判断后执行，循环体可能不执行。</li><li>do-while语句先执行后判断，循环体至少执行一次。</li><li>for语句先判断后执行，相比while更简洁。</li></ul><h3 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h3><p><strong>break的用法:</strong></p><blockquote><p>1.用来跳出switch case 语句,例子见switch case语句语法结构。<br>2.当 break 关键字用于循环时，会终止循环而执行整个循环语句后面的代码，例子见下。</p></blockquote><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;1;</span><br><span class="line">while(i&lt;&#x3D;10)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if(i&#x3D;&#x3D;5)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d &quot;,i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;打印结果为1 2 3 4 </span><br></pre></td></tr></table></figure><p><strong>continue的用法：</strong></p><blockquote><p>continue 语句的作用是跳过循环体中剩余的语句而强制进入下一次循环。</p></blockquote><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;错误示范</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;1;</span><br><span class="line">while(i&lt;&#x3D;10)</span><br><span class="line">&#123;</span><br><span class="line">if(i&#x3D;&#x3D;5)</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d &quot;,i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;结果打印完1 2 3 4 后陷入死循环</span><br><span class="line">&#x2F;&#x2F;正确示范</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">while(i&lt;10)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">if(i&#x3D;&#x3D;5)</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d &quot;,i);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;结果1 2 3 4 6 7 8 9 10 </span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="在有序数组中找数字"><a href="#在有序数组中找数字" class="headerlink" title="在有序数组中找数字"></a>在有序数组中找数字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[]&#x3D;&#123;1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">int right&#x3D;sizeof(a)&#x2F;sizeof(a[0])-1;</span><br><span class="line">int left&#x3D;0,mid&#x3D;0,b;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;b);</span><br><span class="line">while(left&lt;&#x3D;right) </span><br><span class="line">&#123;</span><br><span class="line">mid&#x3D;(left+right)&#x2F;2;</span><br><span class="line">if(b&gt;a[mid])</span><br><span class="line">&#123;</span><br><span class="line">left&#x3D;mid+1;</span><br><span class="line">&#125;</span><br><span class="line">else if(b&lt;a[mid])</span><br><span class="line">&#123;</span><br><span class="line">right&#x3D;mid-1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;下标为%d\n&quot;,mid);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(left&gt;right)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;没找到\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">输入6</span><br><span class="line">结果为</span><br><span class="line">下标为5</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="求101-200间的素数"><a href="#求101-200间的素数" class="headerlink" title="求101-200间的素数"></a>求101-200间的素数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0,j&#x3D;0,count&#x3D;0;</span><br><span class="line">for(i&#x3D;101;i&lt;&#x3D;200;i+&#x3D;2)</span><br><span class="line">&#x2F;&#x2F;用i+&#x3D;2而不是用i++</span><br><span class="line">&#x2F;&#x2F;原因：是因为素数肯定不是偶数，所以用i+&#x3D;2效率会更高</span><br><span class="line">&#123;</span><br><span class="line">for(j&#x3D;2;j&lt;&#x3D;sqrt(i);j++)</span><br><span class="line">&#x2F;&#x2F;sqrt()是开平方，需要调用math.h</span><br><span class="line">&#x2F;&#x2F;用j&lt;&#x3D;sqrt(i)而不是用j&lt;i</span><br><span class="line">&#x2F;&#x2F;原因：若i&#x3D;a*b,则a和b中至少有一个数字小于等于开平方i，所以用j&lt;sqrt(i)效率会更高</span><br><span class="line">&#123;</span><br><span class="line">if(i%j&#x3D;&#x3D;0)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(j&gt;sqrt(i))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;素数的个数为%d\n&quot;,count);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*结果为</span><br><span class="line">101</span><br><span class="line">103</span><br><span class="line">107</span><br><span class="line">109</span><br><span class="line">113</span><br><span class="line">127</span><br><span class="line">131</span><br><span class="line">137</span><br><span class="line">139</span><br><span class="line">149</span><br><span class="line">151</span><br><span class="line">157</span><br><span class="line">163</span><br><span class="line">167</span><br><span class="line">173</span><br><span class="line">179</span><br><span class="line">181</span><br><span class="line">191</span><br><span class="line">193</span><br><span class="line">197</span><br><span class="line">199</span><br><span class="line">素数的个数为21</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;九九乘法表</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;1,j&#x3D;1;</span><br><span class="line">for(i&#x3D;1;i&lt;&#x3D;9;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j&#x3D;1;j&lt;&#x3D;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d*%d&#x3D;%-2d &quot;,j,i,j*i);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*结果为</span><br><span class="line">1*1&#x3D;1</span><br><span class="line">1*2&#x3D;2  2*2&#x3D;4</span><br><span class="line">1*3&#x3D;3  2*3&#x3D;6  3*3&#x3D;9</span><br><span class="line">1*4&#x3D;4  2*4&#x3D;8  3*4&#x3D;12 4*4&#x3D;16</span><br><span class="line">1*5&#x3D;5  2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25</span><br><span class="line">1*6&#x3D;6  2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36</span><br><span class="line">1*7&#x3D;7  2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49</span><br><span class="line">1*8&#x3D;8  2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64</span><br><span class="line">1*9&#x3D;9  2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识C语言（一）</title>
      <link href="2021/04/29/c1/"/>
      <url>2021/04/29/c1/</url>
      
        <content type="html"><![CDATA[<h1 id="初识C语言（一）"><a href="#初识C语言（一）" class="headerlink" title="初识C语言（一）"></a>初识C语言（一）</h1><p>计算机语言就是人和计算交互的语言，而<strong>C语言</strong>是一门计算机语言。<br><strong>计算机语言的发展</strong>：  </p><blockquote><p>机器语言（二进制语言） → 汇编语言 → 高级语言（例如：C/C++/JAVA/python等）  </p></blockquote><h3 id="第一个C语言程序"><a href="#第一个C语言程序" class="headerlink" title="第一个C语言程序"></a>第一个C语言程序</h3><p>输出hello world</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;&#x2F;&#x2F;包含一个叫stdio.h的文件</span><br><span class="line">int main()&#x2F;&#x2F;主程序-程序入口-main函数有且只有一个</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;printf是打印函数,printf(&quot;要打印输出的内容&quot;)。</span><br><span class="line">    printf(&quot;hello world\n&quot;);&#x2F;&#x2F;打印hello world，\n为换行</span><br><span class="line">    return 0;&#x2F;&#x2F;程序正常退出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>char 字符数据类型<br>short 短整型<br>int 整型<br>long 长整型<br>long long (c99)更长整型<br>float 单精度浮点数（小数就是浮点数）<br>double 双精度浮点数  </p></blockquote><h3 id="常用的打印类型"><a href="#常用的打印类型" class="headerlink" title="常用的打印类型"></a>常用的打印类型</h3><blockquote><p>%d 打印十进制整型<br>%c 打印字符<br>%p 打印地址<br>%f 打印单精度浮点数<br>%lf 打印单精度浮点数<br>%x 打印16进制数字<br>%s 打印字符串  </p></blockquote><h3 id="常量-变量"><a href="#常量-变量" class="headerlink" title="常量 变量"></a>常量 变量</h3><p>不变的值，C语言中用<strong>常量</strong>表示。<br>变的值，C语言中用<strong>变量</strong>表示。  </p><h4 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h4><p>分为<strong>局部变量</strong>和<strong>全局变量</strong><br><strong>局部变量</strong>：定义在代码块{}内部<br><strong>全局变量</strong>：定义在代码块{}之外，全局变量不初始化，默认是0<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int n1&#x3D;1;&#x2F;&#x2F;全局变量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n2&#x3D;2;&#x2F;&#x2F;局部变量</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li>C语言语法规定，变量要定义在当前代码块的最前面</li><li>局部变量和全局变量名字尽量不相同</li><li>当局部变量和全局变量的名字相同时，局部变量优先</li></ol><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>作用域就是变量可以使用的范围</p><blockquote><p>局部变量的作用域是变量所在的局部范围<br>全局变量的作用域是整个工程  </p></blockquote><h4 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h4><p>生命周期就是变量创建到变量销毁的之间的时间段</p><blockquote><p>局部变量：进入作用域生命周期开始，出作用域生命周期结束<br>全局变量：整个程序的生命周期  </p></blockquote><h4 id="常量分类"><a href="#常量分类" class="headerlink" title="常量分类"></a>常量分类</h4><blockquote><p>字面常量,例:<br><code>3;</code><br>const修饰的常变量,(注：被const修饰的变量虽然有一些常量的属性，但本质还是变量)例：<br><code>const int num = 1;</code><br>#define 定义的标识符常量,例:<br><code>#define MAX 2</code><br>枚举常量,例：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum color</span><br><span class="line">&#123;</span><br><span class="line">  RED,&#x2F;&#x2F;0</span><br><span class="line">  YELLOW,&#x2F;&#x2F;1</span><br><span class="line">  BLUE&#x2F;&#x2F;2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>由双引号引起的一串字符称为字符串，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;asdsdfg&quot;</span><br><span class="line">&quot;&quot;&#x2F;&#x2F;空字符串</span><br></pre></td></tr></table></figure><p>注：字符串结束标识是一个\0的转义字符，在计算字符串长度时\0是结束标志，不算做字符串内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;strlen计算字符串长度,调用strlen需要包含&lt;string.h&gt;</span><br><span class="line">&#x2F;&#x2F;strlen计算字符串长度时遇&#39;\0&#39;结束，且&#39;\0&#39;不计入长度</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char ljs1[]&#x3D;&quot;abc&quot;;</span><br><span class="line">&#x2F;&#x2F;字符串后自动补&#39;\0&#39;</span><br><span class="line">&#x2F;&#x2F;&quot;abc&quot; -- &#39;a&#39; &#39;b&#39; &#39;c&#39; &#39;\0&#39;</span><br><span class="line">char ljs2[]&#x3D;&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(ljs1));&#x2F;&#x2F;打印结果为3</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(ljs2));&#x2F;&#x2F;打印结果为随机值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char liu1[]&#x3D;&quot;abc&quot;;</span><br><span class="line">char liu2[]&#x3D;&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;\0&#39;&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(liu1));&#x2F;&#x2F;打印结果为3</span><br><span class="line">printf(&quot;%d\n&quot;,strlen(liu2));&#x2F;&#x2F;打印结果为3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>这里只列举了常用的</p><blockquote><p>\n     换行<br>\‘    单引号字符<br>\“    双引号字符<br>\\    反斜杠<br>\b     退格<br>\t     水平制表<br>\ddd   三位八进制<br>\xdd   二位十六进制  </p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>不需要的代码可以删除，也可以选择注释掉</li><li>比较难懂的代码，可以加上注释，方便自己和他人理解代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单行注释：</span><br><span class="line">&#x2F;&#x2F;  </span><br><span class="line">多行注释：</span><br><span class="line">&#x2F;* 内容 *&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：C语言不能嵌套注释</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>一组相同类型元素的集合就是数组<br><strong>数组定义</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int arr[10]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;&#x2F;&#x2F;定义一个整型数组，最多放10个元素</span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">加(+)减(-)乘(*)除(&#x2F;)求余或称模运算(%)自增(++)自减(--)</span><br><span class="line"></span><br><span class="line">关系运算符</span><br><span class="line">大于(&gt;)小于(&lt;)等于(&#x3D;&#x3D;)  大于等于(&gt;&#x3D;)  小于等于(&lt;&#x3D;)不等于(!&#x3D;)</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">与(&amp;&amp;)或(||)非(!)</span><br><span class="line"></span><br><span class="line">位操作运算符</span><br><span class="line">位与(&amp;)  位或(|)  位非(~)  位异或(^)  左移(&lt;&lt;)  右移(&gt;&gt;)</span><br><span class="line"></span><br><span class="line">赋值运算符 </span><br><span class="line">简单赋值(&#x3D;)  复合算术赋值(+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;)  复合位运算赋值(&amp;&#x3D;,|&#x3D;,^&#x3D;,&gt;&gt;&#x3D;,&lt;&lt;&#x3D;)</span><br><span class="line"></span><br><span class="line">指针运算符</span><br><span class="line">取内容(*)取地址(&amp;)</span><br><span class="line"></span><br><span class="line">求字节数运算符</span><br><span class="line">sizeof</span><br></pre></td></tr></table></figure><h3 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h3><p>只要是整数，内存中存储的都是二进制的补码<br><strong>正数</strong>：<br>原码 反码 补码相同<br><strong>负数</strong>：<br>原码（直接列出该数的二进制） -&gt; 反码（符号位不变，其他位按位取反） -&gt; 补码（反码+1）</p><h3 id="关键字typedef"><a href="#关键字typedef" class="headerlink" title="关键字typedef"></a>关键字typedef</h3><p>typedef就是给类型重命名,例:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef unsigned int uint;&#x2F;&#x2F;将unsigned int重命名为uint</span><br><span class="line">uint a&#x3D;10;&#x2F;&#x2F;等同于unsigned int a&#x3D;10</span><br></pre></td></tr></table></figure><h3 id="关键字static"><a href="#关键字static" class="headerlink" title="关键字static"></a>关键字static</h3><p>static修饰<strong>局部变量</strong>：<br>局部变量声明周期变长<br>static修饰<strong>全局变量</strong>：<br>改变变量的作用域，让静态的全局变量只能在自己所在的源文件内部使用，出了源文件就无法再使用<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int test()</span><br><span class="line">&#123;</span><br><span class="line">static int a&#x3D;0;</span><br><span class="line">a++;</span><br><span class="line">printf(&quot;%d\n&quot;,a);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">while(i&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>int a前加上static后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int test()</span><br><span class="line">&#123;</span><br><span class="line">static int a&#x3D;0;</span><br><span class="line">a++;</span><br><span class="line">printf(&quot;%d\n&quot;,a);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i&#x3D;0;</span><br><span class="line">while(i&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="define定义常量和宏"><a href="#define定义常量和宏" class="headerlink" title="#define定义常量和宏"></a>#define定义常量和宏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义标识符的一般形式为：#define 标识符 常量</span><br><span class="line">#define MAX 1000</span><br><span class="line">&#x2F;&#x2F;宏定义</span><br><span class="line">&#x2F;&#x2F;1.定义没有参数的宏一般形式：#define 宏名称 替换文本</span><br><span class="line">#define BUFFER_SIZE (4 * 512)</span><br><span class="line">&#x2F;&#x2F;2.#define 宏名称( [形参列表] ) 替换文本</span><br><span class="line">#define ADD(x,y) ((x)+(y))</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>内存</strong>：内存是电脑上特别重要的存储器,计算机中所有程序的运行都是在内存中进行的。所以为了有效的使用内存,就把内存划分成一个个小的内存单元,每个内存单元的大小是1个字节。为了能够有效的访问到内存的每个单元,就给内存单元进行了编号,这些编号被称为该内存单元的地址。<br>用来存放地址的变量-指针变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;例：</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a &#x3D; 5;</span><br><span class="line">int* p &#x3D;&amp;a;&#x2F;&#x2F;&amp;取地址，取a在内存中的地址</span><br><span class="line">printf(&quot;%p\n&quot;,&amp;a);</span><br><span class="line">printf(&quot;%p\n&quot;,p);&#x2F;&#x2F;取a的地址，打印出来结果一样</span><br><span class="line">*p&#x3D;20;&#x2F;&#x2F;*解引用操作符</span><br><span class="line">printf(&quot;%d\n&quot;,a);&#x2F;&#x2F;打印出a为20</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><strong>结构体</strong>：我们自己创造出的类型，里面可以包括整型，字符等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">结构体一般形式为：</span><br><span class="line">struct 结构名</span><br><span class="line">&#123;成员列表&#125;;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;例：</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;创建结构体类型</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">char name[20];</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct student stu1&#x3D;&#123;&quot;张三&quot;,19&#125;;&#x2F;&#x2F;利用创建好的结构体类型创建结构体变量并初始化</span><br><span class="line">printf(&quot;名字：%s，年龄：%d\n&quot;,stu1.name,stu1.age);&#x2F;&#x2F;打印成员</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;利用指针变量打印成员</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">char name[20];</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">struct student stu1&#x3D;&#123;&quot;张三&quot;,19&#125;;</span><br><span class="line">struct student* s&#x3D;&amp;stu1;</span><br><span class="line">&#x2F;&#x2F;利用s打印学生姓名和年龄</span><br><span class="line">&#x2F;&#x2F;结构体变量.成员</span><br><span class="line">&#x2F;&#x2F;结构体指针-&gt;成员</span><br><span class="line">printf(&quot;名字：%s，年龄：%d\n&quot;,(*s).name,(*s).age);</span><br><span class="line">printf(&quot;名字：%s，年龄：%d\n&quot;,s-&gt;name,s-&gt;age);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-练习</title>
      <link href="2021/01/28/practice/"/>
      <url>2021/01/28/practice/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言-练习"><a href="#C语言-练习" class="headerlink" title="C语言-练习"></a>C语言-练习</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;字符串逆序</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void reverse(char *p)</span><br><span class="line">&#123;</span><br><span class="line">    int len&#x3D;strlen(p);</span><br><span class="line">    &#x2F;&#x2F;使用strlen函数需要调用头文件string.h</span><br><span class="line">    &#x2F;&#x2F;逆序思路：</span><br><span class="line">    &#x2F;&#x2F;将字符数组最左侧的字符和字符数组最右侧的字符进行交换</span><br><span class="line">    &#x2F;&#x2F;然后将字符数组最左侧字符的下一个字符和字符数组最右侧的字符的上一个字符进行交换</span><br><span class="line">    &#x2F;&#x2F;……</span><br><span class="line">    char* left&#x3D;p;</span><br><span class="line">    char* right&#x3D;p+len-1;</span><br><span class="line">    char tmp;</span><br><span class="line">    while(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp&#x3D;*left;</span><br><span class="line">        *left&#x3D;*right;</span><br><span class="line">        *right&#x3D;tmp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char s[256]&#x3D;&#123;0&#125;;</span><br><span class="line">    gets(s);</span><br><span class="line">    &#x2F;&#x2F;gets是读取一行字符串</span><br><span class="line">    &#x2F;&#x2F;之所以用gets而不是scanf是因为scanf遇到空格就不会再读取了</span><br><span class="line">    reverse(s);</span><br><span class="line">    printf(&quot;%s\n&quot;,s);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">my blog</span><br><span class="line">golb ym</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求Sn&#x3D;a+aa+aaa+aaaa+aaaaa的和，其中a是一个数字</span><br><span class="line">&#x2F;&#x2F;例如：2+22+222+2222+22222</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int sum&#x3D;0;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">int r&#x3D;0;</span><br><span class="line">    int n,a;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;a);</span><br><span class="line">    for(i&#x3D;0;i&lt;a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">r&#x3D;r*10+n;</span><br><span class="line">        sum&#x3D;sum+r;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">2 5</span><br><span class="line">24690</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;程序的执行结果是什么</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char a&#x3D;200;</span><br><span class="line">    unsigned char b&#x3D;100;</span><br><span class="line">    unsigned char c&#x3D;0;</span><br><span class="line">    c&#x3D;a+b;</span><br><span class="line">    &#x2F;&#x2F;11001000 -a</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000011001000</span><br><span class="line">    &#x2F;&#x2F;01100100 -b</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000001100100</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000100101100 a+b</span><br><span class="line">    &#x2F;&#x2F;00101100 -c</span><br><span class="line">    &#x2F;&#x2F;整型提升</span><br><span class="line">    &#x2F;&#x2F;00000000000000000000000000101100 - 44</span><br><span class="line">    printf(&quot;%d,%d&quot;,a+b,c);</span><br><span class="line">    &#x2F;&#x2F;300，44</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印菱形</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    int line;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;line);</span><br><span class="line">    &#x2F;&#x2F;line是上半部分行数，line-1是下半部分行数</span><br><span class="line">    &#x2F;&#x2F;打印上部分</span><br><span class="line">    for(i&#x3D;0;i&lt;line;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;line-1-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(j&#x3D;0;j&lt;(i*2+1);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;打印下部分</span><br><span class="line">    for(i&#x3D;0;i&lt;line-1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;&#x3D;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(j&#x3D;0;j&lt;(line-i-1)*2-1;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">5</span><br><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br><span class="line"> *******</span><br><span class="line">  *****</span><br><span class="line">   ***</span><br><span class="line">    *</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;程序的执行结果是什么</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;char的存储范围为-128-127</span><br><span class="line">    char a[1000]&#x3D;&#123;0&#125;;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;1000;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]&#x3D;-1-i;</span><br><span class="line">        &#x2F;&#x2F;-1,-2,-3…-128，127,126,125…2,1,0，-1，-2</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,strlen(a));&#x2F;&#x2F;strlen函数遇见0结束，最终计算的长度不包括</span><br><span class="line">    &#x2F;&#x2F;结果为255</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-输入与输出</title>
      <link href="2021/01/08/io/"/>
      <url>2021/01/08/io/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言-输入与输出"><a href="#C语言-输入与输出" class="headerlink" title="C语言-输入与输出"></a>C语言-输入与输出</h1><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><p><strong>需通过#include命令引入stdio.h头文件</strong><br><code>#include &lt;stdio.h&gt;</code></p><h3 id="输入输出缓冲区"><a href="#输入输出缓冲区" class="headerlink" title="输入输出缓冲区"></a>输入输出缓冲区</h3><p><strong>输入输出缓冲区的作用</strong><br>我们从磁盘里取信息，我们先把读出的数据放在缓冲区，计算机再直接从缓冲区中取数据，等缓冲区的数据取完后再去磁盘中读取，这样就可以减少磁盘的读写次数，再加上计算机对缓冲区的操作大大快于对磁盘的操作，故应用缓冲区可大大提高计算机的运行速度。</p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><p>格式化读入数据并赋值给变量，返回成功赋值变量的个数，失败返回EOF(End Of File)  </p><blockquote><p>格式：scanf(“占位符与其他字符”,变量地址);</p></blockquote><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">&#x2F;&#x2F;33 55</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[20]&#x3D;&#123;0&#125;;</span><br><span class="line">scanf(&quot;%s&quot;,a);</span><br><span class="line">&#x2F;&#x2F;liu</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:当读入字符数组时，字符数组前并不加取址符，scanf遇到空格结束当前变量输入</p></blockquote><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>格式化输出，返回成功输出的变量个数，失败返回-1</p><blockquote><p>格式：printf(“占位符与其他字符”,变量);或printf(“字符串常量”); </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a&#x3D;2,b&#x3D;3;</span><br><span class="line">char c&#x3D;&#39;L&#39;;</span><br><span class="line">printf(&quot;%d,%d,%d,%c\n&quot;,a,b,a+b,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p>读入一整行字符（在C11以后的版本中已经弃用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char ch[100];</span><br><span class="line">gets(ch);</span><br></pre></td></tr></table></figure><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>输出一个字符串常量，并自动添加换行符<br><code>puts(&quot;hello&quot;);//等同于printf(&quot;hello\n&quot;);</code></p><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h3><p>读入单个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a&#x3D;getchar();</span><br><span class="line">char b&#x3D;getchar();</span><br><span class="line">&#x2F;&#x2F;输入：cd</span><br><span class="line">printf(&quot;%c,%c&quot;,a,b);</span><br><span class="line">&#x2F;&#x2F;输出：cd</span><br><span class="line">&#x2F;&#x2F;注：如有空格或者换行会将空格或换行也作为一个字符输入进去</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[20];</span><br><span class="line">char b;</span><br><span class="line">scanf(&quot;%s&quot;,a);</span><br><span class="line">    &#x2F;&#x2F;输入abc然后回车，回车也会算为一个字符,即&#39;\n&#39;，所以实际上输入的字符串为&quot;abc\n&quot;，这些字符串被放入输入缓冲区</span><br><span class="line">    &#x2F;&#x2F;其中abc被scanf取走,但还余留一个\n在输入缓冲区内</span><br><span class="line">printf(&quot;请输入Y或N:&quot;);</span><br><span class="line">b&#x3D;getchar();</span><br><span class="line">    &#x2F;&#x2F;getchar()从输入缓冲区内将\n取走并赋值给b，所以b为&#39;\n&#39;</span><br><span class="line">if(b&#x3D;&#x3D;&#39;Y&#39;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F;所以最终打印结果为&quot;失败&quot;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[20];</span><br><span class="line">char b,c;</span><br><span class="line">scanf(&quot;%s&quot;,a);</span><br><span class="line">    &#x2F;&#x2F;输入&quot;abc sdad\n&quot;，放入输入缓存区,scanf从输入缓存区取走&quot;abc&quot;，输入缓存区还剩下&quot; sdad&quot; </span><br><span class="line">printf(&quot;请输入Y或N:&quot;);</span><br><span class="line">while((b&#x3D;getchar())!&#x3D;&#39;\n&#39;)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F;从输入缓存区剩下的字符串取第一个字符并赋值给b，若b不等于&#39;\n&#39;，则条件为真，继续循环，取下一个字符赋值给b，直到b等于&#39;\n&#39;,条件为假，跳出循环。</span><br><span class="line">c&#x3D;getchar();</span><br><span class="line">if(c&#x3D;&#x3D;&#39;Y&#39;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h3><p>输出单个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a&#x3D;&#39;A&#39;;</span><br><span class="line">char b&#x3D;&#39;\n&#39;;</span><br><span class="line">putchar(a);</span><br><span class="line">putchar(b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见的占位符"><a href="#常见的占位符" class="headerlink" title="常见的占位符"></a>常见的占位符</h3><blockquote><p>十进制整数    %d<br>十六进制整数  %x<br>八进制整数    %o<br>单精度浮点型  %f<br>双精度浮点型  %lf<br>字符         %c<br>字符串       %s<br>指针         %p<br>无符号十进制整数  %u</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
